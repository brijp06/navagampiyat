Imports WeightPavti.CLS
Imports System.Data
Imports System.Data.SqlClient
Imports System.Math
Imports CrystalDecisions.Shared
Imports CrystalDecisions.CrystalReports.Engine
Imports System.Drawing.Printing
Imports System.Text
Public Class AdoFunc
    Private Const ODBC_ADD_Dsn = 1
    Private Const ODBC_Config_Dsn = 2
    Private Const ODBC_Remove_Dsn = 3
    Private Const VBAPINULL As Long = 0
    Private Declare Function SQLConfigDataSource Lib "ODBCCP32.DLL" (ByVal hwndParent As Integer, ByVal fRequest As Integer, ByVal lpszDriver As String, ByVal lpszAttributes As String) As Integer
    Dim guj_unit_arr(0 To 99) As String
    Dim guj_hundred_arr(0 To 9) As String

    Dim eng_unit_arr(0 To 99) As String
    '   Dim guj_unit_arr(0 To 99) As String
    '  Dim guj_hundred_arr(0 To 9) As String
    Dim guj_Thousand_arr(0 To 9) As String
    Dim unit_arr(0 To 9) As String
    Dim tens_arr(0 To 8) As String
    Dim more_tens(0 To 8) As String
    Dim more_arr(0 To 3) As String
    '
    Public Const gInt = 0
    Public Const gDbl = 1
    Public Const gStr = 2
    Public Const gDat = 3
    Public Const gTme = 4
    Public Const g2Dec = "###0.00"
    Public Const g3Dec = "###0.000"
    Public Const g0Dec = "###0"

    Public Sub OnKeyDown(ByVal e As KeyEventArgs)
        'If e.KeyCode = Keys.Enter Then
        '    e.Handled = True
        '    SendKeys.Send("{TAB}")
        'End If
        If e.KeyCode = Keys.Up Then
            e.Handled = True
            SendKeys.Send("+{TAB}")
        End If
        If e.KeyCode = Keys.Down Then
            e.Handled = True
            SendKeys.Send("{TAB}")
        End If

    End Sub
    Public Sub displayrowheader(ByVal dg As DataGridView)
        Try
            Dim i As Integer
            i = 0
            dg.ColumnHeadersDefaultCellStyle.Font = New Font("Cambria", 9, FontStyle.Regular)
            Do While i < dg.Columns.Count
                dg.Columns(i).HeaderText = Replace(dg.Columns(i).Name, "_", " ")
                i += 1
            Loop
        Catch ex As Exception
            MsgBox("Error : " + ex.Message.ToString, MsgBoxStyle.Exclamation, "System")
        End Try
    End Sub
    Public Function NewNumToWord(ByVal mNum As Double) As String
        Dim l(10) As String
        Dim nAmt As Double
        Dim mAmt As Double
        Dim len_amt As Double
        Dim mpaise_amt As Double
        Dim cAmt As Double
        'Dim cccstr As String
        Dim ccstr As String
        Dim sStr As String = ""
        'Dim mStr As String
        Dim cr_str As String
        Dim th_str As String
        Dim lh_str As String
        Dim mpaise As String
        Dim oh_str As String = ""
        Dim lstr As String
        Dim TStr As String

        Dim CurUnit As String
        Dim DecCurUnit As String

        'CurUnit = "Rupees"
        CurUnit = ""
        DecCurUnit = "Paisa"

        If Val(mNum) = 0 Then
            NewNumToWord = ""
            Exit Function
        End If

        l(3) = "Hundred"
        l(4) = "Thousand"
        l(5) = "Lac"
        l(6) = "Crore"

        mpaise_amt = Val(Right(LTrim(Str(mNum * 100)), 2))

        If mpaise_amt = 0 Then
            mpaise = Trim(CurUnit)
        Else
            If Val(mNum) >= 1 Then
                mpaise = Trim(CurUnit) & " And " + Num2Wrd1to99(mpaise_amt) & " " & Trim(DecCurUnit)
            Else
                mpaise = Num2Wrd1to99(mpaise_amt) & " " & Trim(DecCurUnit)
            End If
        End If

        mAmt = Int(Val(mNum))
        len_amt = Len(LTrim(Str(mAmt)))
        If len_amt > 7 Then
            ccstr = l(6)
            cAmt = Val(LTrim(Str(Int(mAmt / 10000000))))
            len_amt = Len(LTrim(Str(cAmt)))
            If len_amt = 3 Then
                oh_str = l(3)
                nAmt = Val(LTrim(Str(Int(cAmt / 100))))
                cr_str = Num2Wrd1to99(nAmt) + " " + oh_str
                sStr = cr_str
                cAmt = Val(LTrim(Str(cAmt - (Int(cAmt / 100) * 100))))
                If cAmt <> 0 Then
                    nAmt = cAmt
                    sStr = sStr + " " + Num2Wrd1to99(nAmt) + " " + ccstr
                End If
            Else
                nAmt = cAmt
                cr_str = Num2Wrd1to99(nAmt) + " " + ccstr
                sStr = cr_str
            End If
            mAmt = Val(LTrim(Str(mAmt - (Int(mAmt / 10000000) * 10000000))))
            len_amt = Len(LTrim(Str(mAmt)))
        End If

        If len_amt = 6 Or len_amt = 7 Then
            lstr = l(5)
            nAmt = Val(LTrim(Str(Int(mAmt / 100000))))
            lh_str = Num2Wrd1to99(nAmt) + " " + lstr
            sStr = sStr + " " + lh_str
            mAmt = Val(LTrim(Str(mAmt - (Int(mAmt / 100000) * 100000))))
            len_amt = Len(LTrim(Str(mAmt)))
        End If

        If len_amt = 5 Or len_amt = 4 Then
            TStr = l(4)
            nAmt = Val(LTrim(Str(Int(mAmt / 1000))))
            th_str = Num2Wrd1to99(nAmt) + " " + TStr
            sStr = sStr + " " + th_str
            mAmt = Int(Val(LTrim(Str(mAmt - (Int(mAmt / 1000) * 1000)))))
            len_amt = Len(LTrim(Str(mAmt)))
        End If

        If len_amt = 3 Then
            nAmt = mAmt
            nAmt = Val(LTrim(Str(Int(mAmt / 100))))
            If nAmt > 0 Then
                oh_str = l(3)
            End If
            oh_str = Num2Wrd1to99(nAmt) + " " + oh_str
            sStr = sStr + " " + oh_str
            mAmt = Val(LTrim(Str(mAmt - (Int(mAmt / 100) * 100))))
            If mAmt <> 0 Then
                nAmt = mAmt
                oh_str = Num2Wrd1to99(nAmt)
                sStr = sStr + " " + oh_str '+ mpaise
            End If
        Else
            nAmt = mAmt
            oh_str = Num2Wrd1to99(nAmt)
            sStr = sStr + " " + oh_str '+ mpaise
        End If
        NewNumToWord = UCase(Left(sStr, 2)) + LCase(Right(sStr, Len(sStr) - 2)) + " " + LCase(Trim(mpaise))
    End Function
    Public Function Num2Wrd1to99(ByVal nAmt As Double) As String
        Dim damt As Double
        Dim d(10) As String
        Dim w(20) As String
        Dim mStr As String = ""

        d(2) = "Twenty"
        d(3) = "Thirty"
        d(4) = "Fourty"
        d(5) = "Fifty"
        d(6) = "Sixty"
        d(7) = "Seventy"
        d(8) = "Eighty"
        d(9) = "Ninety"

        w(1) = "One"
        w(2) = "Two"
        w(3) = "Three"
        w(4) = "Four"
        w(5) = "Five"
        w(6) = "Six"
        w(7) = "Seven"
        w(8) = "Eight"
        w(9) = "Nine"
        w(10) = "Ten"
        w(11) = "Eleven"
        w(12) = "Twelve"
        w(13) = "Thirteen"
        w(14) = "Fourteen"
        w(15) = "Fifteen"
        w(16) = "Sixteen"
        w(17) = "Seventeen"
        w(18) = "Eighteen"
        w(19) = "Ninteen"
        w(20) = "Twenty"

        damt = Val(LTrim(Str(Int(nAmt / 10))))
        If damt >= 2 Then
            mStr = d(damt)
            damt = Val(LTrim(Str(nAmt - (Int(nAmt / 10) * 10))))
            If damt <> 0 Then
                mStr = mStr + " " + w(damt)
            End If
        Else
            If nAmt <> 0 Then
                mStr = w(nAmt)
            Else
                If nAmt = 0 Then
                    mStr = " "
                End If
            End If
        End If
        Num2Wrd1to99 = mStr
    End Function
    Public Sub loadsystem()
        Try
            Dim ssql As String
            ssql = "Select Account_Effect from department_Master where Company_id=" & clsVariables.CompnyId
            ssql = ssql & " and Department_id=10"
            SAVINGSYSTEM = ob.FindBoolean(ssql, ob.getconnection)
            ssql = "Select Account_Effect from department_Master where Company_id=" & clsVariables.CompnyId
            ssql = ssql & " and Department_id=11"
            FixdSYSTEM = ob.FindBoolean(ssql, ob.getconnection)
            ssql = "Select Account_Effect from department_Master where Company_id=" & clsVariables.CompnyId
            ssql = ssql & " and Department_id=12"
            SHARESYSTEM = ob.FindBoolean(ssql, ob.getconnection)
            ob.LoadFinYear()
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Sub PrepareTrialBalance(ByVal asondate As Date, Optional ByVal checkstock As Boolean = False)
        Try
            Dim sSQL As String
            Dim rst As New DataTable
            Dim conds As String = ""


            Dim dOpening As Double
            sSQL = "DELETE FROM Joint_Trial_Balance where Company_id=" & clsVariables.CompnyId
            sSQL = sSQL & " and ip_Address=" & aq(IPAddress + IPAddress)
            ob.Execute(sSQL, ob.getconnection(ob.Getconn))
            '********** HO Trial Balance Data
            dOpening = 0
            'If MdiMain.ComboDept.SelectedValue = 1 Then
            '    conds = "Select Account_Id From Account_master where Company_id=" & clsVariables.CompnyId & " and Department_id in (1,7,8,10,11,12)"
            'Else
            '    conds = "Select Account_Id From Account_master where Company_id=" & clsVariables.CompnyId & " and Department_id=" & Val(MdiMain.ComboDept.SelectedValue) & ""
            'End If


            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Account_Id,Dr_Opening,Cr_opening," & aq(IPAddress + IPAddress)
            sSQL = sSQL & " FROM Final_Account_Opening_Balance  where Company_id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and Account_Id in (" & conds & ")"
            sSQL = sSQL & "  ORDER BY  account_id"
            ob.Execute(sSQL, ob.getconnection)

            ''''' UpTo Current Date
            '    'Cash Data Posting
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Account_Id,sum(Payment_Amt),sum(Receipt_Amt)," & aq(IPAddress + IPAddress)
            sSQL = sSQL & " FROM Final_Rojmal_Data  "
            sSQL = sSQL & " WHERE company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and account_id <> 0 and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Account_Id in (" & conds & ")"
            sSQL = sSQL & " group by Account_id ORDER BY Account_id"
            ob.Execute(sSQL, ob.getconnection)


            'Cash Book Data Posting
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",bm.Account_id,sum(Receipt_Amt),sum(Payment_Amt)," & aq(IPAddress + IPAddress)
            sSQL = sSQL & " FROM Final_Rojmal_Data as rj,Book_Master  as bm,Voucher_Master as Vm "
            sSQL = sSQL & " WHERE rj.company_id=bm.company_id and rj.book_id=bm.book_id and rj.Company_Id=vm.Company_Id and  rj.Doc_type=vm.Doc_type "
            sSQL = sSQL & " and rj.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and rj.year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and bm.Account_Id in (" & conds & ")"
            sSQL = sSQL & "   group by bm.Account_id ORDER BY bm.Account_id"
            ob.Execute(sSQL, ob.getconnection)



            'Bank Account Data Posting
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Account_id,sum(Payment_Amt),sum(Receipt_Amt)," & aq(IPAddress + IPAddress)
            sSQL = sSQL & " FROM Bank_Main  as bm, Bank_Detail  as bd"
            sSQL = sSQL & " WHERE bm.Company_id = bd.Company_id and bm.Doc_Type = bd.Doc_Type and bm.Doc_No=bd.Doc_no and bm.Year_Id=bd.Year_id"
            sSQL = sSQL & "  and  bm.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & "  and  bm.Year_id = " & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and account_id <> 0 and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Account_Id in (" & conds & ")"
            sSQL = sSQL & "  group by Account_id ORDER BY Account_id"
            ob.Execute(sSQL, ob.getconnection())



            'Bank Book Data Posting
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",bkm.Account_id,sum(Receipt_Amt),sum(Payment_Amt)," & aq(IPAddress + IPAddress)
            sSQL = sSQL & " FROM Bank_Main  as bm,Bank_Detail  as bd,Book_Master  as bkm "
            sSQL = sSQL & " WHERE bm.Company_id = bd.Company_id and bm.Doc_Type = bd.Doc_Type and bm.Doc_No=bd.Doc_no and bm.Year_id=bd.Year_id and bm.company_id=bkm.company_id and bm.book_id=bkm.book_id"
            sSQL = sSQL & "  and bm.Year_id = " & aq(clsVariables.WorkingYear)
            sSQL = sSQL & "  and bm.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and bkm.Account_Id in (" & conds & ")"
            sSQL = sSQL & "  group by bkm.Account_id ORDER BY bkm.Account_id"
            ob.Execute(sSQL, ob.getconnection)



            'Journal Data Posting
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Account_id,sum(Payment_Amt),sum(Receipt_Amt)," & aq(IPAddress + IPAddress)
            sSQL = sSQL & " FROM Final_Journal_Main   as bm, Final_Journal_Detail  as bd "
            sSQL = sSQL & " WHERE bm.Company_id = bd.Company_id and bm.Doc_Type = bd.Doc_Type and bm.Doc_No=bd.Doc_no and bm.Year_Id=bd.Year_id "
            sSQL = sSQL & " and  bm.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and  bm.Year_id = " & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and account_id <> 0 and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Account_Id in (" & conds & ")"
            sSQL = sSQL & "  group by Account_id ORDER BY Account_id"
            ob.Execute(sSQL, ob.getconnection())





            'Kvn For Supplier Account
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",KM.Account_id,0,sum(Net_Amt)," & aq(IPAddress + IPAddress)
            sSQL = sSQL & " FROM KVN_Main as Km Inner Join Voucher_Master as Vm  "
            sSQL = sSQL & " On KM.Company_Id=Vm.Company_ID and KM.Doc_type=Vm.Doc_type "
            sSQL = sSQL & " WHERE KM.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and km.Account_id <> 0 and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and KM.Account_id in (" & conds & ")"
            sSQL = sSQL & "   group by KM.Account_id ORDER BY KM.Account_id"
            ob.Execute(sSQL, ob.getconnection)

            'Purchase Acc Without Kathar Dept 
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Qm.Pur_Account_id ,SUM(KID.NET_amt - ((CASE WHEN Vadtar_Main <> 0 THEN Amount * Vadtar_Main / Doc_Amt ELSE 0 END))),0," & aq(IPAddress + IPAddress)
            'sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Qm.Pur_Account_id ,SUM(KID.NET_amt - KID.Add_VAT_Amt - KID.Vat_amt - ROUND((CASE WHEN Vadtar_Main <> 0 THEN Amount * Vadtar_Main / Doc_Amt ELSE 0 END), 2)),0," & aq(IPAddress + IPAddress)
            sSQL = sSQL & " from KVN_MAIN AS KM INNER JOIN"
            sSQL = sSQL & " KVN_ITEM_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
            sSQL = sSQL & " KM.Doc_No = KID.Doc_No INNER JOIN"
            sSQL = sSQL & " ITEM_MASTER AS Im ON KID.Item_id = Im.Item_Id AND KID.Company_Id = Im.Company_Id Left Outer JOIN"
            sSQL = sSQL & " QUALITY_MASTER AS Qm ON Im.Company_Id = Qm.Company_Id AND Im.Quality_id = Qm.Quality_Id"
            sSQL = sSQL & " Left Outer Join Voucher_Master as  Vm On km.Company_Id=vm.Company_id and Km.doc_type = vm.Doc_type"
            sSQL = sSQL & " where KM.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Qm.Pur_Account_id<>0"
            sSQL = sSQL & " and Qm.Pur_Account_id in (" & conds & ")"

            sSQL = sSQL & " and Vm.Department_ID <> 8"
            sSQL = sSQL & " GROUP BY Qm.Pur_Account_id"
            sSQL = sSQL & " having isnull(SUM(KID.NET_amt - KID.Add_VAT_Amt - KID.Vat_amt),0)<>0"
            sSQL = sSQL & " Order BY Qm.Pur_Account_id"
            ob.Execute(sSQL, ob.getconnection())


            'Purchase Acc For khatar Dept
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Qm.Pur_Account_id,sum(kd.Net_amt)+SUM(((CASE WHEN Freight_Main <> 0 THEN Amount * Freight_Main / Doc_Amt ELSE 0 END)))-sum(((CASE WHEN Vadtar_Main <> 0 THEN Amount * Vadtar_Main / Doc_Amt ELSE 0 END))),0," & aq(IPAddress + IPAddress)
            'sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Qm.Pur_Account_id,sum(kd.Net_amt)-sum(Kd.Vat_amt)-sum(Kd.Add_Vat_amt)-SUM(ROUND((CASE WHEN Freight_Main <> 0 THEN Amount * Freight_Main / Doc_Amt ELSE 0 END), 2))-sum(ROUND((CASE WHEN Vadtar_Main <> 0 THEN Amount * Vadtar_Main / Doc_Amt ELSE 0 END), 2)),0," & aq(IPAddress + IPAddress)
            sSQL = sSQL & " FROM KVN_MAIN AS Km INNER JOIN"
            sSQL = sSQL & " KVN_ITEM_DETAIL AS KD ON Km.Company_Id = KD.Company_Id AND Km.Doc_Type = KD.Doc_Type AND Km.Doc_No = KD.Doc_No LEFT OUTER JOIN"
            sSQL = sSQL & " ITEM_MASTER AS IM ON KD.Company_Id = IM.Company_Id AND KD.Item_id = IM.Item_Id LEFT OUTER JOIN"
            sSQL = sSQL & " QUALITY_MASTER AS Qm ON IM.Company_Id = Qm.Company_Id AND IM.Quality_id = Qm.Quality_Id Left Outer join"
            sSQL = sSQL & " Voucher_Master as VM On km.company_Id=Vm.Company_Id and Km.doc_type=Vm.doc_type"
            sSQL = sSQL & " WHERE "
            sSQL = sSQL & "  Km.Company_Id=" & clsVariables.CompnyId & ""
            sSQL = sSQL & " and Km.Year_Id=" & aq(clsVariables.WorkingYear) & ""
            sSQL = sSQL & " and Vm.Department_Id=8"
            sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Qm.Pur_Account_id<>0"
            sSQL = sSQL & " and Qm.Pur_Account_id in (" & conds & ")"
            sSQL = sSQL & " GROUP BY Qm.Pur_Account_id"
            ob.Execute(sSQL, ob.getconnection())

            ''Purchase Vat Account
            'sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            'sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Dm.Vat_Account_id,SUM(KID.Vat_amt),0," & aq(IPAddress + IPAddress)
            'sSQL = sSQL & " from KVN_MAIN AS KM INNER JOIN"
            'sSQL = sSQL & " KVN_ITEM_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
            'sSQL = sSQL & " KM.Doc_No = KID.Doc_No "
            'sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            'sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            'sSQL = sSQL & " where KM.Company_Id=" & clsVariables.CompnyId
            'sSQL = sSQL & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
            'sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
            'sSQL = sSQL & " and Dm.vat_Account_id in (" & conds & ")"
            'sSQL = sSQL & " and Vat_Account_id <>0"
            'sSQL = sSQL & " Group by Dm.vat_Account_id"
            'sSQL = sSQL & " having isnull(sum(kid.Vat_Amt),0)<>0"
            'ob.Execute(sSQL, ob.getconnection())

            ''Purchase Add Vat Account

            'sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            'sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Dm.Add_Vat_Account_id,SUM(KID.Add_Vat_amt),0," & aq(IPAddress + IPAddress)
            'sSQL = sSQL & " from KVN_MAIN AS KM INNER JOIN"
            'sSQL = sSQL & " KVN_ITEM_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
            'sSQL = sSQL & " KM.Doc_No = KID.Doc_No "
            'sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            'sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            'sSQL = sSQL & " where KM.Company_Id=" & clsVariables.CompnyId
            'sSQL = sSQL & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
            'sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
            'sSQL = sSQL & " and Dm.Add_vat_Account_id in (" & conds & ")"
            'sSQL = sSQL & " and Add_vat_Account_id <>0"
            'sSQL = sSQL & " Group by Dm.Add_vat_Account_Id"
            'sSQL = sSQL & " having isnull(sum(KID.Add_vat_Amt),0)<>0"
            'ob.Execute(sSQL, ob.getconnection)


            'Purchase Add Account
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Dm.Oth_Account_id,Sum(km.Add_Amt),0," & aq(IPAddress + IPAddress)
            sSQL = sSQL & " from KVN_main as km"
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & " where km.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and km.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.Oth_Account_id in (" & conds & ")"
            sSQL = sSQL & " and  Dm.Oth_Account_id<> 0"
            'sSQL = sSQL & " and Vm.Department_Id<>8"
            sSQL = sSQL & " Group by Dm.Oth_Account_id"
            sSQL = sSQL & " having isnull(sum(km.Add_Amt),0)<>0"
            ob.Execute(sSQL, ob.getconnection())

            'purchase Less Amount
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Dm.Oth_Account_id,0,Sum(km.Less_Amt)," & aq(IPAddress + IPAddress)
            sSQL = sSQL & " from KVN_main as km"
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & " where km.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and km.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.Oth_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Dm.Oth_Account_id<>0"
            'sSQL = sSQL & " and Vm.Department_Id<>8"
            sSQL = sSQL & " Group by Dm.Oth_Account_id"
            sSQL = sSQL & " having isnull(sum(km.Less_Amt),0)<>0"
            ob.Execute(sSQL, ob.getconnection)



            'Pruchase Freight Account WithOut Khatar 
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ", Dm.Freight_Account_id,Sum(km.Freight_main),0," & aq(IPAddress + IPAddress)
            sSQL = sSQL & " from KVN_main as km"
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & " where km.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and km.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.Freight_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Dm.Freight_Account_id<>0"
            sSQL = sSQL & " and vm.Department_Id<> 8"
            sSQL = sSQL & " Group by Dm.Freight_Account_id "
            sSQL = sSQL & " having isnull(sum(km.Freight_main),0)<>0"
            ob.Execute(sSQL, ob.getconnection())
            'Rent Sales Data Customer Account
            'Sales Customer Account 
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ", sm.Account_id,sum(Net_Amt),0," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM Rent_Sales_Data Sm Inner Join Voucher_MAster as Vm "
            sSQL = sSQL & " On sm.Company_Id=vm.company_ID and sm.Doc_type=vm.Doc_type "
            sSQL = sSQL & "  WHERE sM.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and Sm.account_id <> 0 and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and sm.Account_id in (" & conds & ")"
            sSQL = sSQL & " group by Sm.Account_id "
            sSQL = sSQL & " having sum(Net_Amt)<>0 "
            sSQL = sSQL & " ORDER BY Sm.Account_id "
            ob.Execute(sSQL, ob.getconnection)
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ", sm.TDS_Ac_id,sum(TDS_Amt),0," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM Rent_Sales_Data Sm Inner Join Voucher_MAster as Vm "
            sSQL = sSQL & " On sm.Company_Id=vm.company_ID and sm.Doc_type=vm.Doc_type "
            sSQL = sSQL & "  WHERE sM.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and Sm.TDS_Ac_id <> 0 and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and sm.TDS_Ac_id in (" & conds & ")"
            sSQL = sSQL & " group by Sm.TDS_Ac_id "
            sSQL = sSQL & " having sum(TDS_Amt)<>0 "
            sSQL = sSQL & " ORDER BY Sm.TDS_Ac_id "
            ob.Execute(sSQL, ob.getconnection)
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ", sm.Rent_Ac_Id,0,sum(Amount)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM Rent_Sales_Data Sm Inner Join Voucher_MAster as Vm "
            sSQL = sSQL & " On sm.Company_Id=vm.company_ID and sm.Doc_type=vm.Doc_type "
            sSQL = sSQL & "  WHERE sM.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and Sm.Rent_Ac_Id <> 0 and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and sm.Rent_Ac_Id in (" & conds & ")"
            sSQL = sSQL & " group by Sm.Rent_Ac_Id "
            sSQL = sSQL & " having sum(Amount)<>0 "
            sSQL = sSQL & " ORDER BY Sm.Rent_Ac_Id "
            ob.Execute(sSQL, ob.getconnection)
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ", sm.Ser_tax_Ac_Id,0,sum(Ser_tax_Amt)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM Rent_Sales_Data Sm Inner Join Voucher_MAster as Vm "
            sSQL = sSQL & " On sm.Company_Id=vm.company_ID and sm.Doc_type=vm.Doc_type "
            sSQL = sSQL & "  WHERE sM.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and Sm.Ser_tax_Ac_Id <> 0 and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and sm.Ser_tax_Ac_Id in (" & conds & ")"
            sSQL = sSQL & " group by Sm.Ser_tax_Ac_Id "
            sSQL = sSQL & " having sum(Ser_tax_Amt)<>0 "
            sSQL = sSQL & " ORDER BY Sm.Ser_tax_Ac_Id "
            ob.Execute(sSQL, ob.getconnection)
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ", sm.Edu_Sess_Ac_Id,0,sum(Edu_Sess_Amt)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM Rent_Sales_Data Sm Inner Join Voucher_MAster as Vm "
            sSQL = sSQL & " On sm.Company_Id=vm.company_ID and sm.Doc_type=vm.Doc_type "
            sSQL = sSQL & "  WHERE sM.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and Sm.Edu_Sess_Ac_Id <> 0 and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and sm.Edu_Sess_Ac_Id in (" & conds & ")"
            sSQL = sSQL & " group by Sm.Edu_Sess_Ac_Id "
            sSQL = sSQL & " having sum(Edu_Sess_Amt)<>0 "
            sSQL = sSQL & " ORDER BY Sm.Edu_Sess_Ac_Id "
            ob.Execute(sSQL, ob.getconnection)
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ", sm.H_Edu_Sess_Ac_Id,0,sum(h_Edu_Sess_Amt)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM Rent_Sales_Data Sm Inner Join Voucher_MAster as Vm "
            sSQL = sSQL & " On sm.Company_Id=vm.company_ID and sm.Doc_type=vm.Doc_type "
            sSQL = sSQL & "  WHERE sM.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and Sm.H_Edu_Sess_Ac_Id <> 0 and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and sm.H_Edu_Sess_Ac_Id in (" & conds & ")"
            sSQL = sSQL & " group by Sm.H_Edu_Sess_Ac_Id "
            sSQL = sSQL & " having sum(h_Edu_Sess_Amt)<>0 "
            sSQL = sSQL & " ORDER BY Sm.H_Edu_Sess_Ac_Id "
            ob.Execute(sSQL, ob.getconnection)


            'Sales Customer Account 
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ", sm.Account_id,sum(Net_Amt),0," & aq(IPAddress + IPAddress)
            sSQL = sSQL & " FROM Sales_Main Sm Inner Join Voucher_MAster as Vm "
            sSQL = sSQL & " On sm.Company_Id=vm.company_ID and sm.Doc_type=vm.Doc_type "
            sSQL = sSQL & "  WHERE sM.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and Sm.account_id <> 0 and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and sm.Account_id in (" & conds & ")"
            sSQL = sSQL & " and sm.Account_ID <> 0"
            sSQL = sSQL & "   group by Sm.Account_id ORDER BY Sm.Account_id"
            ob.Execute(sSQL, ob.getconnection)

            'Sales Quality Acc 
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ", Qm.Sal_Account_id,0,SUM(KID.NET_amt  - ((CASE WHEN Vadtar_Main <> 0 THEN KiD.Amount * KM.Vadtar_Main / KM.Doc_Amt ELSE 0 END))) ," & aq(IPAddress + IPAddress)
            'sSQL = sSQL & "Select " & clsVariables.CompnyId & ", Qm.Sal_Account_id,0,SUM(KID.NET_amt - KID.Add_VAT_Amt - KID.Vat_amt - ROUND((CASE WHEN Vadtar_Main <> 0 THEN KiD.Amount * KM.Vadtar_Main / KM.Doc_Amt ELSE 0 END), 2)) ," & aq(IPAddress + IPAddress)
            sSQL = sSQL & " from Sales_MAIN AS KM INNER JOIN"
            sSQL = sSQL & " Sales_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
            sSQL = sSQL & " KM.Doc_No = KID.Doc_No INNER JOIN "
            sSQL = sSQL & " Voucher_MAster as VM On KM.company_ID=Vm.Company_Id and Km.Doc_type= Vm.doc_type Left Outer Join"
            sSQL = sSQL & " ITEM_MASTER AS Im ON KID.Item_id = Im.Item_Id AND KID.Company_Id = Im.Company_Id Left Outer JOIN"
            sSQL = sSQL & " QUALITY_MASTER AS Qm ON Im.Company_Id = Qm.Company_Id AND Im.Quality_id = Qm.Quality_Id "
            sSQL = sSQL & " where KM.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Qm.Sal_Account_id<>0"
            sSQL = sSQL & " and Qm.Sal_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Qm.Sal_Account_id<>0"
            sSQL = sSQL & " and Vm.Department_ID<>8"
            sSQL = sSQL & " GROUP BY Qm.Sal_Account_id"
            sSQL = sSQL & " having isnull(SUM(KID.NET_amt  - ((CASE WHEN Vadtar_Main <> 0 THEN KiD.Amount * KM.Vadtar_Main / KM.Doc_Amt ELSE 0 END))),0)<>0"
            'sSQL = sSQL & " having isnull(SUM(KID.NET_amt - KID.Add_VAT_Amt - KID.Vat_amt - ROUND((CASE WHEN Vadtar_Main <> 0 THEN KiD.Amount * KM.Vadtar_Main / KM.Doc_Amt ELSE 0 END), 2)),0)<>0"
            sSQL = sSQL & " Order BY Qm.Sal_Account_id"
            ob.Execute(sSQL, ob.getconnection)



            'Sales For Khatar Dept 
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ", Qm.Sal_Account_id,0,sum(kd.Net_amt)-SUM(((CASE WHEN Freight_Main <> 0 THEN KD.Amount * KM.Freight_Main / KM.Doc_Amt ELSE 0 END)))-SUM(((CASE WHEN Vadtar_Main <> 0 THEN KD.Amount * KM.Vadtar_Main / KM.Doc_Amt ELSE 0 END)))," & aq(IPAddress + IPAddress)
            'sSQL = sSQL & "Select " & clsVariables.CompnyId & ", Qm.Sal_Account_id,0,sum(kd.Net_amt)-sum(Kd.Vat_amt)- sum(Kd.Add_Vat_amt)-SUM(ROUND((CASE WHEN Freight_Main <> 0 THEN KD.Amount * KM.Freight_Main / KM.Doc_Amt ELSE 0 END), 2))-SUM(ROUND((CASE WHEN Vadtar_Main <> 0 THEN KD.Amount * KM.Vadtar_Main / KM.Doc_Amt ELSE 0 END), 2))," & aq(IPAddress + IPAddress)
            sSQL = sSQL & " FROM            Sales_MAIN AS Km INNER JOIN"
            sSQL = sSQL & "          SALES_DETAIL AS KD ON AND KM.Year_id = KD.Year_id Km.Company_Id = KD.Company_Id AND Km.Doc_Type = KD.Doc_Type AND Km.Doc_No = KD.Doc_No LEFT OUTER JOIN"
            sSQL = sSQL & " ITEM_MASTER AS IM ON KD.Company_Id = IM.Company_Id AND KD.Item_id = IM.Item_Id LEFT OUTER JOIN"
            sSQL = sSQL & " QUALITY_MASTER AS Qm ON IM.Company_Id = Qm.Company_Id AND IM.Quality_id = Qm.Quality_Id Left Outer join"
            sSQL = sSQL & " Voucher_Master as VM On km.company_Id=Vm.Company_Id and Km.doc_type=Vm.doc_type"
            sSQL = sSQL & " WHERE "
            sSQL = sSQL & "  Km.Company_Id=" & clsVariables.CompnyId & ""
            sSQL = sSQL & " and Km.Year_Id=" & aq(clsVariables.WorkingYear) & ""
            sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Qm.Sal_Account_id<>0"
            sSQL = sSQL & " and Qm.Sal_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Qm.Sal_Account_id<>0"
            sSQL = sSQL & " and VM.Department_Id=8"
            sSQL = sSQL & " GROUP BY Qm.Sal_Account_id"
            ob.Execute(sSQL, ob.getconnection)






            ''Sales Vat Acc 
            'sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            'sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Dm.Vat_Account_id ,0,SUM(KID.Vat_amt)," & aq(IPAddress + IPAddress)
            'sSQL = sSQL & " from Sales_MAIN AS KM INNER JOIN"
            'sSQL = sSQL & " Sales_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
            'sSQL = sSQL & " KM.Doc_No = KID.Doc_No "
            'sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            'sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            'sSQL = sSQL & " where KM.Company_Id=" & clsVariables.CompnyId
            'sSQL = sSQL & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
            'sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
            'sSQL = sSQL & " and Dm.vat_Account_id in (" & conds & ")"
            'sSQL = sSQL & " and Dm.Vat_Account_id<>0"
            'sSQL = sSQL & " Group by Dm.vat_Account_id"
            'sSQL = sSQL & " having isnull(sum(kid.Vat_Amt),0)<>0"
            'ob.Execute(sSQL, ob.getconnection())


            ''Sales Add Vat Acc 
            'sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            'sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Dm.Add_Vat_Account_id,0,SUM(KID.Add_Vat_amt)," & aq(IPAddress + IPAddress)
            'sSQL = sSQL & " from Sales_MAIN AS KM INNER JOIN"
            'sSQL = sSQL & " Sales_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
            'sSQL = sSQL & " KM.Doc_No = KID.Doc_No "
            'sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            'sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            'sSQL = sSQL & " where KM.Company_Id=" & clsVariables.CompnyId
            'sSQL = sSQL & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
            'sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
            'sSQL = sSQL & " and Dm.Add_vat_Account_id in (" & conds & ")"
            'sSQL = sSQL & " and Dm.Add_Vat_Account_id <>0"
            'sSQL = sSQL & " Group by Dm.Add_Vat_Account_Id"
            'sSQL = sSQL & " having isnull(sum(KID.Add_vat_Amt),0)<>0"
            'ob.Execute(sSQL, ob.getconnection)

            'Sales Round Of Account for Add 
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Dm.Oth_Account_id,0,Sum(km.Add_Amt)," & aq(IPAddress + IPAddress)
            sSQL = sSQL & " from Sales_main as Km "
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & "where km.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and km.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.Oth_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Dm.Oth_Account_id<>0 "
            sSQL = sSQL & " Group by Dm.Oth_Account_Id"
            sSQL = sSQL & " having isnull(sum(km.Add_Amt),0)<>0"
            ob.Execute(sSQL, ob.getconnection)

            'Sales Round Of Account for Less
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Dm.Oth_Account_id,Sum(km.Less_Amt),0," & aq(IPAddress + IPAddress)
            sSQL = sSQL & " from Sales_main as Km "
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & "where km.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and km.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.Oth_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Dm.Oth_Account_id<>0"
            sSQL = sSQL & " Group by Dm.Oth_Account_id"
            sSQL = sSQL & " having isnull(sum(km.Less_Amt),0)<>0"
            ob.Execute(sSQL, ob.getconnection)



            'sales For Freight Acc WithOut Khatar Dept
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Dm.Freight_Account_id,0,Sum(Freight_Main)," & aq(IPAddress + IPAddress)
            sSQL = sSQL & " from Sales_main as Km "
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & " where km.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and km.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.Freight_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Vm.Department_ID<>8 "
            sSQL = sSQL & " and Dm.Freight_Account_id<>0"
            sSQL = sSQL & " Group by Dm.Freight_Account_id"
            sSQL = sSQL & " having isnull(sum(km.Freight_Main),0)<>0"
            ob.Execute(sSQL, ob.getconnection)


            If SAVINGSYSTEM = True Then
                'saving receipt Data Credit 
                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Cm.Account_id,0,Sum(RD.Amount)," & aq(IPAddress + IPAddress)
                sSQL = sSQL & " From SAVING_RECEIPT_MAIN as Rm Inner Join SAVING_RECEIPT_DETAIL as Rd On "
                sSQL = sSQL & " Rm.Company_Id=Rd.Company_Id And Rm.Year_Id=Rd.Year_Id And Rm.Doc_Type=Rd.Doc_Type And Rm.Doc_no=Rd.Doc_no "
                sSQL = sSQL & " Inner join Column_master as Cm On Rd.Company_id=Cm.Company_Id And Rd.Column_id=Cm.Column_Id"
                sSQL = sSQL & " Inner join Voucher_master as Vm On RM.Company_id=Vm.Company_Id And RM.Doc_Type=Vm.Doc_Type"
                sSQL = sSQL & " where Rm.COmpany_Id=" & clsVariables.CompnyId
                sSQL = sSQL & " and Rm.Year_Id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and Rm.Doc_DAte<=" & aq(asondate)
                sSQL = sSQL & " and Cm.Account_Id in (" & conds & ")"
                sSQL = sSQL & " Group by Cm.Account_id"
                ob.Execute(sSQL, ob.getconnection)

                'saving receipt Data Debit 
                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Rm.Debit_Account_Id,Sum(RD.Amount),0," & aq(IPAddress + IPAddress)
                sSQL = sSQL & " From SAVING_RECEIPT_MAIN as Rm Inner Join SAVING_RECEIPT_DETAIL as Rd On "
                sSQL = sSQL & " Rm.Company_Id=Rd.Company_Id And Rm.Year_Id=Rd.Year_Id And Rm.Doc_Type=Rd.Doc_Type And Rm.Doc_no=Rd.Doc_no "
                sSQL = sSQL & " Inner join Column_master as Cm On Rd.Company_id=Cm.Company_Id And Rd.Column_id=Cm.Column_Id"
                sSQL = sSQL & " Inner join Voucher_master as Vm On RM.Company_id=Vm.Company_Id And RM.Doc_Type=Vm.Doc_Type"
                sSQL = sSQL & " where Rm.COmpany_Id=" & clsVariables.CompnyId
                sSQL = sSQL & " and Rm.Year_Id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and Rm.Doc_DAte<=" & aq(asondate)
                sSQL = sSQL & " and Rm.Debit_Account_Id in (" & conds & ")"
                sSQL = sSQL & " Group by Rm.Debit_Account_Id"
                ob.Execute(sSQL, ob.getconnection)

                'saving Payment Data 
                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Cm.Account_id,Sum(RD.Amount),0," & aq(IPAddress + IPAddress)
                sSQL = sSQL & " From SAVING_Payment_MAIN as Rm Inner Join SAVING_Payment_DETAIL as Rd On "
                sSQL = sSQL & " Rm.Company_Id=Rd.Company_Id And Rm.Year_Id=Rd.Year_Id And Rm.Doc_Type=Rd.Doc_Type And Rm.Doc_no=Rd.Doc_no "
                sSQL = sSQL & " Inner join Column_master as Cm On Rd.Company_id=Cm.Company_Id And Rd.Column_id=Cm.Column_Id"
                sSQL = sSQL & " Inner join Voucher_master as Vm On RM.Company_id=Vm.Company_Id And RM.Doc_Type=Vm.Doc_Type"
                sSQL = sSQL & " where Rm.COmpany_Id=" & clsVariables.CompnyId
                sSQL = sSQL & " and Rm.Year_Id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and Rm.Doc_DAte<=" & aq(asondate)
                sSQL = sSQL & " and Cm.Account_Id in (" & conds & ")"
                sSQL = sSQL & " Group by Cm.Account_id"
                ob.Execute(sSQL, ob.getconnection)

                'saving Payment Data Credit 
                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Rm.Credit_Account_Id,0,Sum(RD.Amount)," & aq(IPAddress + IPAddress)
                sSQL = sSQL & " From SAVING_Payment_MAIN as Rm Inner Join SAVING_Payment_DETAIL as Rd On "
                sSQL = sSQL & " Rm.Company_Id=Rd.Company_Id And Rm.Year_Id=Rd.Year_Id And Rm.Doc_Type=Rd.Doc_Type And Rm.Doc_no=Rd.Doc_no "
                sSQL = sSQL & " Inner join Column_master as Cm On Rd.Company_id=Cm.Company_Id And Rd.Column_id=Cm.Column_Id"
                sSQL = sSQL & " Inner join Voucher_master as Vm On RM.Company_id=Vm.Company_Id And RM.Doc_Type=Vm.Doc_Type"
                sSQL = sSQL & " where Rm.COmpany_Id=" & clsVariables.CompnyId
                sSQL = sSQL & " and Rm.Year_Id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and Rm.Doc_DAte<=" & aq(asondate)
                sSQL = sSQL & " and Rm.Credit_Account_Id in (" & conds & ")"
                sSQL = sSQL & " Group by Rm.Credit_Account_Id"
                ob.Execute(sSQL, ob.getconnection)
            End If
            

            If FixdSYSTEM = True Then
                'Fixd Receipt Opening
                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Cm.Account_id,0,Sum(FR.Amount)," & aq(IPAddress + IPAddress)
                sSQL = sSQL & " From Fixd_Receipt_Data as Fr Left Outer join Column_master as Cm On "
                sSQL = sSQL & " Fr.Company_Id=Cm.Company_id And Fr.Column_Id=Cm.Column_Id "
                sSQL = sSQL & " where Fr.Company_Id=" & clsVariables.CompnyId
                sSQL = sSQL & " and Fr.Year_Id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and Fr.Doc_DAte<=" & aq(asondate)

                sSQL = sSQL & " and Cm.Account_id in (" & conds & ")"
                sSQL = sSQL & " Group by Cm.Account_id"
                ob.Execute(sSQL, ob.getconnection)



                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",FR.Debit_Account_id,Sum(FR.Amount),0," & aq(IPAddress + IPAddress)
                sSQL = sSQL & " From Fixd_Receipt_Data as Fr Left Outer join Column_master as Cm On "
                sSQL = sSQL & " Fr.Company_Id=Cm.Company_id And Fr.Column_Id=Cm.Column_Id "
                sSQL = sSQL & " where Fr.Company_Id=" & clsVariables.CompnyId
                sSQL = sSQL & " and Fr.Year_Id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and Fr.Doc_DAte<=" & aq(asondate)
                sSQL = sSQL & " and FR.Debit_Account_id in (" & conds & ")"
                sSQL = sSQL & " Group by FR.Debit_Account_id"
                ob.Execute(sSQL, ob.getconnection)

                'fixd payment
                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Cm.Account_id,Sum(Fp.Fixd_Amt),0," & aq(IPAddress + IPAddress)
                sSQL = sSQL & " from Fixd_Payment_DAta as FP inner join Fixd_Balance as Fb on "
                sSQL = sSQL & " Fp.Company_Id=Fb.Company_Id And FP.Fixd_no=FB.Doc_no and Fp.Year_Id=Fb.Year_id"
                sSQL = sSQL & " left outer join Column_Master as CM On  "
                sSQL = sSQL & " Fb.COlumn_Id=CM.Column_Id and Fb.COmpany_id=Cm.COmpany_id"
                sSQL = sSQL & " where FP.Company_Id=" & clsVariables.CompnyId
                sSQL = sSQL & " and FP.Year_Id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and FP.Doc_DAte<=" & aq(asondate)
                sSQL = sSQL & " and Cm.Account_id in (" & conds & ")"
                sSQL = sSQL & " Group by Cm.Account_id"
                ob.Execute(sSQL, ob.getconnection)
                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",fp.Interest_Account_ID,Sum(Fp.Interest_Amt),0," & aq(IPAddress + IPAddress)
                sSQL = sSQL & " from Fixd_Payment_DAta as FP inner join Fixd_Balance as Fb on "
                sSQL = sSQL & " Fp.Company_Id=Fb.Company_Id And FP.Fixd_no=FB.Doc_no and Fp.Year_Id=Fb.Year_id"
                sSQL = sSQL & " left outer join Column_Master as CM On  "
                sSQL = sSQL & " Fb.COlumn_Id=CM.Column_Id and Fb.COmpany_id=Cm.COmpany_id"
                sSQL = sSQL & " where FP.Company_Id=" & clsVariables.CompnyId
                sSQL = sSQL & " and FP.Year_Id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and FP.Doc_DAte<=" & aq(asondate)
                sSQL = sSQL & " and fp.Interest_Account_ID in (" & conds & ")"
                sSQL = sSQL & " Group by Fp.Interest_Account_ID"
                ob.Execute(sSQL, ob.getconnection)

                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",fp.Reserve_Interest_Account_ID,Sum(Fp.Interest_Reserve),0," & aq(IPAddress + IPAddress)
                sSQL = sSQL & " from Fixd_Payment_DAta as FP inner join Fixd_Balance as Fb on "
                sSQL = sSQL & " Fp.Company_Id=Fb.Company_Id And FP.Fixd_no=FB.Doc_no and Fp.Year_Id=Fb.Year_id"
                sSQL = sSQL & " left outer join Column_Master as CM On  "
                sSQL = sSQL & " Fb.COlumn_Id=CM.Column_Id and Fb.COmpany_id=Cm.COmpany_id"
                sSQL = sSQL & " where FP.Company_Id=" & clsVariables.CompnyId
                sSQL = sSQL & " and FP.Year_Id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and FP.Doc_DAte<=" & aq(asondate)
                sSQL = sSQL & " and fp.Reserve_Interest_Account_ID in (" & conds & ")"
                sSQL = sSQL & " Group by Fp.Reserve_Interest_Account_ID"
                ob.Execute(sSQL, ob.getconnection)

                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",FP.Credit_Account_id,0,isnull(Sum(Fp.Fixd_Amt),0)+isnull(sum(fp.Interest_Amt),0)+isnull(sum(Fp.Interest_Reserve),0)," & aq(IPAddress + IPAddress)
                sSQL = sSQL & " from Fixd_Payment_DAta as FP inner join Fixd_Balance as Fb on "
                sSQL = sSQL & " Fp.Company_Id=Fb.Company_Id And FP.Fixd_no=FB.Doc_no and Fp.Year_Id=Fb.Year_id"
                sSQL = sSQL & " left outer join Column_Master as CM On  "
                sSQL = sSQL & " Fb.COlumn_Id=CM.Column_Id and Fb.COmpany_id=Cm.COmpany_id"
                sSQL = sSQL & " where FP.Company_Id=" & clsVariables.CompnyId
                sSQL = sSQL & " and FP.Year_Id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and FP.Doc_DAte<=" & aq(asondate)
                sSQL = sSQL & " and Fp.Credit_Account_id in (" & conds & ")"
                sSQL = sSQL & " Group by Fp.Credit_Account_id"
                ob.Execute(sSQL, ob.getconnection)

                'fixd Reserve payment
                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",fp.Reserve_Interest_Account_Id,Sum(Fp.Interest_Amt),0," & aq(IPAddress + IPAddress)
                sSQL = sSQL & " from FIXD_RESERVE_INTEREST_DATA as FP inner join Fixd_Balance as Fb on "
                sSQL = sSQL & " Fp.Company_Id=Fb.Company_Id And FP.Fixd_no=FB.Doc_no and Fp.Year_Id=Fb.Year_id"
                sSQL = sSQL & " left outer join Column_Master as CM On  "
                sSQL = sSQL & " Fb.COlumn_Id=CM.Column_Id and Fb.COmpany_id=Cm.COmpany_id"
                sSQL = sSQL & " where FP.Company_Id=" & clsVariables.CompnyId
                sSQL = sSQL & " and FP.Year_Id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and FP.Doc_DAte<=" & aq(asondate)
                sSQL = sSQL & " and fp.Reserve_Interest_Account_Id in (" & conds & ")"
                sSQL = sSQL & " Group by Fp.Reserve_Interest_Account_Id"
                ob.Execute(sSQL, ob.getconnection)

                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",fp.Credit_Account_id,0,Sum(Fp.Interest_Amt)," & aq(IPAddress + IPAddress)
                sSQL = sSQL & " from FIXD_RESERVE_INTEREST_DATA as FP inner join Fixd_Balance as Fb on "
                sSQL = sSQL & " Fp.Company_Id=Fb.Company_Id And FP.Fixd_no=FB.Doc_no and Fp.Year_Id=Fb.Year_id"
                sSQL = sSQL & " left outer join Column_Master as CM On  "
                sSQL = sSQL & " Fb.COlumn_Id=CM.Column_Id and Fb.COmpany_id=Cm.COmpany_id"
                sSQL = sSQL & " where FP.Company_Id=" & clsVariables.CompnyId
                sSQL = sSQL & " and FP.Year_Id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and FP.Doc_DAte<=" & aq(asondate)
                sSQL = sSQL & " and fp.Credit_Account_id in (" & conds & ")"
                sSQL = sSQL & " Group by Fp.Credit_Account_id"
                ob.Execute(sSQL, ob.getconnection)
            End If
            

            If checkstock = False Then
                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",CSD.Account_id ,Sum(CSD.Payment_Amt),sum(CSD.Receipt_Amt)," & aq(IPAddress + IPAddress) & "  from " & gClosing_Stock_Main & " as CSM Inner Join " & gClosing_Stock_Detail & " as CSD On "
                sSQL = sSQL & " CSM.Company_Id=CSD.Company_Id And CSm.Doc_no=CSd.Doc_no And CSm.YEar_Id=CSd.YEar_Id And CSm.Doc_Type=CSd.Doc_Type"
                sSQL = sSQL & " where CSM.Company_id=" & clsVariables.CompnyId
                sSQL = sSQL & " and CSM.Year_id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and CSm.Doc_Date=" & aq(asondate)
                sSQL = sSQL & " and CSD.account_id in (" & conds & ")"
                sSQL = sSQL & " Group by CSd.Account_Id"
                ob.Execute(sSQL, ob.getconnection)
            End If

            If SHARESYSTEM = True Then
                If clsVariables.WorkingYear >= "2015-2016" Then
                    sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                    sSQL = sSQL & "sELECT " & clsVariables.CompnyId & ",rM.dEBIT_Account_Id,Doc_Amt,0," & aq(IPAddress + clsVariables.UserName)
                    sSQL = sSQL & " FROM Dividend_Payment_main  as Rm "
                    sSQL = sSQL & " where Rm.Company_id=" & clsVariables.CompnyId
                    sSQL = sSQL & " and Rm.Year_id=" & aq(clsVariables.WorkingYear)
                    sSQL = sSQL & " and RM.Doc_DAte<=" & aq(asondate)
                    sSQL = sSQL & " and Rm.Debit_Account_Id in (" & conds & ")"
                    ob.Execute(sSQL, ob.getconnection())

                    sSQL = "INSERT INTO Joint_Trial_Balance (Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                    sSQL = sSQL & "sELECT " & clsVariables.CompnyId & ",rM.Credit_Account_Id,0,Doc_Amt," & aq(IPAddress + clsVariables.UserName)
                    sSQL = sSQL & " FROM Dividend_Payment_main Rm "
                    sSQL = sSQL & " where Rm.Company_id=" & clsVariables.CompnyId
                    sSQL = sSQL & " and Rm.Year_id=" & aq(clsVariables.WorkingYear)
                    sSQL = sSQL & " and Rm.Doc_DAte<=" & aq(asondate)
                    sSQL = sSQL & " and Rm.Credit_Account_Id in (" & conds & ")"
                    ob.Execute(sSQL, ob.getconnection())
                    'CHANGE 30/01/2015 Pramod
                    sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                    sSQL = sSQL & "sELECT " & clsVariables.CompnyId & ",rM.dEBIT_Account_Id,Amount,0," & aq(IPAddress + clsVariables.UserName)
                    sSQL = sSQL & " FROM Receipt_main as Rm inner join Receipt_Detail as Rd On "
                    sSQL = sSQL & " Rm.Company_id=rd.Company_Id and Rm.Doc_no=Rd.Doc_no and Rm.year_id=rd.Year_Id"
                    sSQL = sSQL & " where Rm.Company_id=" & clsVariables.CompnyId
                    sSQL = sSQL & " and Rm.Year_id=" & aq(clsVariables.WorkingYear)
                    sSQL = sSQL & " and RM.Doc_DAte<=" & aq(asondate)
                    sSQL = sSQL & " and Rm.Debit_Account_Id in (" & conds & ")"
                    ob.Execute(sSQL, ob.getconnection)

                    sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                    sSQL = sSQL & "sELECT " & clsVariables.CompnyId & ",rM.Credit_Account_Id,0,Amount," & aq(IPAddress + clsVariables.UserName)
                    sSQL = sSQL & " FROM Receipt_main as Rm inner join Receipt_Detail as Rd On "
                    sSQL = sSQL & " Rm.Company_id=rd.Company_Id and Rm.Doc_no=Rd.Doc_no and Rm.year_id=rd.Year_Id"
                    sSQL = sSQL & " where Rm.Company_id=" & clsVariables.CompnyId
                    sSQL = sSQL & " and Rm.Year_id=" & aq(clsVariables.WorkingYear)
                    sSQL = sSQL & " and Rm.Doc_DAte<=" & aq(asondate)
                    sSQL = sSQL & " and Rm.Credit_Account_Id in (" & conds & ")"
                    ob.Execute(sSQL, ob.getconnection)

                    sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                    sSQL = sSQL & "sELECT " & clsVariables.CompnyId & ",ID.Debit_Account_Id,ID.Share_Amt,0," & aq(IPAddress + clsVariables.UserName)
                    sSQL = sSQL & " FROM Inward_Data as ID"
                    sSQL = sSQL & " where ID.Company_id=" & clsVariables.CompnyId
                    sSQL = sSQL & " and ID.Year_id=" & aq(clsVariables.WorkingYear)
                    sSQL = sSQL & " and ID.Doc_DAte<=" & aq(asondate)
                    sSQL = sSQL & " and ID.Debit_Account_Id in (" & conds & ")"
                    sSQL = sSQL & " and Share_Amt<>0"
                    ob.Execute(sSQL, ob.getconnection)
                    sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                    sSQL = sSQL & "sELECT " & clsVariables.CompnyId & ",ID.Debit_Account_Id,ID.Admission_Fee,0," & aq(IPAddress + clsVariables.UserName)
                    sSQL = sSQL & " FROM Inward_Data as ID"
                    sSQL = sSQL & " where ID.Company_id=" & clsVariables.CompnyId
                    sSQL = sSQL & " and ID.Year_id=" & aq(clsVariables.WorkingYear)
                    sSQL = sSQL & " and ID.Doc_DAte<=" & aq(asondate)
                    sSQL = sSQL & " and ID.Debit_Account_Id in (" & conds & ")"
                    sSQL = sSQL & " and Admission_Fee<>0"
                    ob.Execute(sSQL, ob.getconnection)

                    sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                    sSQL = sSQL & "sELECT " & clsVariables.CompnyId & ",ID.Share_Account_Id,0,ID.Share_Amt," & aq(IPAddress + clsVariables.UserName)
                    sSQL = sSQL & " FROM Inward_Data as ID"
                    sSQL = sSQL & " where ID.Company_id=" & clsVariables.CompnyId
                    sSQL = sSQL & " and ID.Year_id=" & aq(clsVariables.WorkingYear)
                    sSQL = sSQL & " and ID.Doc_DAte<=" & aq(asondate)
                    sSQL = sSQL & " and ID.Share_Account_Id in (" & conds & ")"
                    sSQL = sSQL & " and Share_Amt<>0"
                    ob.Execute(sSQL, ob.getconnection)

                    sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                    sSQL = sSQL & "sELECT " & clsVariables.CompnyId & ",ID.Admission_Fee_Account_Id,0,ID.Admission_Fee," & aq(IPAddress + clsVariables.UserName)
                    sSQL = sSQL & " FROM Inward_Data as ID"
                    sSQL = sSQL & " where ID.Company_id=" & clsVariables.CompnyId
                    sSQL = sSQL & " and ID.Year_id=" & aq(clsVariables.WorkingYear)
                    sSQL = sSQL & " and ID.Doc_DAte<=" & aq(asondate)
                    sSQL = sSQL & " and ID.Admission_Fee_Account_Id in (" & conds & ")"
                    sSQL = sSQL & " and Admission_Fee<>0"
                    ob.Execute(sSQL, ob.getconnection)
                End If
            End If


            sSQL = "Delete from Joint_Trial_Balance where Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Ip_Address=" & aq(IPAddress)
            ob.Execute(sSQL, ob.getconnection)
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & " select " & clsVariables.CompnyId & ",Account_id,Sum(Ho_Dr)-sum(HO_Cr),0 ," & aq(IPAddress)
            sSQL = sSQL & " From Joint_Trial_Balance "
            sSQL = sSQL & " where Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & "  And ip_Address=" & aq(IPAddress + IPAddress)
            sSQL = sSQL & " group by Account_Id"
            sSQL = sSQL & " having (Sum(Ho_Dr)-sum(HO_Cr))>0"
            ob.Execute(sSQL, ob.getconnection)
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & " select " & clsVariables.CompnyId & ",Account_id,0,abs(Sum(Ho_Dr)-sum(HO_Cr))," & aq(IPAddress)
            sSQL = sSQL & " From Joint_Trial_Balance "
            sSQL = sSQL & " where Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & "  And ip_Address=" & aq(IPAddress + IPAddress)
            sSQL = sSQL & " group by Account_Id"
            sSQL = sSQL & " having (Sum(Ho_Dr)-sum(HO_Cr))<0"
            ob.Execute(sSQL, ob.getconnection)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Sub PrepareTrialBalanceWithVatAccount(ByVal asondate As Date, Optional ByVal checkstock As Boolean = False)
        Try
            Dim sSQL As String
            Dim rst As New DataTable
            Dim conds As String = ""


            Dim dOpening As Double
            sSQL = "DELETE FROM Joint_Trial_Balance where Company_id=" & clsVariables.CompnyId
            sSQL = sSQL & " and ip_Address=" & aq(IPAddress + clsVariables.UserName)
            ob.Execute(sSQL, ob.getconnection(ob.Getconn))
            '********** HO Trial Balance Data
            dOpening = 0
            'If MdiMain.ComboDept.SelectedValue = 1 Then
            '    conds = "Select Account_Id From Account_master where Company_id=" & clsVariables.CompnyId & " and Department_id in (1,7,8,10,11,12)"
            'Else
            '    conds = "Select Account_Id From Account_master where Company_id=" & clsVariables.CompnyId & " and Department_id=" & Val(MdiMain.ComboDept.SelectedValue) & ""
            'End If


            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Account_Id,Dr_Opening,Cr_opening," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM Final_Account_Opening_Balance  where Company_id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and Account_Id in (" & conds & ")"
            sSQL = sSQL & "  ORDER BY  account_id"
            ob.Execute(sSQL, ob.getconnection)

            ''''' UpTo Current Date
            '    'Cash Data Posting
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Account_Id,sum(Payment_Amt),sum(Receipt_Amt)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM Final_Rojmal_Data  "
            sSQL = sSQL & " WHERE company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and account_id <> 0 and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Account_Id in (" & conds & ")"
            sSQL = sSQL & " group by Account_id ORDER BY Account_id"
            ob.Execute(sSQL, ob.getconnection)


            'Cash Book Data Posting
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",bm.Account_id,sum(Receipt_Amt),sum(Payment_Amt)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM Final_Rojmal_Data as rj,Book_Master  as bm,Voucher_Master as Vm "
            sSQL = sSQL & " WHERE rj.company_id=bm.company_id and rj.book_id=bm.book_id and rj.Company_Id=vm.Company_Id and  rj.Doc_type=vm.Doc_type "
            sSQL = sSQL & " and rj.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and rj.year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and bm.Account_Id in (" & conds & ")"
            sSQL = sSQL & "   group by bm.Account_id ORDER BY bm.Account_id"
            ob.Execute(sSQL, ob.getconnection)



            'Bank Account Data Posting
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Account_id,sum(Payment_Amt),sum(Receipt_Amt)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM Bank_Main  as bm, Bank_Detail  as bd"
            sSQL = sSQL & " WHERE bm.Company_id = bd.Company_id and bm.Doc_Type = bd.Doc_Type and bm.Doc_No=bd.Doc_no and bm.Year_Id=bd.Year_id"
            sSQL = sSQL & "  and  bm.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & "  and  bm.Year_id = " & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and account_id <> 0 and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Account_Id in (" & conds & ")"
            sSQL = sSQL & "  group by Account_id ORDER BY Account_id"
            ob.Execute(sSQL, ob.getconnection())



            'Bank Book Data Posting
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",bkm.Account_id,sum(Receipt_Amt),sum(Payment_Amt)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM Bank_Main  as bm,Bank_Detail  as bd,Book_Master  as bkm "
            sSQL = sSQL & " WHERE bm.Company_id = bd.Company_id and bm.Doc_Type = bd.Doc_Type and bm.Doc_No=bd.Doc_no and bm.Year_id=bd.Year_id and bm.company_id=bkm.company_id and bm.book_id=bkm.book_id"
            sSQL = sSQL & "  and bm.Year_id = " & aq(clsVariables.WorkingYear)
            sSQL = sSQL & "  and bm.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and bkm.Account_Id in (" & conds & ")"
            sSQL = sSQL & "  group by bkm.Account_id ORDER BY bkm.Account_id"
            ob.Execute(sSQL, ob.getconnection)



            'Journal Data Posting
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Account_id,sum(Payment_Amt),sum(Receipt_Amt)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM Final_Journal_Main   as bm, Final_Journal_Detail  as bd "
            sSQL = sSQL & " WHERE bm.Company_id = bd.Company_id and bm.Doc_Type = bd.Doc_Type and bm.Doc_No=bd.Doc_no and bm.Year_Id=bd.Year_id "
            sSQL = sSQL & " and  bm.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and  bm.Year_id = " & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and account_id <> 0 and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Account_Id in (" & conds & ")"
            sSQL = sSQL & "  group by Account_id ORDER BY Account_id"
            ob.Execute(sSQL, ob.getconnection())

            'Kvn For Supplier Account
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",KM.Account_id,0,sum(Net_Amt)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM KVN_Main as Km Inner Join Voucher_Master as Vm  "
            sSQL = sSQL & " On KM.Company_Id=Vm.Company_ID and KM.Doc_type=Vm.Doc_type "
            sSQL = sSQL & " WHERE KM.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and km.Account_id <> 0 and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and KM.Account_id in (" & conds & ")"
            sSQL = sSQL & "   group by KM.Account_id ORDER BY KM.Account_id"
            ob.Execute(sSQL, ob.getconnection)

            'Purchase Return
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",KM.Account_id,sum(Net_Amt),0," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM Purchase_Return_Main as Km Inner Join Voucher_Master as Vm  "
            sSQL = sSQL & " On KM.Company_Id=Vm.Company_ID and KM.Doc_type=Vm.Doc_type "
            sSQL = sSQL & " WHERE KM.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and km.Account_id <> 0 and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and KM.Account_id in (" & conds & ")"
            sSQL = sSQL & "   group by KM.Account_id ORDER BY KM.Account_id"
            ob.Execute(sSQL, ob.getconnection)

            'Purchase Acc Without Kathar Dept 
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Qm.Pur_Account_id ,SUM(isnull(KID.NET_amt,0) - isnull(KID.Add_VAT_Amt,0) - isnull(KID.Vat_amt,0) - ((CASE WHEN Vadtar_Main <> 0 THEN Amount * Vadtar_Main / Doc_Amt ELSE 0 END))),0," & aq(IPAddress + clsVariables.UserName)
            'sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Qm.Pur_Account_id ,SUM(KID.NET_amt - KID.Add_VAT_Amt - KID.Vat_amt - ROUND((CASE WHEN Vadtar_Main <> 0 THEN Amount * Vadtar_Main / Doc_Amt ELSE 0 END), 2)),0," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from KVN_MAIN AS KM INNER JOIN"
            sSQL = sSQL & " KVN_ITEM_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
            sSQL = sSQL & " KM.Doc_No = KID.Doc_No INNER JOIN"
            sSQL = sSQL & " ITEM_MASTER AS Im ON KID.Item_id = Im.Item_Id AND KID.Company_Id = Im.Company_Id Left Outer JOIN"
            sSQL = sSQL & " QUALITY_MASTER AS Qm ON Im.Company_Id = Qm.Company_Id AND Im.Quality_id = Qm.Quality_Id"
            sSQL = sSQL & " Left Outer Join Voucher_Master as  Vm On km.Company_Id=vm.Company_id and Km.doc_type = vm.Doc_type"
            sSQL = sSQL & " where KM.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Qm.Pur_Account_id<>0"
            sSQL = sSQL & " and Qm.Pur_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Vm.Department_ID <> 8"
            sSQL = sSQL & " GROUP BY Qm.Pur_Account_id"
            sSQL = sSQL & " having isnull(SUM(KID.NET_amt - KID.Add_VAT_Amt - KID.Vat_amt - ((CASE WHEN Vadtar_Main <> 0 THEN Amount * Vadtar_Main / Doc_Amt ELSE 0 END))),0)<>0"
            sSQL = sSQL & " Order BY Qm.Pur_Account_id"
            ob.Execute(sSQL, ob.getconnection)

            'Purchase Return
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Qm.Pur_Rtn_Account_id ,0,SUM(isnull(KID.NET_amt,0) - isnull(KID.Add_VAT_Amt,0) - isnull(KID.Vat_amt,0) - ((CASE WHEN Vadtar_Main <> 0 THEN Amount * Vadtar_Main / Doc_Amt ELSE 0 END)))," & aq(IPAddress + clsVariables.UserName)
            'sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Qm.Pur_Account_id ,SUM(KID.NET_amt - KID.Add_VAT_Amt - KID.Vat_amt - ROUND((CASE WHEN Vadtar_Main <> 0 THEN Amount * Vadtar_Main / Doc_Amt ELSE 0 END), 2)),0," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from Purchase_Return_MAIN AS KM INNER JOIN"
            sSQL = sSQL & " KVN_ITEM_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
            sSQL = sSQL & " KM.Doc_No = KID.Doc_No INNER JOIN"
            sSQL = sSQL & " ITEM_MASTER AS Im ON KID.Item_id = Im.Item_Id AND KID.Company_Id = Im.Company_Id Left Outer JOIN"
            sSQL = sSQL & " QUALITY_MASTER AS Qm ON Im.Company_Id = Qm.Company_Id AND Im.Quality_id = Qm.Quality_Id"
            sSQL = sSQL & " Left Outer Join Voucher_Master as  Vm On km.Company_Id=vm.Company_id and Km.doc_type = vm.Doc_type"
            sSQL = sSQL & " where KM.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Qm.Pur_Rtn_Account_id<>0"
            sSQL = sSQL & " and Qm.Pur_Rtn_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Vm.Department_ID <> 8"
            sSQL = sSQL & " GROUP BY Qm.Pur_Rtn_Account_id"
            sSQL = sSQL & " having isnull(SUM(KID.NET_amt - KID.Add_VAT_Amt - KID.Vat_amt - ((CASE WHEN Vadtar_Main <> 0 THEN Amount * Vadtar_Main / Doc_Amt ELSE 0 END))),0)<>0"
            sSQL = sSQL & " Order BY Qm.Pur_Rtn_Account_id"
            ob.Execute(sSQL, ob.getconnection)

            'Purchase Acc For khatar Dept
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Qm.Pur_Account_id,sum(isnull(kd.Net_amt,0) - isnull(KD.Add_VAT_Amt,0) - isnull(KD.Vat_amt,0))-SUM(((CASE WHEN Freight_Main <> 0 THEN Amount * Freight_Main / Doc_Amt ELSE 0 END)))-sum(((CASE WHEN Vadtar_Main <> 0 THEN Amount * Vadtar_Main / Doc_Amt ELSE 0 END))),0," & aq(IPAddress + clsVariables.UserName)
            'sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Qm.Pur_Account_id,sum(kd.Net_amt)-sum(Kd.Vat_amt)-sum(Kd.Add_Vat_amt)-SUM(ROUND((CASE WHEN Freight_Main <> 0 THEN Amount * Freight_Main / Doc_Amt ELSE 0 END), 2))-sum(ROUND((CASE WHEN Vadtar_Main <> 0 THEN Amount * Vadtar_Main / Doc_Amt ELSE 0 END), 2)),0," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM KVN_MAIN AS Km INNER JOIN"
            sSQL = sSQL & " KVN_ITEM_DETAIL AS KD ON Km.Company_Id = KD.Company_Id  AND KM.Year_id = KD.Year_id  AND Km.Doc_Type = KD.Doc_Type AND Km.Doc_No = KD.Doc_No LEFT OUTER JOIN"
            sSQL = sSQL & " ITEM_MASTER AS IM ON KD.Company_Id = IM.Company_Id AND KD.Item_id = IM.Item_Id LEFT OUTER JOIN"
            sSQL = sSQL & " QUALITY_MASTER AS Qm ON IM.Company_Id = Qm.Company_Id AND IM.Quality_id = Qm.Quality_Id Left Outer join"
            sSQL = sSQL & " Voucher_Master as VM On km.company_Id=Vm.Company_Id and Km.doc_type=Vm.doc_type"
            sSQL = sSQL & " WHERE "
            sSQL = sSQL & "  Km.Company_Id=" & clsVariables.CompnyId & ""
            sSQL = sSQL & " and Km.Year_Id=" & aq(clsVariables.WorkingYear) & ""
            sSQL = sSQL & " and Vm.Department_Id=8"
            sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Qm.Pur_Account_id<>0"
            sSQL = sSQL & " and Qm.Pur_Account_id in (" & conds & ")"
            sSQL = sSQL & " GROUP BY Qm.Pur_Account_id"
            sSQL = sSQL & " having sum(isnull(kd.Net_amt,0) - isnull(KD.Add_VAT_Amt,0) - isnull(KD.Vat_amt,0))-SUM(((CASE WHEN Freight_Main <> 0 THEN Amount * Freight_Main / Doc_Amt ELSE 0 END)))-sum(((CASE WHEN Vadtar_Main <> 0 THEN Amount * Vadtar_Main / Doc_Amt ELSE 0 END))) <> 0"
            ob.Execute(sSQL, ob.getconnection)

            'Purchase Return
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Qm.Pur_Rtn_Account_id,0,sum(isnull(kd.Net_amt,0) - isnull(KD.Add_VAT_Amt,0) - isnull(KD.Vat_amt,0))-SUM(((CASE WHEN Freight_Main <> 0 THEN Amount * Freight_Main / Doc_Amt ELSE 0 END)))-sum(((CASE WHEN Vadtar_Main <> 0 THEN Amount * Vadtar_Main / Doc_Amt ELSE 0 END)))," & aq(IPAddress + clsVariables.UserName)
            'sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Qm.Pur_Account_id,sum(kd.Net_amt)-sum(Kd.Vat_amt)-sum(Kd.Add_Vat_amt)-SUM(ROUND((CASE WHEN Freight_Main <> 0 THEN Amount * Freight_Main / Doc_Amt ELSE 0 END), 2))-sum(ROUND((CASE WHEN Vadtar_Main <> 0 THEN Amount * Vadtar_Main / Doc_Amt ELSE 0 END), 2)),0," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM Purchase_Return_MAIN AS Km INNER JOIN"
            sSQL = sSQL & " KVN_ITEM_DETAIL AS KD ON Km.Company_Id = KD.Company_Id  AND KM.Year_id = KD.Year_id  AND Km.Doc_Type = KD.Doc_Type AND Km.Doc_No = KD.Doc_No LEFT OUTER JOIN"
            sSQL = sSQL & " ITEM_MASTER AS IM ON KD.Company_Id = IM.Company_Id AND KD.Item_id = IM.Item_Id LEFT OUTER JOIN"
            sSQL = sSQL & " QUALITY_MASTER AS Qm ON IM.Company_Id = Qm.Company_Id AND IM.Quality_id = Qm.Quality_Id Left Outer join"
            sSQL = sSQL & " Voucher_Master as VM On km.company_Id=Vm.Company_Id and Km.doc_type=Vm.doc_type"
            sSQL = sSQL & " WHERE "
            sSQL = sSQL & "  Km.Company_Id=" & clsVariables.CompnyId & ""
            sSQL = sSQL & " and Km.Year_Id=" & aq(clsVariables.WorkingYear) & ""
            sSQL = sSQL & " and Vm.Department_Id=8"
            sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Qm.Pur_Rtn_Account_id<>0"
            sSQL = sSQL & " and Qm.Pur_Rtn_Account_id in (" & conds & ")"
            sSQL = sSQL & " GROUP BY Qm.Pur_Rtn_Account_id"
            sSQL = sSQL & " having sum(isnull(kd.Net_amt,0) - isnull(KD.Add_VAT_Amt,0) - isnull(KD.Vat_amt,0))-SUM(((CASE WHEN Freight_Main <> 0 THEN Amount * Freight_Main / Doc_Amt ELSE 0 END)))-sum(((CASE WHEN Vadtar_Main <> 0 THEN Amount * Vadtar_Main / Doc_Amt ELSE 0 END))) <> 0"
            ob.Execute(sSQL, ob.getconnection)


            ''Purchase Vat Account
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Dm.Vat_Account_id,SUM(KID.Vat_amt),0," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from KVN_MAIN AS KM INNER JOIN"
            sSQL = sSQL & " KVN_ITEM_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
            sSQL = sSQL & " KM.Doc_No = KID.Doc_No "
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & " where KM.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.vat_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Vat_Account_id <>0"
            sSQL = sSQL & " Group by Dm.vat_Account_id"
            sSQL = sSQL & " having isnull(sum(kid.Vat_Amt),0)<>0"
            ob.Execute(sSQL, ob.getconnection())

            'Purchase Return
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Dm.Vat_Account_id,0,SUM(KID.Vat_amt)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from Purchase_Return_MAIN AS KM INNER JOIN"
            sSQL = sSQL & " KVN_ITEM_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
            sSQL = sSQL & " KM.Doc_No = KID.Doc_No "
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & " where KM.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.vat_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Vat_Account_id <>0"
            sSQL = sSQL & " Group by Dm.vat_Account_id"
            sSQL = sSQL & " having isnull(sum(kid.Vat_Amt),0)<>0"
            ob.Execute(sSQL, ob.getconnection())

            ''Purchase Add Vat Account
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Dm.Add_Vat_Account_id,SUM(KID.Add_Vat_amt),0," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from KVN_MAIN AS KM INNER JOIN"
            sSQL = sSQL & " KVN_ITEM_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
            sSQL = sSQL & " KM.Doc_No = KID.Doc_No "
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & " where KM.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.Add_vat_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Add_vat_Account_id <>0"
            sSQL = sSQL & " Group by Dm.Add_vat_Account_Id"
            sSQL = sSQL & " having isnull(sum(KID.Add_vat_Amt),0)<>0"
            ob.Execute(sSQL, ob.getconnection)

            'Purchase Return
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Dm.Add_Vat_Account_id,0,SUM(KID.Add_Vat_amt)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from Purchase_Return_MAIN AS KM INNER JOIN"
            sSQL = sSQL & " KVN_ITEM_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
            sSQL = sSQL & " KM.Doc_No = KID.Doc_No "
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & " where KM.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.Add_vat_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Add_vat_Account_id <>0"
            sSQL = sSQL & " Group by Dm.Add_vat_Account_Id"
            sSQL = sSQL & " having isnull(sum(KID.Add_vat_Amt),0)<>0"
            ob.Execute(sSQL, ob.getconnection)

            'Purchase Add Account
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Dm.Oth_Account_id,Sum(km.Add_Amt),0," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from KVN_main as km"
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & " where km.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and km.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.Oth_Account_id in (" & conds & ")"
            sSQL = sSQL & " and  Dm.Oth_Account_id<> 0"
            'sSQL = sSQL & " and Vm.Department_Id<>8"
            sSQL = sSQL & " Group by Dm.Oth_Account_id"
            sSQL = sSQL & " having isnull(sum(km.Add_Amt),0)<>0"
            ob.Execute(sSQL, ob.getconnection())

            'Purchase Return
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Dm.Oth_Account_id,0,Sum(km.Add_Amt)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from Purchase_Return_main as km"
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & " where km.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and km.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.Oth_Account_id in (" & conds & ")"
            sSQL = sSQL & " and  Dm.Oth_Account_id<> 0"
            'sSQL = sSQL & " and Vm.Department_Id<>8"
            sSQL = sSQL & " Group by Dm.Oth_Account_id"
            sSQL = sSQL & " having isnull(sum(km.Add_Amt),0)<>0"
            ob.Execute(sSQL, ob.getconnection())

            'purchase Less Amount
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Dm.Oth_Account_id,0,Sum(km.Less_Amt)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from KVN_main as km"
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & " where km.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and km.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.Oth_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Dm.Oth_Account_id<>0"
            'sSQL = sSQL & " and Vm.Department_Id<>8"
            sSQL = sSQL & " Group by Dm.Oth_Account_id"
            sSQL = sSQL & " having isnull(sum(km.Less_Amt),0)<>0"
            ob.Execute(sSQL, ob.getconnection)

            'Purchase Return
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Dm.Oth_Account_id,Sum(km.Less_Amt),0," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from Purchase_Return_main as km"
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & " where km.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and km.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.Oth_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Dm.Oth_Account_id<>0"
            'sSQL = sSQL & " and Vm.Department_Id<>8"
            sSQL = sSQL & " Group by Dm.Oth_Account_id"
            sSQL = sSQL & " having isnull(sum(km.Less_Amt),0)<>0"
            ob.Execute(sSQL, ob.getconnection)


            'Pruchase Freight Account WithOut Khatar 
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ", Dm.Freight_Account_id,Sum(km.Freight_main),0," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from KVN_main as km"
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & " where km.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and km.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.Freight_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Dm.Freight_Account_id<>0"
            sSQL = sSQL & " and vm.Department_Id<> 8"
            sSQL = sSQL & " Group by Dm.Freight_Account_id "
            sSQL = sSQL & " having isnull(sum(km.Freight_main),0)<>0"
            ob.Execute(sSQL, ob.getconnection())

            'Purchase Return
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ", Dm.Freight_Account_id,0,Sum(km.Freight_main)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from Purchase_Return_main as km"
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & " where km.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and km.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.Freight_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Dm.Freight_Account_id<>0"
            sSQL = sSQL & " and vm.Department_Id<> 8"
            sSQL = sSQL & " Group by Dm.Freight_Account_id "
            sSQL = sSQL & " having isnull(sum(km.Freight_main),0)<>0"
            ob.Execute(sSQL, ob.getconnection())

            'Rent Sales Data Customer Account
            'Sales Customer Account 
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ", sm.Account_id,sum(Net_Amt),0," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM Rent_Sales_Data Sm Inner Join Voucher_MAster as Vm "
            sSQL = sSQL & " On sm.Company_Id=vm.company_ID and sm.Doc_type=vm.Doc_type "
            sSQL = sSQL & "  WHERE sM.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and Sm.account_id <> 0 and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and sm.Account_id in (" & conds & ")"
            sSQL = sSQL & " group by Sm.Account_id "
            sSQL = sSQL & " having sum(Net_Amt)<>0 "
            sSQL = sSQL & " ORDER BY Sm.Account_id "
            ob.Execute(sSQL, ob.getconnection)
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ", sm.TDS_Ac_id,sum(TDS_Amt),0," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM Rent_Sales_Data Sm Inner Join Voucher_MAster as Vm "
            sSQL = sSQL & " On sm.Company_Id=vm.company_ID and sm.Doc_type=vm.Doc_type "
            sSQL = sSQL & "  WHERE sM.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and Sm.TDS_Ac_id <> 0 and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and sm.TDS_Ac_id in (" & conds & ")"
            sSQL = sSQL & " group by Sm.TDS_Ac_id "
            sSQL = sSQL & " having sum(TDS_Amt)<>0 "
            sSQL = sSQL & " ORDER BY Sm.TDS_Ac_id "
            ob.Execute(sSQL, ob.getconnection)
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ", sm.Rent_Ac_Id,0,sum(Amount)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM Rent_Sales_Data Sm Inner Join Voucher_MAster as Vm "
            sSQL = sSQL & " On sm.Company_Id=vm.company_ID and sm.Doc_type=vm.Doc_type "
            sSQL = sSQL & "  WHERE sM.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and Sm.Rent_Ac_Id <> 0 and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and sm.Rent_Ac_Id in (" & conds & ")"
            sSQL = sSQL & " group by Sm.Rent_Ac_Id "
            sSQL = sSQL & " having sum(Amount)<>0 "
            sSQL = sSQL & " ORDER BY Sm.Rent_Ac_Id "
            ob.Execute(sSQL, ob.getconnection)
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ", sm.Ser_tax_Ac_Id,0,sum(Ser_tax_Amt)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM Rent_Sales_Data Sm Inner Join Voucher_MAster as Vm "
            sSQL = sSQL & " On sm.Company_Id=vm.company_ID and sm.Doc_type=vm.Doc_type "
            sSQL = sSQL & "  WHERE sM.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and Sm.Ser_tax_Ac_Id <> 0 and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and sm.Ser_tax_Ac_Id in (" & conds & ")"
            sSQL = sSQL & " group by Sm.Ser_tax_Ac_Id "
            sSQL = sSQL & " having sum(Ser_tax_Amt)<>0 "
            sSQL = sSQL & " ORDER BY Sm.Ser_tax_Ac_Id "
            ob.Execute(sSQL, ob.getconnection)
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ", sm.Edu_Sess_Ac_Id,0,sum(Edu_Sess_Amt)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM Rent_Sales_Data Sm Inner Join Voucher_MAster as Vm "
            sSQL = sSQL & " On sm.Company_Id=vm.company_ID and sm.Doc_type=vm.Doc_type "
            sSQL = sSQL & "  WHERE sM.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and Sm.Edu_Sess_Ac_Id <> 0 and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and sm.Edu_Sess_Ac_Id in (" & conds & ")"
            sSQL = sSQL & " group by Sm.Edu_Sess_Ac_Id "
            sSQL = sSQL & " having sum(Edu_Sess_Amt)<>0 "
            sSQL = sSQL & " ORDER BY Sm.Edu_Sess_Ac_Id "
            ob.Execute(sSQL, ob.getconnection)
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ", sm.H_Edu_Sess_Ac_Id,0,sum(h_Edu_Sess_Amt)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM Rent_Sales_Data Sm Inner Join Voucher_MAster as Vm "
            sSQL = sSQL & " On sm.Company_Id=vm.company_ID and sm.Doc_type=vm.Doc_type "
            sSQL = sSQL & "  WHERE sM.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and Sm.H_Edu_Sess_Ac_Id <> 0 and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and sm.H_Edu_Sess_Ac_Id in (" & conds & ")"
            sSQL = sSQL & " group by Sm.H_Edu_Sess_Ac_Id "
            sSQL = sSQL & " having sum(h_Edu_Sess_Amt)<>0 "
            sSQL = sSQL & " ORDER BY Sm.H_Edu_Sess_Ac_Id "
            ob.Execute(sSQL, ob.getconnection)

            'Sales Customer Account 
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ", sm.Account_id,sum(Net_Amt),0," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM Sales_Main Sm Inner Join Voucher_MAster as Vm "
            sSQL = sSQL & " On sm.Company_Id=vm.company_ID and sm.Doc_type=vm.Doc_type "
            sSQL = sSQL & "  WHERE sM.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and Sm.account_id <> 0 and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and sm.Account_id in (" & conds & ")"
            sSQL = sSQL & " and sm.Account_ID <> 0"
            sSQL = sSQL & " group by Sm.Account_id "
            sSQL = sSQL & " having sum(Net_Amt)<>0 "
            sSQL = sSQL & " ORDER BY Sm.Account_id "
            ob.Execute(sSQL, ob.getconnection)

            'Sales return
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ", sm.Account_id,0,sum(Net_Amt)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM Sales_Return_Main Sm Inner Join Voucher_MAster as Vm "
            sSQL = sSQL & " On sm.Company_Id=vm.company_ID and sm.Doc_type=vm.Doc_type "
            sSQL = sSQL & "  WHERE sM.company_id = " & clsVariables.CompnyId
            sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and Sm.account_id <> 0 and doc_date <= " & aq(asondate)
            sSQL = sSQL & " and sm.Account_id in (" & conds & ")"
            sSQL = sSQL & " and sm.Account_ID <> 0"
            sSQL = sSQL & " group by Sm.Account_id "
            sSQL = sSQL & " having sum(Net_Amt)<>0 "
            sSQL = sSQL & " ORDER BY Sm.Account_id "
            ob.Execute(sSQL, ob.getconnection)

            'Sales Quality Acc 
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ", Qm.Sal_Account_id,0,SUM(isnull(KID.NET_amt,0) - isnull(KID.Add_VAT_Amt,0) - isnull(KID.Vat_amt,0) - ((CASE WHEN Vadtar_Main <> 0 THEN KiD.Amount * KM.Vadtar_Main / KM.Doc_Amt ELSE 0 END))) ," & aq(IPAddress + clsVariables.UserName)
            'sSQL = sSQL & "Select " & clsVariables.CompnyId & ", Qm.Sal_Account_id,0,SUM(KID.NET_amt - KID.Add_VAT_Amt - KID.Vat_amt - ROUND((CASE WHEN Vadtar_Main <> 0 THEN KiD.Amount * KM.Vadtar_Main / KM.Doc_Amt ELSE 0 END), 2)) ," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from Sales_MAIN AS KM INNER JOIN"
            sSQL = sSQL & " Sales_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
            sSQL = sSQL & " KM.Doc_No = KID.Doc_No INNER JOIN "
            sSQL = sSQL & " Voucher_MAster as VM On KM.company_ID=Vm.Company_Id and Km.Doc_type= Vm.doc_type Left Outer Join"
            sSQL = sSQL & " ITEM_MASTER AS Im ON KID.Item_id = Im.Item_Id AND KID.Company_Id = Im.Company_Id Left Outer JOIN"
            sSQL = sSQL & " QUALITY_MASTER AS Qm ON Im.Company_Id = Qm.Company_Id AND Im.Quality_id = Qm.Quality_Id "
            sSQL = sSQL & " where KM.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Qm.Sal_Account_id<>0"
            sSQL = sSQL & " and Qm.Sal_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Qm.Sal_Account_id<>0"
            sSQL = sSQL & " and Vm.Department_ID<>8"
            sSQL = sSQL & " GROUP BY Qm.Sal_Account_id"
            sSQL = sSQL & " having isnull(SUM(isnull(KID.NET_amt,0) - isnull(KID.Add_VAT_Amt,0) - isnull(KID.Vat_amt,0) -  ((CASE WHEN Vadtar_Main <> 0 THEN isnull(KiD.Amount,0) * isnull(KM.Vadtar_Main,0) / KM.Doc_Amt ELSE 0 END))),0)<>0"
            'sSQL = sSQL & " having isnull(SUM(KID.NET_amt - KID.Add_VAT_Amt - KID.Vat_amt - ROUND((CASE WHEN Vadtar_Main <> 0 THEN KiD.Amount * KM.Vadtar_Main / KM.Doc_Amt ELSE 0 END), 2)),0)<>0"
            sSQL = sSQL & " Order BY Qm.Sal_Account_id"
            ob.Execute(sSQL, ob.getconnection)

            'Sales Return
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ", Qm.Sal_Rtn_Account_id,SUM(isnull(KID.NET_amt,0) - isnull(KID.Add_VAT_Amt,0) - isnull(KID.Vat_amt,0) - ((CASE WHEN Vadtar_Main <> 0 THEN KiD.Amount * KM.Vadtar_Main / KM.Doc_Amt ELSE 0 END))) ,0," & aq(IPAddress + clsVariables.UserName)
            'sSQL = sSQL & "Select " & clsVariables.CompnyId & ", Qm.Sal_Account_id,0,SUM(KID.NET_amt - KID.Add_VAT_Amt - KID.Vat_amt - ROUND((CASE WHEN Vadtar_Main <> 0 THEN KiD.Amount * KM.Vadtar_Main / KM.Doc_Amt ELSE 0 END), 2)) ," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from Sales_Return_MAIN AS KM INNER JOIN"
            sSQL = sSQL & " Sales_Return_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
            sSQL = sSQL & " KM.Doc_No = KID.Doc_No INNER JOIN "
            sSQL = sSQL & " Voucher_MAster as VM On KM.company_ID=Vm.Company_Id and Km.Doc_type= Vm.doc_type Left Outer Join"
            sSQL = sSQL & " ITEM_MASTER AS Im ON KID.Item_id = Im.Item_Id AND KID.Company_Id = Im.Company_Id Left Outer JOIN"
            sSQL = sSQL & " QUALITY_MASTER AS Qm ON Im.Company_Id = Qm.Company_Id AND Im.Quality_id = Qm.Quality_Id "
            sSQL = sSQL & " where KM.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Qm.Sal_Rtn_Account_id<>0"
            sSQL = sSQL & " and Qm.Sal_Rtn_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Qm.Sal_Rtn_Account_id<>0"
            sSQL = sSQL & " and Vm.Department_ID<>8"
            sSQL = sSQL & " GROUP BY Qm.Sal_Rtn_Account_id"
            sSQL = sSQL & " having isnull(SUM(isnull(KID.NET_amt,0) - isnull(KID.Add_VAT_Amt,0) - isnull(KID.Vat_amt,0) -  ((CASE WHEN Vadtar_Main <> 0 THEN isnull(KiD.Amount,0) * isnull(KM.Vadtar_Main,0) / KM.Doc_Amt ELSE 0 END))),0)<>0"
            'sSQL = sSQL & " having isnull(SUM(KID.NET_amt - KID.Add_VAT_Amt - KID.Vat_amt - ROUND((CASE WHEN Vadtar_Main <> 0 THEN KiD.Amount * KM.Vadtar_Main / KM.Doc_Amt ELSE 0 END), 2)),0)<>0"
            sSQL = sSQL & " Order BY Qm.Sal_Rtn_Account_id"
            ob.Execute(sSQL, ob.getconnection)

            'Sales For Khatar Dept 
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ", Qm.Sal_Account_id,0,sum(isnull(KD.NET_amt,0) - isnull(KD.Add_VAT_Amt,0) - isnull(KD.Vat_amt,0))-SUM(((CASE WHEN isnull(Freight_Main,0) <> 0 THEN isnull(KD.Amount,0) * isnull(KM.Freight_Main,0) / KM.Doc_Amt ELSE 0 END)))-SUM(((CASE WHEN isnull(Vadtar_Main,0) <> 0 THEN isnull(KD.Amount,0) * isnull(KM.Vadtar_Main,0) / KM.Doc_Amt ELSE 0 END)))," & aq(IPAddress + clsVariables.UserName)
            'sSQL = sSQL & "Select " & clsVariables.CompnyId & ", Qm.Sal_Account_id,0,sum(kd.Net_amt)-sum(Kd.Vat_amt)- sum(Kd.Add_Vat_amt)-SUM(ROUND((CASE WHEN Freight_Main <> 0 THEN KD.Amount * KM.Freight_Main / KM.Doc_Amt ELSE 0 END), 2))-SUM(ROUND((CASE WHEN Vadtar_Main <> 0 THEN KD.Amount * KM.Vadtar_Main / KM.Doc_Amt ELSE 0 END), 2))," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM            Sales_MAIN AS Km INNER JOIN"
            sSQL = sSQL & "          SALES_DETAIL AS KD ON Km.Company_Id = KD.Company_Id AND Km.Year_id = KD.Year_id AND Km.Doc_Type = KD.Doc_Type AND Km.Doc_No = KD.Doc_No LEFT OUTER JOIN"
            sSQL = sSQL & " ITEM_MASTER AS IM ON KD.Company_Id = IM.Company_Id AND KD.Item_id = IM.Item_Id LEFT OUTER JOIN"
            sSQL = sSQL & " QUALITY_MASTER AS Qm ON IM.Company_Id = Qm.Company_Id AND IM.Quality_id = Qm.Quality_Id Left Outer join"
            sSQL = sSQL & " Voucher_Master as VM On km.company_Id=Vm.Company_Id and Km.doc_type=Vm.doc_type"
            sSQL = sSQL & " WHERE "
            sSQL = sSQL & "  Km.Company_Id=" & clsVariables.CompnyId & ""
            sSQL = sSQL & " and Km.Year_Id=" & aq(clsVariables.WorkingYear) & ""
            sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Qm.Sal_Account_id<>0"
            sSQL = sSQL & " and Qm.Sal_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Qm.Sal_Account_id<>0"
            sSQL = sSQL & " and VM.Department_Id=8"
            sSQL = sSQL & " GROUP BY Qm.Sal_Account_id"
            sSQL = sSQL & " having sum(isnull(KD.NET_amt,0) - isnull(KD.Add_VAT_Amt,0) - isnull(KD.Vat_amt,0))- SUM(((CASE WHEN isnull(Freight_Main,0) <> 0 THEN isnull(KD.Amount,0) * isnull(KM.Freight_Main,0) / KM.Doc_Amt ELSE 0 END)))- SUM(((CASE WHEN isnull(Vadtar_Main,0) <> 0 THEN isnull(KD.Amount,0) * isnull(KM.Vadtar_Main,0) / KM.Doc_Amt ELSE 0 END))) <> 0"
            ob.Execute(sSQL, ob.getconnection)

            'Sales return
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & "Select " & clsVariables.CompnyId & ", Qm.Sal_Rtn_Account_id,sum(isnull(KD.NET_amt,0) - isnull(KD.Add_VAT_Amt,0) - isnull(KD.Vat_amt,0))-SUM(((CASE WHEN isnull(Freight_Main,0) <> 0 THEN isnull(KD.Amount,0) * isnull(KM.Freight_Main,0) / KM.Doc_Amt ELSE 0 END)))-SUM(((CASE WHEN isnull(Vadtar_Main,0) <> 0 THEN isnull(KD.Amount,0) * isnull(KM.Vadtar_Main,0) / KM.Doc_Amt ELSE 0 END))),0," & aq(IPAddress + clsVariables.UserName)
            'sSQL = sSQL & "Select " & clsVariables.CompnyId & ", Qm.Sal_Account_id,0,sum(kd.Net_amt)-sum(Kd.Vat_amt)- sum(Kd.Add_Vat_amt)-SUM(ROUND((CASE WHEN Freight_Main <> 0 THEN KD.Amount * KM.Freight_Main / KM.Doc_Amt ELSE 0 END), 2))-SUM(ROUND((CASE WHEN Vadtar_Main <> 0 THEN KD.Amount * KM.Vadtar_Main / KM.Doc_Amt ELSE 0 END), 2))," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " FROM Sales_Return_MAIN AS Km INNER JOIN"
            sSQL = sSQL & " SALES_Return_DETAIL AS KD ON Km.Company_Id = KD.Company_Id AND Km.Year_id = KD.Year_id AND Km.Doc_Type = KD.Doc_Type AND Km.Doc_No = KD.Doc_No LEFT OUTER JOIN"
            sSQL = sSQL & " ITEM_MASTER AS IM ON KD.Company_Id = IM.Company_Id AND KD.Item_id = IM.Item_Id LEFT OUTER JOIN"
            sSQL = sSQL & " QUALITY_MASTER AS Qm ON IM.Company_Id = Qm.Company_Id AND IM.Quality_id = Qm.Quality_Id Left Outer join"
            sSQL = sSQL & " Voucher_Master as VM On km.company_Id=Vm.Company_Id and Km.doc_type=Vm.doc_type"
            sSQL = sSQL & " WHERE "
            sSQL = sSQL & "  Km.Company_Id=" & clsVariables.CompnyId & ""
            sSQL = sSQL & " and Km.Year_Id=" & aq(clsVariables.WorkingYear) & ""
            sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Qm.Sal_Rtn_Account_id<>0"
            sSQL = sSQL & " and Qm.Sal_Rtn_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Qm.Sal_Rtn_Account_id<>0"
            sSQL = sSQL & " and VM.Department_Id=8"
            sSQL = sSQL & " GROUP BY Qm.Sal_Rtn_Account_id"
            sSQL = sSQL & " having sum(isnull(KD.NET_amt,0) - isnull(KD.Add_VAT_Amt,0) - isnull(KD.Vat_amt,0))- SUM(((CASE WHEN isnull(Freight_Main,0) <> 0 THEN isnull(KD.Amount,0) * isnull(KM.Freight_Main,0) / KM.Doc_Amt ELSE 0 END)))- SUM(((CASE WHEN isnull(Vadtar_Main,0) <> 0 THEN isnull(KD.Amount,0) * isnull(KM.Vadtar_Main,0) / KM.Doc_Amt ELSE 0 END))) <> 0"
            ob.Execute(sSQL, ob.getconnection)


            ''Sales Vat Acc 
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Dm.Vat_Account_id ,0,SUM(KID.Vat_amt)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from Sales_MAIN AS KM INNER JOIN"
            sSQL = sSQL & " Sales_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
            sSQL = sSQL & " KM.Doc_No = KID.Doc_No "
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & " where KM.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.vat_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Dm.Vat_Account_id<>0"
            sSQL = sSQL & " Group by Dm.vat_Account_id"
            sSQL = sSQL & " having isnull(sum(kid.Vat_Amt),0)<>0"
            ob.Execute(sSQL, ob.getconnection())

            'Sales Return
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Dm.Vat_Account_id ,SUM(KID.Vat_amt),0," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from Sales_Return_MAIN AS KM INNER JOIN"
            sSQL = sSQL & " Sales_Return_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
            sSQL = sSQL & " KM.Doc_No = KID.Doc_No "
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & " where KM.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.vat_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Dm.Vat_Account_id<>0"
            sSQL = sSQL & " Group by Dm.vat_Account_id"
            sSQL = sSQL & " having isnull(sum(kid.Vat_Amt),0)<>0"
            ob.Execute(sSQL, ob.getconnection())

            ''Sales Add Vat Acc 
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Dm.Add_Vat_Account_id,0,SUM(KID.Add_Vat_amt)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from Sales_MAIN AS KM INNER JOIN"
            sSQL = sSQL & " Sales_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
            sSQL = sSQL & " KM.Doc_No = KID.Doc_No "
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & " where KM.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.Add_vat_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Dm.Add_Vat_Account_id <>0"
            sSQL = sSQL & " Group by Dm.Add_Vat_Account_Id"
            sSQL = sSQL & " having isnull(sum(KID.Add_vat_Amt),0)<>0"
            ob.Execute(sSQL, ob.getconnection)

            'Sales Return
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Dm.Add_Vat_Account_id,SUM(KID.Add_Vat_amt),0," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from Sales_Return_MAIN AS KM INNER JOIN"
            sSQL = sSQL & " Sales_Return_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
            sSQL = sSQL & " KM.Doc_No = KID.Doc_No "
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & " where KM.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.Add_vat_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Dm.Add_Vat_Account_id <>0"
            sSQL = sSQL & " Group by Dm.Add_Vat_Account_Id"
            sSQL = sSQL & " having isnull(sum(KID.Add_vat_Amt),0)<>0"
            ob.Execute(sSQL, ob.getconnection)

            'Sales Round Of Account for Add 
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Dm.Oth_Account_id,0,Sum(km.Add_Amt)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from Sales_main as Km "
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & "where km.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and km.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.Oth_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Dm.Oth_Account_id<>0 "
            sSQL = sSQL & " Group by Dm.Oth_Account_Id"
            sSQL = sSQL & " having isnull(sum(km.Add_Amt),0)<>0"
            ob.Execute(sSQL, ob.getconnection)

            'Sales return
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Dm.Oth_Account_id,Sum(km.Add_Amt),0," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from Sales_Return_main as Km "
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & "where km.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and km.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.Oth_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Dm.Oth_Account_id<>0 "
            sSQL = sSQL & " Group by Dm.Oth_Account_Id"
            sSQL = sSQL & " having isnull(sum(km.Add_Amt),0)<>0"
            ob.Execute(sSQL, ob.getconnection)

            'Sales Round Of Account for Less
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Dm.Oth_Account_id,Sum(km.Less_Amt),0," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from Sales_main as Km "
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & "where km.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and km.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.Oth_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Dm.Oth_Account_id<>0"
            sSQL = sSQL & " Group by Dm.Oth_Account_id"
            sSQL = sSQL & " having isnull(sum(km.Less_Amt),0)<>0"
            ob.Execute(sSQL, ob.getconnection)

            'Sales Return
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Dm.Oth_Account_id,0,Sum(km.Less_Amt)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from Sales_Return_main as Km "
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & "where km.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and km.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.Oth_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Dm.Oth_Account_id<>0"
            sSQL = sSQL & " Group by Dm.Oth_Account_id"
            sSQL = sSQL & " having isnull(sum(km.Less_Amt),0)<>0"
            ob.Execute(sSQL, ob.getconnection)

            'sales For Freight Acc WithOut Khatar Dept
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Dm.Freight_Account_id,0,Sum(Freight_Main)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from Sales_main as Km "
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & " where km.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and km.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.Freight_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Vm.Department_ID<>8 "
            sSQL = sSQL & " and Dm.Freight_Account_id<>0"
            sSQL = sSQL & " Group by Dm.Freight_Account_id"
            sSQL = sSQL & " having isnull(sum(km.Freight_Main),0)<>0"
            ob.Execute(sSQL, ob.getconnection)

            'Sales return
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Dm.Freight_Account_id,Sum(Freight_Main),0," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from Sales_Return_main as Km "
            sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            sSQL = sSQL & " where km.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and km.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and km.doc_date <= " & aq(asondate)
            sSQL = sSQL & " and Dm.Freight_Account_id in (" & conds & ")"
            sSQL = sSQL & " and Vm.Department_ID<>8 "
            sSQL = sSQL & " and Dm.Freight_Account_id<>0"
            sSQL = sSQL & " Group by Dm.Freight_Account_id"
            sSQL = sSQL & " having isnull(sum(km.Freight_Main),0)<>0"
            ob.Execute(sSQL, ob.getconnection)
            'If MdiMain.ComboDept.SelectedValue = 1 Or MdiMain.ComboDept.SelectedValue = 9 Then
            'pady receipt
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",SPAM.Adv_Ac_id ,0,"
            sSQL = sSQL & "Sum(Rd.amount),"
            sSQL = sSQL & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from pady_Receipt_main as RM Inner join pady_Receipt_detail as RD"
            sSQL = sSQL & " on Rm.Company_Id=Rd.COmpany_Id and "
            sSQL = sSQL & " Rm.Year_Id=Rd.Year_Id and "
            sSQL = sSQL & " Rm.Season_Id=Rd.Season_Id and "
            sSQL = sSQL & " Rm.Doc_Type=Rd.Doc_Type and "
            sSQL = sSQL & " Rm.Doc_no=Rd.Doc_no "
            sSQL = sSQL & " left outer join Sales_Purchase_Account_Master as SPAM On"
            sSQL = sSQL & " RD.Company_Id=SPAM.Company_Id  and "
            sSQL = sSQL & " RD.Year_Id=SPAM.Year_Id and "
            sSQL = sSQL & " RD.Season_Id=SPAM.Season_Id and "
            sSQL = sSQL & " Rd.item_Id=SPAM.ITem_Id"
            sSQL = sSQL & " where Rm.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Rm.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and doc_date <= " & aq(asondate)
            sSQL = sSQL & "  Group by SPAM.Adv_Ac_id  "
            ob.Execute(sSQL, ob.getconnection)
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",SPAM.Pur_Ac_Id ,"
            sSQL = sSQL & "Sum(Rd.amount),0,"
            sSQL = sSQL & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from pady_Receipt_main as RM Inner join pady_Receipt_detail as RD"
            sSQL = sSQL & " on Rm.Company_Id=Rd.COmpany_Id and "
            sSQL = sSQL & " Rm.Year_Id=Rd.Year_Id and "
            sSQL = sSQL & " Rm.Season_Id=Rd.Season_Id and "
            sSQL = sSQL & " Rm.Doc_Type=Rd.Doc_Type and "
            sSQL = sSQL & " Rm.Doc_no=Rd.Doc_no "
            sSQL = sSQL & " left outer join Sales_Purchase_Account_Master as SPAM On"
            sSQL = sSQL & " RD.Company_Id=SPAM.Company_Id  and "
            sSQL = sSQL & " RD.Year_Id=SPAM.Year_Id and "
            sSQL = sSQL & " RD.Season_Id=SPAM.Season_Id and "
            sSQL = sSQL & " Rd.item_Id=SPAM.ITem_Id"
            sSQL = sSQL & " where Rm.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Rm.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and doc_date <= " & aq(asondate)
            sSQL = sSQL & "  Group by SPAM.Pur_Ac_Id "
            ob.Execute(sSQL, ob.getconnection)
            'Pady Sales Data 
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",SM.Account_Id ,"
            sSQL = sSQL & "Sum(Sd.Amount-desc_Amount),0," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from Pady_Sales_Main as SM inner join"
            sSQL = sSQL & " Pady_Sales_Detail as Sd on "
            sSQL = sSQL & " Sm.Company_Id=SD.COmpany_Id and "
            sSQL = sSQL & " Sm.Year_Id=SD.Year_Id and "
            sSQL = sSQL & " Sm.Season_Id=SD.Season_Id and "
            sSQL = sSQL & " SM.DOc_TYpe=SD.Doc_Type and "
            sSQL = sSQL & " SM.Doc_No=Sd.Doc_no "
            sSQL = sSQL & " left outer join Sales_Purchase_Account_Master as SPAM On"
            sSQL = sSQL & " Sm.Company_Id=SPAM.Company_Id  and "
            sSQL = sSQL & " SM.Chal_Year_Id=SPAM.Year_Id and "
            sSQL = sSQL & " SM.Chal_Season_Id=SPAM.Season_Id and "
            sSQL = sSQL & " SD.item_Id=SPAM.ITem_Id "
            sSQL = sSQL & " where Sm.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Sm.YEar_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and doc_date <= " & aq(asondate)
            sSQL = sSQL & "  Group by SM.Account_Id "
            ob.Execute(sSQL, ob.getconnection)
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",SPAM.sal_Ac_Id ,"
            sSQL = sSQL & "0,Sum(Sd.Amount-desc_Amount)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from Pady_Sales_Main as SM inner join"
            sSQL = sSQL & " Pady_Sales_Detail as Sd on "
            sSQL = sSQL & " Sm.Company_Id=SD.COmpany_Id and "
            sSQL = sSQL & " Sm.Year_Id=SD.Year_Id and "
            sSQL = sSQL & " Sm.Season_Id=SD.Season_Id and "
            sSQL = sSQL & " SM.DOc_TYpe=SD.Doc_Type and "
            sSQL = sSQL & " SM.Doc_No=Sd.Doc_no "
            sSQL = sSQL & " left outer join Sales_Purchase_Account_Master as SPAM On"
            sSQL = sSQL & " Sm.Company_Id=SPAM.Company_Id  and "
            sSQL = sSQL & " SM.Chal_Year_Id=SPAM.Year_Id and "
            sSQL = sSQL & " SM.Chal_Season_Id=SPAM.Season_Id and "
            sSQL = sSQL & " SD.item_Id=SPAM.ITem_Id "
            sSQL = sSQL & " where Sm.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Sm.YEar_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and doc_date <=" & aq(asondate)
            sSQL = sSQL & "  Group by SPAM.sal_Ac_Id "
            ob.Execute(sSQL, ob.getconnection)


            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",SPAM.Adv_Ac_id ,0,"
            sSQL = sSQL & "Sum(Rd.amount),"
            sSQL = sSQL & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from Sidhi_Kharidi_Receipt_main as RM Inner join Sidhi_Kharidi_Receipt_detail as RD"
            sSQL = sSQL & " on Rm.Company_Id=Rd.COmpany_Id and "
            sSQL = sSQL & " Rm.Year_Id=Rd.Year_Id and "
            sSQL = sSQL & " Rm.Season_Id=Rd.Season_Id and "
            sSQL = sSQL & " Rm.Doc_Type=Rd.Doc_Type and "
            sSQL = sSQL & " Rm.Doc_no=Rd.Doc_no "
            sSQL = sSQL & " left outer join Sales_Purchase_Account_Master as SPAM On"
            sSQL = sSQL & " RD.Company_Id=SPAM.Company_Id  and "
            sSQL = sSQL & " RD.Year_Id=SPAM.Year_Id and "
            sSQL = sSQL & " RD.Season_Id=SPAM.Season_Id and "
            sSQL = sSQL & " Rd.item_Id=SPAM.ITem_Id"
            sSQL = sSQL & " where Rm.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Rm.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and doc_date <= " & aq(asondate)
            sSQL = sSQL & "  Group by SPAM.Adv_Ac_id  "
            ob.Execute(sSQL, ob.getconnection)
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",SPAM.Pur_Ac_Id ,"
            sSQL = sSQL & "Sum(Rd.amount),0,"
            sSQL = sSQL & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from Sidhi_Kharidi_Receipt_main as RM Inner join Sidhi_Kharidi_Receipt_detail as RD"
            sSQL = sSQL & " on Rm.Company_Id=Rd.COmpany_Id and "
            sSQL = sSQL & " Rm.Year_Id=Rd.Year_Id and "
            sSQL = sSQL & " Rm.Season_Id=Rd.Season_Id and "
            sSQL = sSQL & " Rm.Doc_Type=Rd.Doc_Type and "
            sSQL = sSQL & " Rm.Doc_no=Rd.Doc_no "
            sSQL = sSQL & " left outer join Sales_Purchase_Account_Master as SPAM On"
            sSQL = sSQL & " RD.Company_Id=SPAM.Company_Id  and "
            sSQL = sSQL & " RD.Year_Id=SPAM.Year_Id and "
            sSQL = sSQL & " RD.Season_Id=SPAM.Season_Id and "
            sSQL = sSQL & " Rd.item_Id=SPAM.ITem_Id"
            sSQL = sSQL & " where Rm.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Rm.Year_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and doc_date <= " & aq(asondate)
            sSQL = sSQL & "  Group by SPAM.Pur_Ac_Id "
            ob.Execute(sSQL, ob.getconnection)
            'sidhi kharidi Pady Sales Data 
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",SM.Ac_Id ,"
            sSQL = sSQL & "Sum(Sd.item_net),0," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from Sidhi_Kharidi_Sales_Main as SM inner join"
            sSQL = sSQL & " Sidhi_Kharidi_Sales_Detail as Sd on "
            sSQL = sSQL & " Sm.Company_Id=SD.COmpany_Id and "
            sSQL = sSQL & " Sm.Year_Id=SD.Year_Id and "
            sSQL = sSQL & " Sm.Season_Id=SD.Season_Id and "
            sSQL = sSQL & " SM.DOc_TYpe=SD.Doc_Type and "
            sSQL = sSQL & " SM.Doc_No=Sd.Doc_no "
            sSQL = sSQL & " left outer join Sales_Purchase_Account_Master as SPAM On"
            sSQL = sSQL & " Sm.Company_Id=SPAM.Company_Id  and "
            ' sSQL = sSQL & " SM.Chal_Year_Id=SPAM.Year_Id and "
            ' sSQL = sSQL & " SM.Chal_Season_Id=SPAM.Season_Id and "
            sSQL = sSQL & " SD.item_Id=SPAM.ITem_Id "
            sSQL = sSQL & " where Sm.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Sm.YEar_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and doc_date <= " & aq(asondate)
            sSQL = sSQL & "  Group by SM.Ac_Id "
            ob.Execute(sSQL, ob.getconnection)
            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",SPAM.sal_Ac_Id ,"
            sSQL = sSQL & "0,Sum(Sd.item_net)," & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " from Sidhi_Kharidi_Sales_Main as SM inner join"
            sSQL = sSQL & " Sidhi_Kharidi_Sales_Detail as Sd on "
            sSQL = sSQL & " Sm.Company_Id=SD.COmpany_Id and "
            sSQL = sSQL & " Sm.Year_Id=SD.Year_Id and "
            sSQL = sSQL & " Sm.Season_Id=SD.Season_Id and "
            sSQL = sSQL & " SM.DOc_TYpe=SD.Doc_Type and "
            sSQL = sSQL & " SM.Doc_No=Sd.Doc_no "
            sSQL = sSQL & " left outer join Sales_Purchase_Account_Master as SPAM On"
            sSQL = sSQL & " Sm.Company_Id=SPAM.Company_Id  and "
            '    sSQL = sSQL & " SM.Year_Id=SPAM.Year_Id and "
            '    sSQL = sSQL & " SM.Season_Id=SPAM.Season_Id and "
            sSQL = sSQL & " SD.item_Id=SPAM.ITem_Id "
            sSQL = sSQL & " where Sm.Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Sm.YEar_id=" & aq(clsVariables.WorkingYear)
            sSQL = sSQL & " and doc_date <=" & aq(asondate)
            sSQL = sSQL & "  Group by SPAM.sal_Ac_Id "
            ob.Execute(sSQL, ob.getconnection)


            'End If



            If SAVINGSYSTEM = True Then
                'saving receipt Data Credit 
                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Cm.Account_id,0,Sum(RD.Amount)," & aq(IPAddress + clsVariables.UserName)
                sSQL = sSQL & " From SAVING_RECEIPT_MAIN as Rm Inner Join SAVING_RECEIPT_DETAIL as Rd On "
                sSQL = sSQL & " Rm.Company_Id=Rd.Company_Id And Rm.Year_Id=Rd.Year_Id And Rm.Doc_Type=Rd.Doc_Type And Rm.Doc_no=Rd.Doc_no "
                sSQL = sSQL & " Inner join Column_master as Cm On Rd.Company_id=Cm.Company_Id And Rd.Column_id=Cm.Column_Id"
                sSQL = sSQL & " Inner join Voucher_master as Vm On RM.Company_id=Vm.Company_Id And RM.Doc_Type=Vm.Doc_Type"
                sSQL = sSQL & " where Rm.COmpany_Id=" & clsVariables.CompnyId
                sSQL = sSQL & " and Rm.Year_Id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and Rm.Doc_DAte<=" & aq(asondate)
                sSQL = sSQL & " and Cm.Account_Id in (" & conds & ")"
                sSQL = sSQL & " Group by Cm.Account_id"
                sSQL = sSQL & " having Sum(RD.Amount) <> 0"
                ob.Execute(sSQL, ob.getconnection)

                'saving receipt Data Debit 
                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Rm.Debit_Account_Id,Sum(RD.Amount),0," & aq(IPAddress + clsVariables.UserName)
                sSQL = sSQL & " From SAVING_RECEIPT_MAIN as Rm Inner Join SAVING_RECEIPT_DETAIL as Rd On "
                sSQL = sSQL & " Rm.Company_Id=Rd.Company_Id And Rm.Year_Id=Rd.Year_Id And Rm.Doc_Type=Rd.Doc_Type And Rm.Doc_no=Rd.Doc_no "
                sSQL = sSQL & " Inner join Column_master as Cm On Rd.Company_id=Cm.Company_Id And Rd.Column_id=Cm.Column_Id"
                sSQL = sSQL & " Inner join Voucher_master as Vm On RM.Company_id=Vm.Company_Id And RM.Doc_Type=Vm.Doc_Type"
                sSQL = sSQL & " where Rm.COmpany_Id=" & clsVariables.CompnyId
                sSQL = sSQL & " and Rm.Year_Id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and Rm.Doc_DAte<=" & aq(asondate)
                sSQL = sSQL & " and Rm.Debit_Account_Id in (" & conds & ")"
                sSQL = sSQL & " Group by Rm.Debit_Account_Id"
                sSQL = sSQL & " having Sum(RD.Amount) <> 0"
                ob.Execute(sSQL, ob.getconnection)

                'saving Payment Data 
                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Cm.Account_id,Sum(RD.Amount),0," & aq(IPAddress + clsVariables.UserName)
                sSQL = sSQL & " From SAVING_Payment_MAIN as Rm Inner Join SAVING_Payment_DETAIL as Rd On "
                sSQL = sSQL & " Rm.Company_Id=Rd.Company_Id And Rm.Year_Id=Rd.Year_Id And Rm.Doc_Type=Rd.Doc_Type And Rm.Doc_no=Rd.Doc_no "
                sSQL = sSQL & " Inner join Column_master as Cm On Rd.Company_id=Cm.Company_Id And Rd.Column_id=Cm.Column_Id"
                sSQL = sSQL & " Inner join Voucher_master as Vm On RM.Company_id=Vm.Company_Id And RM.Doc_Type=Vm.Doc_Type"
                sSQL = sSQL & " where Rm.COmpany_Id=" & clsVariables.CompnyId
                sSQL = sSQL & " and Rm.Year_Id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and Rm.Doc_DAte<=" & aq(asondate)
                sSQL = sSQL & " and Cm.Account_Id in (" & conds & ")"
                sSQL = sSQL & " Group by Cm.Account_id"
                sSQL = sSQL & " having Sum(RD.Amount) <> 0 "
                ob.Execute(sSQL, ob.getconnection)

                'saving Payment Data Credit 
                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Rm.Credit_Account_Id,0,Sum(RD.Amount)," & aq(IPAddress + clsVariables.UserName)
                sSQL = sSQL & " From SAVING_Payment_MAIN as Rm Inner Join SAVING_Payment_DETAIL as Rd On "
                sSQL = sSQL & " Rm.Company_Id=Rd.Company_Id And Rm.Year_Id=Rd.Year_Id And Rm.Doc_Type=Rd.Doc_Type And Rm.Doc_no=Rd.Doc_no "
                sSQL = sSQL & " Inner join Column_master as Cm On Rd.Company_id=Cm.Company_Id And Rd.Column_id=Cm.Column_Id"
                sSQL = sSQL & " Inner join Voucher_master as Vm On RM.Company_id=Vm.Company_Id And RM.Doc_Type=Vm.Doc_Type"
                sSQL = sSQL & " where Rm.COmpany_Id=" & clsVariables.CompnyId
                sSQL = sSQL & " and Rm.Year_Id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and Rm.Doc_DAte<=" & aq(asondate)
                sSQL = sSQL & " and Rm.Credit_Account_Id in (" & conds & ")"
                sSQL = sSQL & " Group by Rm.Credit_Account_Id"
                sSQL = sSQL & " having Sum(RD.Amount) <> 0 "
                ob.Execute(sSQL, ob.getconnection)
            End If


            If FixdSYSTEM = True Then
                'Fixd Receipt Opening
                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Cm.Account_id,0,Sum(FR.Amount)," & aq(IPAddress + clsVariables.UserName)
                sSQL = sSQL & " From Fixd_Receipt_Data as Fr Left Outer join Column_master as Cm On "
                sSQL = sSQL & " Fr.Company_Id=Cm.Company_id And Fr.Column_Id=Cm.Column_Id "
                sSQL = sSQL & " where Fr.Company_Id=" & clsVariables.CompnyId
                sSQL = sSQL & " and Fr.Year_Id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and Fr.Doc_DAte<=" & aq(asondate)
                sSQL = sSQL & " and Cm.Account_id in (" & conds & ")"
                sSQL = sSQL & " Group by Cm.Account_id"
                sSQL = sSQL & " having Sum(FR.Amount) <> 0 "
                ob.Execute(sSQL, ob.getconnection)



                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",FR.Debit_Account_id,Sum(FR.Amount),0," & aq(IPAddress + clsVariables.UserName)
                sSQL = sSQL & " From Fixd_Receipt_Data as Fr Left Outer join Column_master as Cm On "
                sSQL = sSQL & " Fr.Company_Id=Cm.Company_id And Fr.Column_Id=Cm.Column_Id "
                sSQL = sSQL & " where Fr.Company_Id=" & clsVariables.CompnyId
                sSQL = sSQL & " and Fr.Year_Id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and Fr.Doc_DAte<=" & aq(asondate)
                sSQL = sSQL & " and FR.Debit_Account_id in (" & conds & ")"
                sSQL = sSQL & " Group by FR.Debit_Account_id"
                ob.Execute(sSQL, ob.getconnection)

                'fixd payment
                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Cm.Account_id,Sum(Fp.Fixd_Amt),0," & aq(IPAddress + clsVariables.UserName)
                sSQL = sSQL & " from Fixd_Payment_DAta as FP inner join Fixd_Balance as Fb on "
                sSQL = sSQL & " Fp.Company_Id=Fb.Company_Id And FP.Fixd_no=FB.Doc_no and Fp.Year_Id=Fb.Year_id"
                sSQL = sSQL & " left outer join Column_Master as CM On  "
                sSQL = sSQL & " Fb.COlumn_Id=CM.Column_Id and Fb.COmpany_id=Cm.COmpany_id"
                sSQL = sSQL & " where FP.Company_Id=" & clsVariables.CompnyId
                sSQL = sSQL & " and FP.Year_Id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and FP.Doc_DAte<=" & aq(asondate)
                sSQL = sSQL & " and Cm.Account_id in (" & conds & ")"
                sSQL = sSQL & " Group by Cm.Account_id"
                ob.Execute(sSQL, ob.getconnection)

                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",fp.Interest_Account_ID,Sum(Fp.Interest_Amt),0," & aq(IPAddress + clsVariables.UserName)
                sSQL = sSQL & " from Fixd_Payment_DAta as FP inner join Fixd_Balance as Fb on "
                sSQL = sSQL & " Fp.Company_Id=Fb.Company_Id And FP.Fixd_no=FB.Doc_no and Fp.Year_Id=Fb.Year_id"
                sSQL = sSQL & " left outer join Column_Master as CM On  "
                sSQL = sSQL & " Fb.COlumn_Id=CM.Column_Id and Fb.COmpany_id=Cm.COmpany_id"
                sSQL = sSQL & " where FP.Company_Id=" & clsVariables.CompnyId
                sSQL = sSQL & " and FP.Year_Id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and FP.Doc_DAte<=" & aq(asondate)
                sSQL = sSQL & " and fp.Interest_Account_ID in (" & conds & ")"
                sSQL = sSQL & " Group by Fp.Interest_Account_ID"
                sSQL = sSQL & " having Sum(Fp.Interest_Amt) <> 0"
                ob.Execute(sSQL, ob.getconnection)

                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",fp.Reserve_Interest_Account_ID,Sum(Fp.Interest_Reserve),0," & aq(IPAddress + clsVariables.UserName)
                sSQL = sSQL & " from Fixd_Payment_DAta as FP inner join Fixd_Balance as Fb on "
                sSQL = sSQL & " Fp.Company_Id=Fb.Company_Id And FP.Fixd_no=FB.Doc_no and Fp.Year_Id=Fb.Year_id"
                sSQL = sSQL & " left outer join Column_Master as CM On  "
                sSQL = sSQL & " Fb.COlumn_Id=CM.Column_Id and Fb.COmpany_id=Cm.COmpany_id"
                sSQL = sSQL & " where FP.Company_Id=" & clsVariables.CompnyId
                sSQL = sSQL & " and FP.Year_Id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and FP.Doc_DAte<=" & aq(asondate)
                sSQL = sSQL & " and fp.Reserve_Interest_Account_ID in (" & conds & ")"
                sSQL = sSQL & " Group by Fp.Reserve_Interest_Account_ID"
                sSQL = sSQL & " having Sum(Fp.Interest_Reserve)<>0 "
                ob.Execute(sSQL, ob.getconnection)

                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",FP.Credit_Account_id,0,isnull(Sum(Fp.Fixd_Amt),0)+isnull(sum(fp.Interest_Amt),0)+isnull(sum(Fp.Interest_Reserve),0)," & aq(IPAddress + clsVariables.UserName)
                sSQL = sSQL & " from Fixd_Payment_DAta as FP inner join Fixd_Balance as Fb on "
                sSQL = sSQL & " Fp.Company_Id=Fb.Company_Id And FP.Fixd_no=FB.Doc_no and Fp.Year_Id=Fb.Year_id"
                sSQL = sSQL & " left outer join Column_Master as CM On  "
                sSQL = sSQL & " Fb.COlumn_Id=CM.Column_Id and Fb.COmpany_id=Cm.COmpany_id"
                sSQL = sSQL & " where FP.Company_Id=" & clsVariables.CompnyId
                sSQL = sSQL & " and FP.Year_Id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and FP.Doc_DAte<=" & aq(asondate)
                sSQL = sSQL & " and Fp.Credit_Account_id in (" & conds & ")"
                sSQL = sSQL & " Group by Fp.Credit_Account_id"
                sSQL = sSQL & " having isnull(Sum(Fp.Fixd_Amt),0)+ isnull(sum(fp.Interest_Amt),0)+ isnull(sum(Fp.Interest_Reserve),0) <> 0 "
                ob.Execute(sSQL, ob.getconnection)

                'fixd Reserve payment
                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",fp.Reserve_Interest_Account_Id,Sum(Fp.Interest_Amt),0," & aq(IPAddress + clsVariables.UserName)
                sSQL = sSQL & " from FIXD_RESERVE_INTEREST_DATA as FP inner join Fixd_Balance as Fb on "
                sSQL = sSQL & " Fp.Company_Id=Fb.Company_Id And FP.Fixd_no=FB.Doc_no and Fp.Year_Id=Fb.Year_id"
                sSQL = sSQL & " left outer join Column_Master as CM On  "
                sSQL = sSQL & " Fb.COlumn_Id=CM.Column_Id and Fb.COmpany_id=Cm.COmpany_id"
                sSQL = sSQL & " where FP.Company_Id=" & clsVariables.CompnyId
                sSQL = sSQL & " and FP.Year_Id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and FP.Doc_DAte<=" & aq(asondate)
                sSQL = sSQL & " and fp.Reserve_Interest_Account_Id in (" & conds & ")"
                sSQL = sSQL & " Group by Fp.Reserve_Interest_Account_Id"
                sSQL = sSQL & " having Sum(Fp.Interest_Amt) <> 0"
                ob.Execute(sSQL, ob.getconnection)

                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",fp.Credit_Account_id,0,Sum(Fp.Interest_Amt)," & aq(IPAddress + clsVariables.UserName)
                sSQL = sSQL & " from FIXD_RESERVE_INTEREST_DATA as FP inner join Fixd_Balance as Fb on "
                sSQL = sSQL & " Fp.Company_Id=Fb.Company_Id And FP.Fixd_no=FB.Doc_no and Fp.Year_Id=Fb.Year_id"
                sSQL = sSQL & " left outer join Column_Master as CM On  "
                sSQL = sSQL & " Fb.COlumn_Id=CM.Column_Id and Fb.COmpany_id=Cm.COmpany_id"
                sSQL = sSQL & " where FP.Company_Id=" & clsVariables.CompnyId
                sSQL = sSQL & " and FP.Year_Id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and FP.Doc_DAte<=" & aq(asondate)
                sSQL = sSQL & " and fp.Credit_Account_id in (" & conds & ")"
                sSQL = sSQL & " Group by Fp.Credit_Account_id"
                sSQL = sSQL & " having Sum(Fp.Interest_Amt) <>0"
                ob.Execute(sSQL, ob.getconnection)
            End If


            If checkstock = False Then
                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                sSQL = sSQL & " Select " & clsVariables.CompnyId & ",CSD.Account_id ,Sum(CSD.Payment_Amt),sum(CSD.Receipt_Amt)," & aq(IPAddress + clsVariables.UserName) & "  from " & gClosing_Stock_Main & " as CSM Inner Join " & gClosing_Stock_Detail & " as CSD On "
                sSQL = sSQL & " CSM.Company_Id=CSD.Company_Id And CSm.Doc_no=CSd.Doc_no And CSm.YEar_Id=CSd.YEar_Id And CSm.Doc_Type=CSd.Doc_Type"
                sSQL = sSQL & " where CSM.Company_id=" & clsVariables.CompnyId
                sSQL = sSQL & " and CSM.Year_id=" & aq(clsVariables.WorkingYear)
                sSQL = sSQL & " and CSm.Doc_Date=" & aq(asondate)
                sSQL = sSQL & " and CSD.account_id in (" & conds & ")"
                sSQL = sSQL & " Group by CSd.Account_Id"
                ob.Execute(sSQL, ob.getconnection)
            End If

            If SHARESYSTEM = True Then
                If clsVariables.WorkingYear >= "2015-2016" Then
                    sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                    sSQL = sSQL & "sELECT " & clsVariables.CompnyId & ",YM.dIV_Account_Id,Net_Dividend,0," & aq(IPAddress + clsVariables.UserName)
                    sSQL = sSQL & " FROM Dividend_Payment_main  as Rm inner join Dividend_Payment_Detail  as D On "
                    sSQL = sSQL & " Rm.COmpany_Id=D.Company_id and Rm.Year_Id=D.MYear_Id and rm.Doc_no=D.Doc_no left outer join "
                    sSQL = sSQL & " Year_Master  as Ym On D.Company_Id=ym.Company_Id and D.Year_Id=ym.Year_Id"
                    sSQL = sSQL & " where Rm.Company_id=" & clsVariables.CompnyId
                    sSQL = sSQL & " and Rm.Year_id=" & aq(clsVariables.WorkingYear)
                    sSQL = sSQL & " and RM.Doc_DAte<=" & aq(asondate)
                    sSQL = sSQL & " and Ym.DiV_Account_Id in (" & conds & ")"
                    ob.Execute(sSQL, ob.getconnection())

                    sSQL = "INSERT INTO Joint_Trial_Balance (Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                    sSQL = sSQL & "sELECT " & clsVariables.CompnyId & ",rM.Credit_Account_Id,0,Net_Dividend," & aq(IPAddress + clsVariables.UserName)
                    sSQL = sSQL & " FROM Dividend_Payment_main  as Rm inner join Dividend_Payment_Detail  as D On "
                    sSQL = sSQL & " Rm.COmpany_Id=D.Company_id and Rm.Year_Id=D.MYear_Id and rm.Doc_no=D.Doc_no left outer join "
                    sSQL = sSQL & " Year_Master  as Ym On D.Company_Id=ym.Company_Id and D.Year_Id=ym.Year_Id"
                    sSQL = sSQL & " where Rm.Company_id=" & clsVariables.CompnyId
                    sSQL = sSQL & " and Rm.Year_id=" & aq(clsVariables.WorkingYear)
                    sSQL = sSQL & " and Rm.Doc_DAte<=" & aq(asondate)
                    sSQL = sSQL & " and Rm.Credit_Account_Id in (" & conds & ")"
                    ob.Execute(sSQL, ob.getconnection())
                    'CHANGE 30/01/2015 Pramod
                    sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                    sSQL = sSQL & "sELECT " & clsVariables.CompnyId & ",rM.dEBIT_Account_Id,Amount,0," & aq(IPAddress + clsVariables.UserName)
                    sSQL = sSQL & " FROM Receipt_main as Rm inner join Receipt_Detail as Rd On "
                    sSQL = sSQL & " Rm.Company_id=rd.Company_Id and Rm.Doc_no=Rd.Doc_no and Rm.year_id=rd.Year_Id"
                    sSQL = sSQL & " where Rm.Company_id=" & clsVariables.CompnyId
                    sSQL = sSQL & " and Rm.Year_id=" & aq(clsVariables.WorkingYear)
                    sSQL = sSQL & " and RM.Doc_DAte<=" & aq(asondate)
                    sSQL = sSQL & " and Rm.Debit_Account_Id in (" & conds & ")"
                    ob.Execute(sSQL, ob.getconnection)

                    sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                    sSQL = sSQL & "sELECT " & clsVariables.CompnyId & ",rM.Credit_Account_Id,0,Amount," & aq(IPAddress + clsVariables.UserName)
                    sSQL = sSQL & " FROM Receipt_main as Rm inner join Receipt_Detail as Rd On "
                    sSQL = sSQL & " Rm.Company_id=rd.Company_Id and Rm.Doc_no=Rd.Doc_no and Rm.year_id=rd.Year_Id"
                    sSQL = sSQL & " where Rm.Company_id=" & clsVariables.CompnyId
                    sSQL = sSQL & " and Rm.Year_id=" & aq(clsVariables.WorkingYear)
                    sSQL = sSQL & " and Rm.Doc_DAte<=" & aq(asondate)
                    sSQL = sSQL & " and Rm.Credit_Account_Id in (" & conds & ")"
                    ob.Execute(sSQL, ob.getconnection)

                    sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                    sSQL = sSQL & "sELECT " & clsVariables.CompnyId & ",ID.Debit_Account_Id,ID.Share_Amt,0," & aq(IPAddress + clsVariables.UserName)
                    sSQL = sSQL & " FROM Inward_Data as ID"
                    sSQL = sSQL & " where ID.Company_id=" & clsVariables.CompnyId
                    sSQL = sSQL & " and ID.Year_id=" & aq(clsVariables.WorkingYear)
                    sSQL = sSQL & " and ID.Doc_DAte<=" & aq(asondate)
                    sSQL = sSQL & " and ID.Debit_Account_Id in (" & conds & ")"
                    sSQL = sSQL & " and Share_Amt<>0"
                    ob.Execute(sSQL, ob.getconnection)

                    sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                    sSQL = sSQL & "sELECT " & clsVariables.CompnyId & ",ID.Debit_Account_Id,ID.Admission_Fee,0," & aq(IPAddress + clsVariables.UserName)
                    sSQL = sSQL & " FROM Inward_Data as ID"
                    sSQL = sSQL & " where ID.Company_id=" & clsVariables.CompnyId
                    sSQL = sSQL & " and ID.Year_id=" & aq(clsVariables.WorkingYear)
                    sSQL = sSQL & " and ID.Doc_DAte<=" & aq(asondate)
                    sSQL = sSQL & " and ID.Debit_Account_Id in (" & conds & ")"
                    sSQL = sSQL & " and Admission_Fee<>0"
                    ob.Execute(sSQL, ob.getconnection)

                    sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                    sSQL = sSQL & "sELECT " & clsVariables.CompnyId & ",ID.Share_Account_Id,0,ID.Share_Amt," & aq(IPAddress + clsVariables.UserName)
                    sSQL = sSQL & " FROM Inward_Data as ID"
                    sSQL = sSQL & " where ID.Company_id=" & clsVariables.CompnyId
                    sSQL = sSQL & " and ID.Year_id=" & aq(clsVariables.WorkingYear)
                    sSQL = sSQL & " and ID.Doc_DAte<=" & aq(asondate)
                    sSQL = sSQL & " and ID.Share_Account_Id in (" & conds & ")"
                    sSQL = sSQL & " and Share_Amt<>0"
                    ob.Execute(sSQL, ob.getconnection)

                    sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
                    sSQL = sSQL & "sELECT " & clsVariables.CompnyId & ",ID.Admission_Fee_Account_Id,0,ID.Admission_Fee," & aq(IPAddress + clsVariables.UserName)
                    sSQL = sSQL & " FROM Inward_Data as ID"
                    sSQL = sSQL & " where ID.Company_id=" & clsVariables.CompnyId
                    sSQL = sSQL & " and ID.Year_id=" & aq(clsVariables.WorkingYear)
                    sSQL = sSQL & " and ID.Doc_DAte<=" & aq(asondate)
                    sSQL = sSQL & " and ID.Admission_Fee_Account_Id in (" & conds & ")"
                    sSQL = sSQL & " and Admission_Fee<>0"
                    ob.Execute(sSQL, ob.getconnection)
                End If
            End If

            sSQL = "Delete from Joint_Trial_Balance where Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & " and Ip_Address=" & aq(IPAddress)
            ob.Execute(sSQL, ob.getconnection)

            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & " select " & clsVariables.CompnyId & ",Account_id,Sum(Ho_Dr)-sum(HO_Cr),0 ," & aq(IPAddress)
            sSQL = sSQL & " From Joint_Trial_Balance "
            sSQL = sSQL & " where Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & "  And ip_Address=" & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " group by Account_Id"
            sSQL = sSQL & " having (Sum(Ho_Dr)-sum(HO_Cr))>0"
            ob.Execute(sSQL, ob.getconnection)

            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
            sSQL = sSQL & " select " & clsVariables.CompnyId & ",Account_id,0,abs(Sum(Ho_Dr)-sum(HO_Cr))," & aq(IPAddress)
            sSQL = sSQL & " From Joint_Trial_Balance "
            sSQL = sSQL & " where Company_Id=" & clsVariables.CompnyId
            sSQL = sSQL & "  And ip_Address=" & aq(IPAddress + clsVariables.UserName)
            sSQL = sSQL & " group by Account_Id"
            sSQL = sSQL & " having (Sum(Ho_Dr)-sum(HO_Cr))<0"
            ob.Execute(sSQL, ob.getconnection)

        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    'Public Sub PrepareTrialBalanceWithVatAccount(ByVal asondate As Date, Optional ByVal checkstock As Boolean = False)
    '    Try
    '        Dim sSQL As String
    '        Dim rst As New DataTable
    '        Dim conds As String = ""


    '        Dim dOpening As Double
    '        sSQL = "DELETE FROM Joint_Trial_Balance where Company_id=" & clsVariables.CompnyId
    '        sSQL = sSQL & " and ip_Address=" & aq(IPAddress + clsVariables.UserName)
    '        ob.Execute(sSQL, ob.getconnection(ob.Getconn))
    '        '********** HO Trial Balance Data
    '        dOpening = 0
    '        If MdiMain.ComboDept.SelectedValue = 1 Then
    '            conds = "Select Account_Id From Account_master where Company_id=" & clsVariables.CompnyId & " and Department_id in (1,7,8,10,11,12)"
    '        Else
    '            conds = "Select Account_Id From Account_master where Company_id=" & clsVariables.CompnyId & " and Department_id=" & Val(MdiMain.ComboDept.SelectedValue) & ""
    '        End If


    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Account_Id,Dr_Opening,Cr_opening," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " FROM Final_Account_Opening_Balance  where Company_id=" & clsVariables.CompnyId
    '        sSQL = sSQL & " and Year_id=" & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & " and Account_Id in (" & conds & ")"
    '        sSQL = sSQL & "  ORDER BY  account_id"
    '        ob.Execute(sSQL, ob.getconnection)

    '        ''''' UpTo Current Date
    '        '    'Cash Data Posting
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Account_Id,sum(Payment_Amt),sum(Receipt_Amt)," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " FROM Final_Rojmal_Data  "
    '        sSQL = sSQL & " WHERE company_id = " & clsVariables.CompnyId
    '        sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & " and account_id <> 0 and doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and Account_Id in (" & conds & ")"
    '        sSQL = sSQL & " group by Account_id ORDER BY Account_id"
    '        ob.Execute(sSQL, ob.getconnection)


    '        'Cash Book Data Posting
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & "Select " & clsVariables.CompnyId & ",bm.Account_id,sum(Receipt_Amt),sum(Payment_Amt)," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " FROM Final_Rojmal_Data as rj,Book_Master  as bm,Voucher_Master as Vm "
    '        sSQL = sSQL & " WHERE rj.company_id=bm.company_id and rj.book_id=bm.book_id and rj.Company_Id=vm.Company_Id and  rj.Doc_type=vm.Doc_type "
    '        sSQL = sSQL & " and rj.company_id = " & clsVariables.CompnyId
    '        sSQL = sSQL & " and rj.year_id=" & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & " and doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and bm.Account_Id in (" & conds & ")"
    '        sSQL = sSQL & "   group by bm.Account_id ORDER BY bm.Account_id"
    '        ob.Execute(sSQL, ob.getconnection)



    '        'Bank Account Data Posting
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Account_id,sum(Payment_Amt),sum(Receipt_Amt)," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " FROM Bank_Main  as bm, Bank_Detail  as bd"
    '        sSQL = sSQL & " WHERE bm.Company_id = bd.Company_id and bm.Doc_Type = bd.Doc_Type and bm.Doc_No=bd.Doc_no and bm.Year_Id=bd.Year_id"
    '        sSQL = sSQL & "  and  bm.company_id = " & clsVariables.CompnyId
    '        sSQL = sSQL & "  and  bm.Year_id = " & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & " and account_id <> 0 and doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and Account_Id in (" & conds & ")"
    '        sSQL = sSQL & "  group by Account_id ORDER BY Account_id"
    '        ob.Execute(sSQL, ob.getconnection())



    '        'Bank Book Data Posting
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & "Select " & clsVariables.CompnyId & ",bkm.Account_id,sum(Receipt_Amt),sum(Payment_Amt)," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " FROM Bank_Main  as bm,Bank_Detail  as bd,Book_Master  as bkm "
    '        sSQL = sSQL & " WHERE bm.Company_id = bd.Company_id and bm.Doc_Type = bd.Doc_Type and bm.Doc_No=bd.Doc_no and bm.Year_id=bd.Year_id and bm.company_id=bkm.company_id and bm.book_id=bkm.book_id"
    '        sSQL = sSQL & "  and bm.Year_id = " & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & "  and bm.company_id = " & clsVariables.CompnyId
    '        sSQL = sSQL & " and doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and bkm.Account_Id in (" & conds & ")"
    '        sSQL = sSQL & "  group by bkm.Account_id ORDER BY bkm.Account_id"
    '        ob.Execute(sSQL, ob.getconnection)



    '        'Journal Data Posting
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Account_id,sum(Payment_Amt),sum(Receipt_Amt)," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " FROM Final_Journal_Main   as bm, Final_Journal_Detail  as bd "
    '        sSQL = sSQL & " WHERE bm.Company_id = bd.Company_id and bm.Doc_Type = bd.Doc_Type and bm.Doc_No=bd.Doc_no and bm.Year_Id=bd.Year_id "
    '        sSQL = sSQL & " and  bm.company_id = " & clsVariables.CompnyId
    '        sSQL = sSQL & " and  bm.Year_id = " & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & " and account_id <> 0 and doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and Account_Id in (" & conds & ")"
    '        sSQL = sSQL & "  group by Account_id ORDER BY Account_id"
    '        ob.Execute(sSQL, ob.getconnection())





    '        'Kvn For Supplier Account
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & "Select " & clsVariables.CompnyId & ",KM.Account_id,0,sum(Net_Amt)," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " FROM KVN_Main as Km Inner Join Voucher_Master as Vm  "
    '        sSQL = sSQL & " On KM.Company_Id=Vm.Company_ID and KM.Doc_type=Vm.Doc_type "
    '        sSQL = sSQL & " WHERE KM.company_id = " & clsVariables.CompnyId
    '        sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & " and km.Account_id <> 0 and doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and KM.Account_id in (" & conds & ")"
    '        sSQL = sSQL & "   group by KM.Account_id ORDER BY KM.Account_id"
    '        ob.Execute(sSQL, ob.getconnection)

    '        'Purchase Acc Without Kathar Dept 
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Qm.Pur_Account_id ,SUM(isnull(KID.NET_amt,0) - isnull(KID.Add_VAT_Amt,0) - isnull(KID.Vat_amt,0) - ((CASE WHEN Vadtar_Main <> 0 THEN Amount * Vadtar_Main / Doc_Amt ELSE 0 END))),0," & aq(IPAddress + clsVariables.UserName)
    '        'sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Qm.Pur_Account_id ,SUM(KID.NET_amt - KID.Add_VAT_Amt - KID.Vat_amt - ROUND((CASE WHEN Vadtar_Main <> 0 THEN Amount * Vadtar_Main / Doc_Amt ELSE 0 END), 2)),0," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " from KVN_MAIN AS KM INNER JOIN"
    '        sSQL = sSQL & " KVN_ITEM_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
    '        sSQL = sSQL & " KM.Doc_No = KID.Doc_No INNER JOIN"
    '        sSQL = sSQL & " ITEM_MASTER AS Im ON KID.Item_id = Im.Item_Id AND KID.Company_Id = Im.Company_Id Left Outer JOIN"
    '        sSQL = sSQL & " QUALITY_MASTER AS Qm ON Im.Company_Id = Qm.Company_Id AND Im.Quality_id = Qm.Quality_Id"
    '        sSQL = sSQL & " Left Outer Join Voucher_Master as  Vm On km.Company_Id=vm.Company_id and Km.doc_type = vm.Doc_type"
    '        sSQL = sSQL & " where KM.Company_Id=" & clsVariables.CompnyId
    '        sSQL = sSQL & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and Qm.Pur_Account_id<>0"
    '        sSQL = sSQL & " and Qm.Pur_Account_id in (" & conds & ")"
    '        sSQL = sSQL & " and Vm.Department_ID <> 8"
    '        sSQL = sSQL & " GROUP BY Qm.Pur_Account_id"
    '        sSQL = sSQL & " having isnull(SUM(KID.NET_amt - KID.Add_VAT_Amt - KID.Vat_amt - ((CASE WHEN Vadtar_Main <> 0 THEN Amount * Vadtar_Main / Doc_Amt ELSE 0 END))),0)<>0"
    '        sSQL = sSQL & " Order BY Qm.Pur_Account_id"
    '        ob.Execute(sSQL, ob.getconnection())


    '        'Purchase Acc For khatar Dept
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Qm.Pur_Account_id,sum(isnull(kd.Net_amt,0) - isnull(KD.Add_VAT_Amt,0) - isnull(KD.Vat_amt,0))-SUM(((CASE WHEN Freight_Main <> 0 THEN Amount * Freight_Main / Doc_Amt ELSE 0 END)))+sum(((CASE WHEN Vadtar_Main <> 0 THEN Amount * Vadtar_Main / Doc_Amt ELSE 0 END))),0," & aq(IPAddress + clsVariables.UserName)
    '        'sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Qm.Pur_Account_id,sum(kd.Net_amt)-sum(Kd.Vat_amt)-sum(Kd.Add_Vat_amt)-SUM(ROUND((CASE WHEN Freight_Main <> 0 THEN Amount * Freight_Main / Doc_Amt ELSE 0 END), 2))-sum(ROUND((CASE WHEN Vadtar_Main <> 0 THEN Amount * Vadtar_Main / Doc_Amt ELSE 0 END), 2)),0," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " FROM KVN_MAIN AS Km INNER JOIN"
    '        sSQL = sSQL & " KVN_ITEM_DETAIL AS KD ON Km.Company_Id = KD.Company_Id  AND KM.Year_id = KD.Year_id AND Km.Doc_Type = KD.Doc_Type AND Km.Doc_No = KD.Doc_No LEFT OUTER JOIN"
    '        sSQL = sSQL & " ITEM_MASTER AS IM ON KD.Company_Id = IM.Company_Id AND KD.Item_id = IM.Item_Id LEFT OUTER JOIN"
    '        sSQL = sSQL & " QUALITY_MASTER AS Qm ON IM.Company_Id = Qm.Company_Id AND IM.Quality_id = Qm.Quality_Id Left Outer join"
    '        sSQL = sSQL & " Voucher_Master as VM On km.company_Id=Vm.Company_Id and Km.doc_type=Vm.doc_type"
    '        sSQL = sSQL & " WHERE "
    '        sSQL = sSQL & "  Km.Company_Id=" & clsVariables.CompnyId & ""
    '        sSQL = sSQL & " and Km.Year_Id=" & aq(clsVariables.WorkingYear) & ""
    '        sSQL = sSQL & " and Vm.Department_Id=8"
    '        sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and Qm.Pur_Account_id<>0"
    '        sSQL = sSQL & " and Qm.Pur_Account_id in (" & conds & ")"
    '        sSQL = sSQL & " GROUP BY Qm.Pur_Account_id"
    '        sSQL = sSQL & " having sum(isnull(kd.Net_amt,0) - isnull(KD.Add_VAT_Amt,0) - isnull(KD.Vat_amt,0))-SUM(((CASE WHEN Freight_Main <> 0 THEN Amount * Freight_Main / Doc_Amt ELSE 0 END)))+sum(((CASE WHEN Vadtar_Main <> 0 THEN Amount * Vadtar_Main / Doc_Amt ELSE 0 END))) <> 0"
    '        ob.Execute(sSQL, ob.getconnection())

    '        ''Purchase Vat Account
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Dm.Vat_Account_id,SUM(KID.Vat_amt),0," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " from KVN_MAIN AS KM INNER JOIN"
    '        sSQL = sSQL & " KVN_ITEM_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
    '        sSQL = sSQL & " KM.Doc_No = KID.Doc_No "
    '        sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
    '        sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
    '        sSQL = sSQL & " where KM.Company_Id=" & clsVariables.CompnyId
    '        sSQL = sSQL & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and Dm.vat_Account_id in (" & conds & ")"
    '        sSQL = sSQL & " and Vat_Account_id <>0"
    '        sSQL = sSQL & " Group by Dm.vat_Account_id"
    '        sSQL = sSQL & " having isnull(sum(kid.Vat_Amt),0)<>0"
    '        ob.Execute(sSQL, ob.getconnection())

    '        ''Purchase Add Vat Account

    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Dm.Add_Vat_Account_id,SUM(KID.Add_Vat_amt),0," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " from KVN_MAIN AS KM INNER JOIN"
    '        sSQL = sSQL & " KVN_ITEM_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
    '        sSQL = sSQL & " KM.Doc_No = KID.Doc_No "
    '        sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
    '        sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
    '        sSQL = sSQL & " where KM.Company_Id=" & clsVariables.CompnyId
    '        sSQL = sSQL & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and Dm.Add_vat_Account_id in (" & conds & ")"
    '        sSQL = sSQL & " and Add_vat_Account_id <>0"
    '        sSQL = sSQL & " Group by Dm.Add_vat_Account_Id"
    '        sSQL = sSQL & " having isnull(sum(KID.Add_vat_Amt),0)<>0"
    '        ob.Execute(sSQL, ob.getconnection)


    '        'Purchase Add Account
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Dm.Oth_Account_id,Sum(km.Add_Amt),0," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " from KVN_main as km"
    '        sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
    '        sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
    '        sSQL = sSQL & " where km.Company_Id=" & clsVariables.CompnyId
    '        sSQL = sSQL & " and km.Year_id=" & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & " and km.doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and Dm.Oth_Account_id in (" & conds & ")"
    '        sSQL = sSQL & " and  Dm.Oth_Account_id<> 0"
    '        'sSQL = sSQL & " and Vm.Department_Id<>8"
    '        sSQL = sSQL & " Group by Dm.Oth_Account_id"
    '        sSQL = sSQL & " having isnull(sum(km.Add_Amt),0)<>0"
    '        ob.Execute(sSQL, ob.getconnection())

    '        'purchase Less Amount
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & "Select " & clsVariables.CompnyId & ",Dm.Oth_Account_id,0,Sum(km.Less_Amt)," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " from KVN_main as km"
    '        sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
    '        sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
    '        sSQL = sSQL & " where km.Company_Id=" & clsVariables.CompnyId
    '        sSQL = sSQL & " and km.Year_id=" & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & " and km.doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and Dm.Oth_Account_id in (" & conds & ")"
    '        sSQL = sSQL & " and Dm.Oth_Account_id<>0"
    '        'sSQL = sSQL & " and Vm.Department_Id<>8"
    '        sSQL = sSQL & " Group by Dm.Oth_Account_id"
    '        sSQL = sSQL & " having isnull(sum(km.Less_Amt),0)<>0"
    '        ob.Execute(sSQL, ob.getconnection)



    '        'Pruchase Freight Account WithOut Khatar 
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & "Select " & clsVariables.CompnyId & ", Dm.Freight_Account_id,Sum(km.Freight_main),0," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " from KVN_main as km"
    '        sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
    '        sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
    '        sSQL = sSQL & " where km.Company_Id=" & clsVariables.CompnyId
    '        sSQL = sSQL & " and km.Year_id=" & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & " and km.doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and Dm.Freight_Account_id in (" & conds & ")"
    '        sSQL = sSQL & " and Dm.Freight_Account_id<>0"
    '        sSQL = sSQL & " and vm.Department_Id<> 8"
    '        sSQL = sSQL & " Group by Dm.Freight_Account_id "
    '        sSQL = sSQL & " having isnull(sum(km.Freight_main),0)<>0"
    '        ob.Execute(sSQL, ob.getconnection())

    '        'Rent Sales Data Customer Account
    '        'Sales Customer Account 
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & "Select " & clsVariables.CompnyId & ", sm.Account_id,sum(Net_Amt),0," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " FROM Rent_Sales_Data Sm Inner Join Voucher_MAster as Vm "
    '        sSQL = sSQL & " On sm.Company_Id=vm.company_ID and sm.Doc_type=vm.Doc_type "
    '        sSQL = sSQL & "  WHERE sM.company_id = " & clsVariables.CompnyId
    '        sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & " and Sm.account_id <> 0 and doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and sm.Account_id in (" & conds & ")"
    '        sSQL = sSQL & " group by Sm.Account_id "
    '        sSQL = sSQL & " having sum(Net_Amt)<>0 "
    '        sSQL = sSQL & " ORDER BY Sm.Account_id "
    '        ob.Execute(sSQL, ob.getconnection)
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & "Select " & clsVariables.CompnyId & ", sm.TDS_Ac_id,sum(TDS_Amt),0," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " FROM Rent_Sales_Data Sm Inner Join Voucher_MAster as Vm "
    '        sSQL = sSQL & " On sm.Company_Id=vm.company_ID and sm.Doc_type=vm.Doc_type "
    '        sSQL = sSQL & "  WHERE sM.company_id = " & clsVariables.CompnyId
    '        sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & " and Sm.TDS_Ac_id <> 0 and doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and sm.TDS_Ac_id in (" & conds & ")"
    '        sSQL = sSQL & " group by Sm.TDS_Ac_id "
    '        sSQL = sSQL & " having sum(TDS_Amt)<>0 "
    '        sSQL = sSQL & " ORDER BY Sm.TDS_Ac_id "
    '        ob.Execute(sSQL, ob.getconnection)
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & "Select " & clsVariables.CompnyId & ", sm.Rent_Ac_Id,0,sum(Amount)," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " FROM Rent_Sales_Data Sm Inner Join Voucher_MAster as Vm "
    '        sSQL = sSQL & " On sm.Company_Id=vm.company_ID and sm.Doc_type=vm.Doc_type "
    '        sSQL = sSQL & "  WHERE sM.company_id = " & clsVariables.CompnyId
    '        sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & " and Sm.Rent_Ac_Id <> 0 and doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and sm.Rent_Ac_Id in (" & conds & ")"
    '        sSQL = sSQL & " group by Sm.Rent_Ac_Id "
    '        sSQL = sSQL & " having sum(Amount)<>0 "
    '        sSQL = sSQL & " ORDER BY Sm.Rent_Ac_Id "
    '        ob.Execute(sSQL, ob.getconnection)
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & "Select " & clsVariables.CompnyId & ", sm.Ser_tax_Ac_Id,0,sum(Ser_tax_Amt)," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " FROM Rent_Sales_Data Sm Inner Join Voucher_MAster as Vm "
    '        sSQL = sSQL & " On sm.Company_Id=vm.company_ID and sm.Doc_type=vm.Doc_type "
    '        sSQL = sSQL & "  WHERE sM.company_id = " & clsVariables.CompnyId
    '        sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & " and Sm.Ser_tax_Ac_Id <> 0 and doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and sm.Ser_tax_Ac_Id in (" & conds & ")"
    '        sSQL = sSQL & " group by Sm.Ser_tax_Ac_Id "
    '        sSQL = sSQL & " having sum(Ser_tax_Amt)<>0 "
    '        sSQL = sSQL & " ORDER BY Sm.Ser_tax_Ac_Id "
    '        ob.Execute(sSQL, ob.getconnection)
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & "Select " & clsVariables.CompnyId & ", sm.Edu_Sess_Ac_Id,0,sum(Edu_Sess_Amt)," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " FROM Rent_Sales_Data Sm Inner Join Voucher_MAster as Vm "
    '        sSQL = sSQL & " On sm.Company_Id=vm.company_ID and sm.Doc_type=vm.Doc_type "
    '        sSQL = sSQL & "  WHERE sM.company_id = " & clsVariables.CompnyId
    '        sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & " and Sm.Edu_Sess_Ac_Id <> 0 and doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and sm.Edu_Sess_Ac_Id in (" & conds & ")"
    '        sSQL = sSQL & " group by Sm.Edu_Sess_Ac_Id "
    '        sSQL = sSQL & " having sum(Edu_Sess_Amt)<>0 "
    '        sSQL = sSQL & " ORDER BY Sm.Edu_Sess_Ac_Id "
    '        ob.Execute(sSQL, ob.getconnection)
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & "Select " & clsVariables.CompnyId & ", sm.H_Edu_Sess_Ac_Id,0,sum(h_Edu_Sess_Amt)," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " FROM Rent_Sales_Data Sm Inner Join Voucher_MAster as Vm "
    '        sSQL = sSQL & " On sm.Company_Id=vm.company_ID and sm.Doc_type=vm.Doc_type "
    '        sSQL = sSQL & "  WHERE sM.company_id = " & clsVariables.CompnyId
    '        sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & " and Sm.H_Edu_Sess_Ac_Id <> 0 and doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and sm.H_Edu_Sess_Ac_Id in (" & conds & ")"
    '        sSQL = sSQL & " group by Sm.H_Edu_Sess_Ac_Id "
    '        sSQL = sSQL & " having sum(h_Edu_Sess_Amt)<>0 "
    '        sSQL = sSQL & " ORDER BY Sm.H_Edu_Sess_Ac_Id "
    '        ob.Execute(sSQL, ob.getconnection)


    '        'Sales Customer Account 
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & "Select " & clsVariables.CompnyId & ", sm.Account_id,sum(Net_Amt),0," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " FROM Sales_Main Sm Inner Join Voucher_MAster as Vm "
    '        sSQL = sSQL & " On sm.Company_Id=vm.company_ID and sm.Doc_type=vm.Doc_type "
    '        sSQL = sSQL & "  WHERE sM.company_id = " & clsVariables.CompnyId
    '        sSQL = sSQL & " and year_id=" & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & " and Sm.account_id <> 0 and doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and sm.Account_id in (" & conds & ")"
    '        sSQL = sSQL & " and sm.Account_ID <> 0"
    '        sSQL = sSQL & " group by Sm.Account_id "
    '        sSQL = sSQL & " having sum(Net_Amt)<>0 "
    '        sSQL = sSQL & " ORDER BY Sm.Account_id "
    '        ob.Execute(sSQL, ob.getconnection)

    '        'Sales Quality Acc 
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & "Select " & clsVariables.CompnyId & ", Qm.Sal_Account_id,0,SUM(isnull(KID.NET_amt,0) - isnull(KID.Add_VAT_Amt,0) - isnull(KID.Vat_amt,0) - ((CASE WHEN Vadtar_Main <> 0 THEN KiD.Amount * KM.Vadtar_Main / KM.Doc_Amt ELSE 0 END))) ," & aq(IPAddress + clsVariables.UserName)
    '        'sSQL = sSQL & "Select " & clsVariables.CompnyId & ", Qm.Sal_Account_id,0,SUM(KID.NET_amt - KID.Add_VAT_Amt - KID.Vat_amt - ROUND((CASE WHEN Vadtar_Main <> 0 THEN KiD.Amount * KM.Vadtar_Main / KM.Doc_Amt ELSE 0 END), 2)) ," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " from Sales_MAIN AS KM INNER JOIN"
    '        sSQL = sSQL & " Sales_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
    '        sSQL = sSQL & " KM.Doc_No = KID.Doc_No INNER JOIN "
    '        sSQL = sSQL & " Voucher_MAster as VM On KM.company_ID=Vm.Company_Id and Km.Doc_type= Vm.doc_type Left Outer Join"
    '        sSQL = sSQL & " ITEM_MASTER AS Im ON KID.Item_id = Im.Item_Id AND KID.Company_Id = Im.Company_Id Left Outer JOIN"
    '        sSQL = sSQL & " QUALITY_MASTER AS Qm ON Im.Company_Id = Qm.Company_Id AND Im.Quality_id = Qm.Quality_Id "
    '        sSQL = sSQL & " where KM.Company_Id=" & clsVariables.CompnyId
    '        sSQL = sSQL & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and Qm.Sal_Account_id<>0"
    '        sSQL = sSQL & " and Qm.Sal_Account_id in (" & conds & ")"
    '        sSQL = sSQL & " and Qm.Sal_Account_id<>0"
    '        sSQL = sSQL & " and Vm.Department_ID<>8"
    '        sSQL = sSQL & " GROUP BY Qm.Sal_Account_id"
    '        sSQL = sSQL & " having isnull(SUM(isnull(KID.NET_amt,0) - isnull(KID.Add_VAT_Amt,0) - isnull(KID.Vat_amt,0) -  ((CASE WHEN Vadtar_Main <> 0 THEN isnull(KiD.Amount,0) * isnull(KM.Vadtar_Main,0) / KM.Doc_Amt ELSE 0 END))),0)<>0"
    '        'sSQL = sSQL & " having isnull(SUM(KID.NET_amt - KID.Add_VAT_Amt - KID.Vat_amt - ROUND((CASE WHEN Vadtar_Main <> 0 THEN KiD.Amount * KM.Vadtar_Main / KM.Doc_Amt ELSE 0 END), 2)),0)<>0"
    '        sSQL = sSQL & " Order BY Qm.Sal_Account_id"
    '        ob.Execute(sSQL, ob.getconnection)



    '        'Sales For Khatar Dept 
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & "Select " & clsVariables.CompnyId & ", Qm.Sal_Account_id,0,sum(isnull(KD.NET_amt,0) - isnull(KD.Add_VAT_Amt,0) - isnull(KD.Vat_amt,0))-SUM(((CASE WHEN isnull(Freight_Main,0) <> 0 THEN isnull(KD.Amount,0) * isnull(KM.Freight_Main,0) / KM.Doc_Amt ELSE 0 END)))-SUM(((CASE WHEN isnull(Vadtar_Main,0) <> 0 THEN isnull(KD.Amount,0) * isnull(KM.Vadtar_Main,0) / KM.Doc_Amt ELSE 0 END)))," & aq(IPAddress + clsVariables.UserName)
    '        'sSQL = sSQL & "Select " & clsVariables.CompnyId & ", Qm.Sal_Account_id,0,sum(kd.Net_amt)-sum(Kd.Vat_amt)- sum(Kd.Add_Vat_amt)-SUM(ROUND((CASE WHEN Freight_Main <> 0 THEN KD.Amount * KM.Freight_Main / KM.Doc_Amt ELSE 0 END), 2))-SUM(ROUND((CASE WHEN Vadtar_Main <> 0 THEN KD.Amount * KM.Vadtar_Main / KM.Doc_Amt ELSE 0 END), 2))," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " FROM            Sales_MAIN AS Km INNER JOIN"
    '        sSQL = sSQL & "          SALES_DETAIL AS KD ON Km.Company_Id = KD.Company_Id AND Km.Year_id = KD.Year_id AND Km.Doc_Type = KD.Doc_Type AND Km.Doc_No = KD.Doc_No LEFT OUTER JOIN"
    '        sSQL = sSQL & " ITEM_MASTER AS IM ON KD.Company_Id = IM.Company_Id AND KD.Item_id = IM.Item_Id LEFT OUTER JOIN"
    '        sSQL = sSQL & " QUALITY_MASTER AS Qm ON IM.Company_Id = Qm.Company_Id AND IM.Quality_id = Qm.Quality_Id Left Outer join"
    '        sSQL = sSQL & " Voucher_Master as VM On km.company_Id=Vm.Company_Id and Km.doc_type=Vm.doc_type"
    '        sSQL = sSQL & " WHERE "
    '        sSQL = sSQL & "  Km.Company_Id=" & clsVariables.CompnyId & ""
    '        sSQL = sSQL & " and Km.Year_Id=" & aq(clsVariables.WorkingYear) & ""
    '        sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and Qm.Sal_Account_id<>0"
    '        sSQL = sSQL & " and Qm.Sal_Account_id in (" & conds & ")"
    '        sSQL = sSQL & " and Qm.Sal_Account_id<>0"
    '        sSQL = sSQL & " and VM.Department_Id=8"
    '        sSQL = sSQL & " GROUP BY Qm.Sal_Account_id"
    '        sSQL = sSQL & " having sum(isnull(KD.NET_amt,0) - isnull(KD.Add_VAT_Amt,0) - isnull(KD.Vat_amt,0))- SUM(((CASE WHEN isnull(Freight_Main,0) <> 0 THEN isnull(KD.Amount,0) * isnull(KM.Freight_Main,0) / KM.Doc_Amt ELSE 0 END)))- SUM(((CASE WHEN isnull(Vadtar_Main,0) <> 0 THEN isnull(KD.Amount,0) * isnull(KM.Vadtar_Main,0) / KM.Doc_Amt ELSE 0 END))) <> 0"
    '        ob.Execute(sSQL, ob.getconnection)






    '        ''Sales Vat Acc 
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Dm.Vat_Account_id ,0,SUM(KID.Vat_amt)," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " from Sales_MAIN AS KM INNER JOIN"
    '        sSQL = sSQL & " Sales_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
    '        sSQL = sSQL & " KM.Doc_No = KID.Doc_No "
    '        sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
    '        sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
    '        sSQL = sSQL & " where KM.Company_Id=" & clsVariables.CompnyId
    '        sSQL = sSQL & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and Dm.vat_Account_id in (" & conds & ")"
    '        sSQL = sSQL & " and Dm.Vat_Account_id<>0"
    '        sSQL = sSQL & " Group by Dm.vat_Account_id"
    '        sSQL = sSQL & " having isnull(sum(kid.Vat_Amt),0)<>0"
    '        ob.Execute(sSQL, ob.getconnection())


    '        ''Sales Add Vat Acc 
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Dm.Add_Vat_Account_id,0,SUM(KID.Add_Vat_amt)," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " from Sales_MAIN AS KM INNER JOIN"
    '        sSQL = sSQL & " Sales_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
    '        sSQL = sSQL & " KM.Doc_No = KID.Doc_No "
    '        sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
    '        sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
    '        sSQL = sSQL & " where KM.Company_Id=" & clsVariables.CompnyId
    '        sSQL = sSQL & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & " and KM.doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and Dm.Add_vat_Account_id in (" & conds & ")"
    '        sSQL = sSQL & " and Dm.Add_Vat_Account_id <>0"
    '        sSQL = sSQL & " Group by Dm.Add_Vat_Account_Id"
    '        sSQL = sSQL & " having isnull(sum(KID.Add_vat_Amt),0)<>0"
    '        ob.Execute(sSQL, ob.getconnection)

    '        'Sales Round Of Account for Add 
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Dm.Oth_Account_id,0,Sum(km.Add_Amt)," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " from Sales_main as Km "
    '        sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
    '        sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
    '        sSQL = sSQL & "where km.Company_Id=" & clsVariables.CompnyId
    '        sSQL = sSQL & " and km.Year_id=" & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & " and km.doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and Dm.Oth_Account_id in (" & conds & ")"
    '        sSQL = sSQL & " and Dm.Oth_Account_id<>0 "
    '        sSQL = sSQL & " Group by Dm.Oth_Account_Id"
    '        sSQL = sSQL & " having isnull(sum(km.Add_Amt),0)<>0"
    '        ob.Execute(sSQL, ob.getconnection)

    '        'Sales Round Of Account for Less
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Dm.Oth_Account_id,Sum(km.Less_Amt),0," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " from Sales_main as Km "
    '        sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
    '        sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
    '        sSQL = sSQL & "where km.Company_Id=" & clsVariables.CompnyId
    '        sSQL = sSQL & " and km.Year_id=" & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & " and km.doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and Dm.Oth_Account_id in (" & conds & ")"
    '        sSQL = sSQL & " and Dm.Oth_Account_id<>0"
    '        sSQL = sSQL & " Group by Dm.Oth_Account_id"
    '        sSQL = sSQL & " having isnull(sum(km.Less_Amt),0)<>0"
    '        ob.Execute(sSQL, ob.getconnection)



    '        'sales For Freight Acc WithOut Khatar Dept
    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Dm.Freight_Account_id,0,Sum(Freight_Main)," & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " from Sales_main as Km "
    '        sSQL = sSQL & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
    '        sSQL = sSQL & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
    '        sSQL = sSQL & " where km.Company_Id=" & clsVariables.CompnyId
    '        sSQL = sSQL & " and km.Year_id=" & aq(clsVariables.WorkingYear)
    '        sSQL = sSQL & " and km.doc_date <= " & aq(asondate)
    '        sSQL = sSQL & " and Dm.Freight_Account_id in (" & conds & ")"
    '        sSQL = sSQL & " and Vm.Department_ID<>8 "
    '        sSQL = sSQL & " and Dm.Freight_Account_id<>0"
    '        sSQL = sSQL & " Group by Dm.Freight_Account_id"
    '        sSQL = sSQL & " having isnull(sum(km.Freight_Main),0)<>0"
    '        ob.Execute(sSQL, ob.getconnection)

    '        If SAVINGSYSTEM = True Then
    '            'saving receipt Data Credit 
    '            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Cm.Account_id,0,Sum(RD.Amount)," & aq(IPAddress + clsVariables.UserName)
    '            sSQL = sSQL & " From SAVING_RECEIPT_MAIN as Rm Inner Join SAVING_RECEIPT_DETAIL as Rd On "
    '            sSQL = sSQL & " Rm.Company_Id=Rd.Company_Id And Rm.Year_Id=Rd.Year_Id And Rm.Doc_Type=Rd.Doc_Type And Rm.Doc_no=Rd.Doc_no "
    '            sSQL = sSQL & " Inner join Column_master as Cm On Rd.Company_id=Cm.Company_Id And Rd.Column_id=Cm.Column_Id"
    '            sSQL = sSQL & " Inner join Voucher_master as Vm On RM.Company_id=Vm.Company_Id And RM.Doc_Type=Vm.Doc_Type"
    '            sSQL = sSQL & " where Rm.COmpany_Id=" & clsVariables.CompnyId
    '            sSQL = sSQL & " and Rm.Year_Id=" & aq(clsVariables.WorkingYear)
    '            sSQL = sSQL & " and Rm.Doc_DAte<=" & aq(asondate)
    '            sSQL = sSQL & " and Cm.Account_Id in (" & conds & ")"
    '            sSQL = sSQL & " Group by Cm.Account_id"
    '            sSQL = sSQL & " having Sum(RD.Amount) <> 0"
    '            ob.Execute(sSQL, ob.getconnection)

    '            'saving receipt Data Debit 
    '            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Rm.Debit_Account_Id,Sum(RD.Amount),0," & aq(IPAddress + clsVariables.UserName)
    '            sSQL = sSQL & " From SAVING_RECEIPT_MAIN as Rm Inner Join SAVING_RECEIPT_DETAIL as Rd On "
    '            sSQL = sSQL & " Rm.Company_Id=Rd.Company_Id And Rm.Year_Id=Rd.Year_Id And Rm.Doc_Type=Rd.Doc_Type And Rm.Doc_no=Rd.Doc_no "
    '            sSQL = sSQL & " Inner join Column_master as Cm On Rd.Company_id=Cm.Company_Id And Rd.Column_id=Cm.Column_Id"
    '            sSQL = sSQL & " Inner join Voucher_master as Vm On RM.Company_id=Vm.Company_Id And RM.Doc_Type=Vm.Doc_Type"
    '            sSQL = sSQL & " where Rm.COmpany_Id=" & clsVariables.CompnyId
    '            sSQL = sSQL & " and Rm.Year_Id=" & aq(clsVariables.WorkingYear)
    '            sSQL = sSQL & " and Rm.Doc_DAte<=" & aq(asondate)
    '            sSQL = sSQL & " and Rm.Debit_Account_Id in (" & conds & ")"
    '            sSQL = sSQL & " Group by Rm.Debit_Account_Id"
    '            sSQL = sSQL & " having Sum(RD.Amount) <> 0"
    '            ob.Execute(sSQL, ob.getconnection)

    '            'saving Payment Data 
    '            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Cm.Account_id,Sum(RD.Amount),0," & aq(IPAddress + clsVariables.UserName)
    '            sSQL = sSQL & " From SAVING_Payment_MAIN as Rm Inner Join SAVING_Payment_DETAIL as Rd On "
    '            sSQL = sSQL & " Rm.Company_Id=Rd.Company_Id And Rm.Year_Id=Rd.Year_Id And Rm.Doc_Type=Rd.Doc_Type And Rm.Doc_no=Rd.Doc_no "
    '            sSQL = sSQL & " Inner join Column_master as Cm On Rd.Company_id=Cm.Company_Id And Rd.Column_id=Cm.Column_Id"
    '            sSQL = sSQL & " Inner join Voucher_master as Vm On RM.Company_id=Vm.Company_Id And RM.Doc_Type=Vm.Doc_Type"
    '            sSQL = sSQL & " where Rm.COmpany_Id=" & clsVariables.CompnyId
    '            sSQL = sSQL & " and Rm.Year_Id=" & aq(clsVariables.WorkingYear)
    '            sSQL = sSQL & " and Rm.Doc_DAte<=" & aq(asondate)
    '            sSQL = sSQL & " and Cm.Account_Id in (" & conds & ")"
    '            sSQL = sSQL & " Group by Cm.Account_id"
    '            sSQL = sSQL & " having Sum(RD.Amount) <> 0 "
    '            ob.Execute(sSQL, ob.getconnection)

    '            'saving Payment Data Credit 
    '            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Rm.Credit_Account_Id,0,Sum(RD.Amount)," & aq(IPAddress + clsVariables.UserName)
    '            sSQL = sSQL & " From SAVING_Payment_MAIN as Rm Inner Join SAVING_Payment_DETAIL as Rd On "
    '            sSQL = sSQL & " Rm.Company_Id=Rd.Company_Id And Rm.Year_Id=Rd.Year_Id And Rm.Doc_Type=Rd.Doc_Type And Rm.Doc_no=Rd.Doc_no "
    '            sSQL = sSQL & " Inner join Column_master as Cm On Rd.Company_id=Cm.Company_Id And Rd.Column_id=Cm.Column_Id"
    '            sSQL = sSQL & " Inner join Voucher_master as Vm On RM.Company_id=Vm.Company_Id And RM.Doc_Type=Vm.Doc_Type"
    '            sSQL = sSQL & " where Rm.COmpany_Id=" & clsVariables.CompnyId
    '            sSQL = sSQL & " and Rm.Year_Id=" & aq(clsVariables.WorkingYear)
    '            sSQL = sSQL & " and Rm.Doc_DAte<=" & aq(asondate)
    '            sSQL = sSQL & " and Rm.Credit_Account_Id in (" & conds & ")"
    '            sSQL = sSQL & " Group by Rm.Credit_Account_Id"
    '            sSQL = sSQL & " having Sum(RD.Amount) <> 0 "
    '            ob.Execute(sSQL, ob.getconnection)
    '        End If


    '        If FixdSYSTEM = True Then
    '            'Fixd Receipt Opening
    '            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Cm.Account_id,0,Sum(FR.Amount)," & aq(IPAddress + clsVariables.UserName)
    '            sSQL = sSQL & " From Fixd_Receipt_Data as Fr Left Outer join Column_master as Cm On "
    '            sSQL = sSQL & " Fr.Company_Id=Cm.Company_id And Fr.Column_Id=Cm.Column_Id "
    '            sSQL = sSQL & " where Fr.Company_Id=" & clsVariables.CompnyId
    '            sSQL = sSQL & " and Fr.Year_Id=" & aq(clsVariables.WorkingYear)
    '            sSQL = sSQL & " and Fr.Doc_DAte<=" & aq(asondate)
    '            sSQL = sSQL & " and Cm.Account_id in (" & conds & ")"
    '            sSQL = sSQL & " Group by Cm.Account_id"
    '            sSQL = sSQL & " having Sum(FR.Amount) <> 0 "
    '            ob.Execute(sSQL, ob.getconnection)



    '            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",FR.Debit_Account_id,Sum(FR.Amount),0," & aq(IPAddress + clsVariables.UserName)
    '            sSQL = sSQL & " From Fixd_Receipt_Data as Fr Left Outer join Column_master as Cm On "
    '            sSQL = sSQL & " Fr.Company_Id=Cm.Company_id And Fr.Column_Id=Cm.Column_Id "
    '            sSQL = sSQL & " where Fr.Company_Id=" & clsVariables.CompnyId
    '            sSQL = sSQL & " and Fr.Year_Id=" & aq(clsVariables.WorkingYear)
    '            sSQL = sSQL & " and Fr.Doc_DAte<=" & aq(asondate)
    '            sSQL = sSQL & " and FR.Debit_Account_id in (" & conds & ")"
    '            sSQL = sSQL & " Group by FR.Debit_Account_id"
    '            ob.Execute(sSQL, ob.getconnection)

    '            'fixd payment
    '            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",Cm.Account_id,Sum(Fp.Fixd_Amt),0," & aq(IPAddress + clsVariables.UserName)
    '            sSQL = sSQL & " from Fixd_Payment_DAta as FP inner join Fixd_Balance as Fb on "
    '            sSQL = sSQL & " Fp.Company_Id=Fb.Company_Id And FP.Fixd_no=FB.Doc_no and Fp.Year_Id=Fb.Year_id"
    '            sSQL = sSQL & " left outer join Column_Master as CM On  "
    '            sSQL = sSQL & " Fb.COlumn_Id=CM.Column_Id and Fb.COmpany_id=Cm.COmpany_id"
    '            sSQL = sSQL & " where FP.Company_Id=" & clsVariables.CompnyId
    '            sSQL = sSQL & " and FP.Year_Id=" & aq(clsVariables.WorkingYear)
    '            sSQL = sSQL & " and FP.Doc_DAte<=" & aq(asondate)
    '            sSQL = sSQL & " and Cm.Account_id in (" & conds & ")"
    '            sSQL = sSQL & " Group by Cm.Account_id"
    '            ob.Execute(sSQL, ob.getconnection)

    '            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",fp.Interest_Account_ID,Sum(Fp.Interest_Amt),0," & aq(IPAddress + clsVariables.UserName)
    '            sSQL = sSQL & " from Fixd_Payment_DAta as FP inner join Fixd_Balance as Fb on "
    '            sSQL = sSQL & " Fp.Company_Id=Fb.Company_Id And FP.Fixd_no=FB.Doc_no and Fp.Year_Id=Fb.Year_id"
    '            sSQL = sSQL & " left outer join Column_Master as CM On  "
    '            sSQL = sSQL & " Fb.COlumn_Id=CM.Column_Id and Fb.COmpany_id=Cm.COmpany_id"
    '            sSQL = sSQL & " where FP.Company_Id=" & clsVariables.CompnyId
    '            sSQL = sSQL & " and FP.Year_Id=" & aq(clsVariables.WorkingYear)
    '            sSQL = sSQL & " and FP.Doc_DAte<=" & aq(asondate)
    '            sSQL = sSQL & " and fp.Interest_Account_ID in (" & conds & ")"
    '            sSQL = sSQL & " Group by Fp.Interest_Account_ID"
    '            sSQL = sSQL & " having Sum(Fp.Interest_Amt) <> 0"
    '            ob.Execute(sSQL, ob.getconnection)

    '            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",fp.Reserve_Interest_Account_ID,Sum(Fp.Interest_Reserve),0," & aq(IPAddress + clsVariables.UserName)
    '            sSQL = sSQL & " from Fixd_Payment_DAta as FP inner join Fixd_Balance as Fb on "
    '            sSQL = sSQL & " Fp.Company_Id=Fb.Company_Id And FP.Fixd_no=FB.Doc_no and Fp.Year_Id=Fb.Year_id"
    '            sSQL = sSQL & " left outer join Column_Master as CM On  "
    '            sSQL = sSQL & " Fb.COlumn_Id=CM.Column_Id and Fb.COmpany_id=Cm.COmpany_id"
    '            sSQL = sSQL & " where FP.Company_Id=" & clsVariables.CompnyId
    '            sSQL = sSQL & " and FP.Year_Id=" & aq(clsVariables.WorkingYear)
    '            sSQL = sSQL & " and FP.Doc_DAte<=" & aq(asondate)
    '            sSQL = sSQL & " and fp.Reserve_Interest_Account_ID in (" & conds & ")"
    '            sSQL = sSQL & " Group by Fp.Reserve_Interest_Account_ID"
    '            sSQL = sSQL & " having Sum(Fp.Interest_Reserve)<>0 "
    '            ob.Execute(sSQL, ob.getconnection)

    '            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",FP.Credit_Account_id,0,isnull(Sum(Fp.Fixd_Amt),0)+isnull(sum(fp.Interest_Amt),0)+isnull(sum(Fp.Interest_Reserve),0)," & aq(IPAddress + clsVariables.UserName)
    '            sSQL = sSQL & " from Fixd_Payment_DAta as FP inner join Fixd_Balance as Fb on "
    '            sSQL = sSQL & " Fp.Company_Id=Fb.Company_Id And FP.Fixd_no=FB.Doc_no and Fp.Year_Id=Fb.Year_id"
    '            sSQL = sSQL & " left outer join Column_Master as CM On  "
    '            sSQL = sSQL & " Fb.COlumn_Id=CM.Column_Id and Fb.COmpany_id=Cm.COmpany_id"
    '            sSQL = sSQL & " where FP.Company_Id=" & clsVariables.CompnyId
    '            sSQL = sSQL & " and FP.Year_Id=" & aq(clsVariables.WorkingYear)
    '            sSQL = sSQL & " and FP.Doc_DAte<=" & aq(asondate)
    '            sSQL = sSQL & " and Fp.Credit_Account_id in (" & conds & ")"
    '            sSQL = sSQL & " Group by Fp.Credit_Account_id"
    '            sSQL = sSQL & " having isnull(Sum(Fp.Fixd_Amt),0)+ isnull(sum(fp.Interest_Amt),0)+ isnull(sum(Fp.Interest_Reserve),0) <> 0 "
    '            ob.Execute(sSQL, ob.getconnection)

    '            'fixd Reserve payment
    '            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",fp.Reserve_Interest_Account_Id,Sum(Fp.Interest_Amt),0," & aq(IPAddress + clsVariables.UserName)
    '            sSQL = sSQL & " from FIXD_RESERVE_INTEREST_DATA as FP inner join Fixd_Balance as Fb on "
    '            sSQL = sSQL & " Fp.Company_Id=Fb.Company_Id And FP.Fixd_no=FB.Doc_no and Fp.Year_Id=Fb.Year_id"
    '            sSQL = sSQL & " left outer join Column_Master as CM On  "
    '            sSQL = sSQL & " Fb.COlumn_Id=CM.Column_Id and Fb.COmpany_id=Cm.COmpany_id"
    '            sSQL = sSQL & " where FP.Company_Id=" & clsVariables.CompnyId
    '            sSQL = sSQL & " and FP.Year_Id=" & aq(clsVariables.WorkingYear)
    '            sSQL = sSQL & " and FP.Doc_DAte<=" & aq(asondate)
    '            sSQL = sSQL & " and fp.Reserve_Interest_Account_Id in (" & conds & ")"
    '            sSQL = sSQL & " Group by Fp.Reserve_Interest_Account_Id"
    '            sSQL = sSQL & " having Sum(Fp.Interest_Amt) <> 0"
    '            ob.Execute(sSQL, ob.getconnection)

    '            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",fp.Credit_Account_id,0,Sum(Fp.Interest_Amt)," & aq(IPAddress + clsVariables.UserName)
    '            sSQL = sSQL & " from FIXD_RESERVE_INTEREST_DATA as FP inner join Fixd_Balance as Fb on "
    '            sSQL = sSQL & " Fp.Company_Id=Fb.Company_Id And FP.Fixd_no=FB.Doc_no and Fp.Year_Id=Fb.Year_id"
    '            sSQL = sSQL & " left outer join Column_Master as CM On  "
    '            sSQL = sSQL & " Fb.COlumn_Id=CM.Column_Id and Fb.COmpany_id=Cm.COmpany_id"
    '            sSQL = sSQL & " where FP.Company_Id=" & clsVariables.CompnyId
    '            sSQL = sSQL & " and FP.Year_Id=" & aq(clsVariables.WorkingYear)
    '            sSQL = sSQL & " and FP.Doc_DAte<=" & aq(asondate)
    '            sSQL = sSQL & " and fp.Credit_Account_id in (" & conds & ")"
    '            sSQL = sSQL & " Group by Fp.Credit_Account_id"
    '            sSQL = sSQL & " having Sum(Fp.Interest_Amt) <>0"
    '            ob.Execute(sSQL, ob.getconnection)
    '        End If


    '        If checkstock = False Then
    '            sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '            sSQL = sSQL & " Select " & clsVariables.CompnyId & ",CSD.Account_id ,Sum(CSD.Payment_Amt),sum(CSD.Receipt_Amt)," & aq(IPAddress + clsVariables.UserName) & "  from " & gClosing_Stock_Main & " as CSM Inner Join " & gClosing_Stock_Detail & " as CSD On "
    '            sSQL = sSQL & " CSM.Company_Id=CSD.Company_Id And CSm.Doc_no=CSd.Doc_no And CSm.YEar_Id=CSd.YEar_Id And CSm.Doc_Type=CSd.Doc_Type"
    '            sSQL = sSQL & " where CSM.Company_id=" & clsVariables.CompnyId
    '            sSQL = sSQL & " and CSM.Year_id=" & aq(clsVariables.WorkingYear)
    '            sSQL = sSQL & " and CSm.Doc_Date=" & aq(asondate)
    '            sSQL = sSQL & " and CSD.account_id in (" & conds & ")"
    '            sSQL = sSQL & " Group by CSd.Account_Id"
    '            ob.Execute(sSQL, ob.getconnection)
    '        End If

    '        If SHARESYSTEM = True Then
    '            If clsVariables.WorkingYear >= "2015-2016" Then
    '                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '                sSQL = sSQL & "sELECT " & clsVariables.CompnyId & ",rM.dEBIT_Account_Id,Doc_Amt,0," & aq(IPAddress + clsVariables.UserName)
    '                sSQL = sSQL & " FROM Dividend_Payment_main  as Rm "
    '                sSQL = sSQL & " where Rm.Company_id=" & clsVariables.CompnyId
    '                sSQL = sSQL & " and Rm.Year_id=" & aq(clsVariables.WorkingYear)
    '                sSQL = sSQL & " and RM.Doc_DAte<=" & aq(asondate)
    '                sSQL = sSQL & " and Rm.Debit_Account_Id in (" & conds & ")"
    '                ob.Execute(sSQL, ob.getconnection())

    '                sSQL = "INSERT INTO Joint_Trial_Balance (Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '                sSQL = sSQL & "sELECT " & clsVariables.CompnyId & ",rM.Credit_Account_Id,0,Doc_Amt," & aq(IPAddress + clsVariables.UserName)
    '                sSQL = sSQL & " FROM Dividend_Payment_main Rm "
    '                sSQL = sSQL & " where Rm.Company_id=" & clsVariables.CompnyId
    '                sSQL = sSQL & " and Rm.Year_id=" & aq(clsVariables.WorkingYear)
    '                sSQL = sSQL & " and Rm.Doc_DAte<=" & aq(asondate)
    '                sSQL = sSQL & " and Rm.Credit_Account_Id in (" & conds & ")"
    '                ob.Execute(sSQL, ob.getconnection())
    '                'CHANGE 30/01/2015 Pramod
    '                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '                sSQL = sSQL & "sELECT " & clsVariables.CompnyId & ",rM.dEBIT_Account_Id,Amount,0," & aq(IPAddress + clsVariables.UserName)
    '                sSQL = sSQL & " FROM Receipt_main as Rm inner join Receipt_Detail as Rd On "
    '                sSQL = sSQL & " Rm.Company_id=rd.Company_Id and Rm.Doc_no=Rd.Doc_no and Rm.year_id=rd.Year_Id"
    '                sSQL = sSQL & " where Rm.Company_id=" & clsVariables.CompnyId
    '                sSQL = sSQL & " and Rm.Year_id=" & aq(clsVariables.WorkingYear)
    '                sSQL = sSQL & " and RM.Doc_DAte<=" & aq(asondate)
    '                sSQL = sSQL & " and Rm.Debit_Account_Id in (" & conds & ")"
    '                ob.Execute(sSQL, ob.getconnection)

    '                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '                sSQL = sSQL & "sELECT " & clsVariables.CompnyId & ",rM.Credit_Account_Id,0,Amount," & aq(IPAddress + clsVariables.UserName)
    '                sSQL = sSQL & " FROM Receipt_main as Rm inner join Receipt_Detail as Rd On "
    '                sSQL = sSQL & " Rm.Company_id=rd.Company_Id and Rm.Doc_no=Rd.Doc_no and Rm.year_id=rd.Year_Id"
    '                sSQL = sSQL & " where Rm.Company_id=" & clsVariables.CompnyId
    '                sSQL = sSQL & " and Rm.Year_id=" & aq(clsVariables.WorkingYear)
    '                sSQL = sSQL & " and Rm.Doc_DAte<=" & aq(asondate)
    '                sSQL = sSQL & " and Rm.Credit_Account_Id in (" & conds & ")"
    '                ob.Execute(sSQL, ob.getconnection)

    '                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '                sSQL = sSQL & "sELECT " & clsVariables.CompnyId & ",ID.Debit_Account_Id,ID.Share_Amt,0," & aq(IPAddress + clsVariables.UserName)
    '                sSQL = sSQL & " FROM Inward_Data as ID"
    '                sSQL = sSQL & " where ID.Company_id=" & clsVariables.CompnyId
    '                sSQL = sSQL & " and ID.Year_id=" & aq(clsVariables.WorkingYear)
    '                sSQL = sSQL & " and ID.Doc_DAte<=" & aq(asondate)
    '                sSQL = sSQL & " and ID.Debit_Account_Id in (" & conds & ")"
    '                sSQL = sSQL & " and Share_Amt<>0"
    '                ob.Execute(sSQL, ob.getconnection)
    '                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '                sSQL = sSQL & "sELECT " & clsVariables.CompnyId & ",ID.Debit_Account_Id,ID.Admission_Fee,0," & aq(IPAddress + clsVariables.UserName)
    '                sSQL = sSQL & " FROM Inward_Data as ID"
    '                sSQL = sSQL & " where ID.Company_id=" & clsVariables.CompnyId
    '                sSQL = sSQL & " and ID.Year_id=" & aq(clsVariables.WorkingYear)
    '                sSQL = sSQL & " and ID.Doc_DAte<=" & aq(asondate)
    '                sSQL = sSQL & " and ID.Debit_Account_Id in (" & conds & ")"
    '                sSQL = sSQL & " and Admission_Fee<>0"
    '                ob.Execute(sSQL, ob.getconnection)

    '                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '                sSQL = sSQL & "sELECT " & clsVariables.CompnyId & ",ID.Share_Account_Id,0,ID.Share_Amt," & aq(IPAddress + clsVariables.UserName)
    '                sSQL = sSQL & " FROM Inward_Data as ID"
    '                sSQL = sSQL & " where ID.Company_id=" & clsVariables.CompnyId
    '                sSQL = sSQL & " and ID.Year_id=" & aq(clsVariables.WorkingYear)
    '                sSQL = sSQL & " and ID.Doc_DAte<=" & aq(asondate)
    '                sSQL = sSQL & " and ID.Share_Account_Id in (" & conds & ")"
    '                sSQL = sSQL & " and Share_Amt<>0"
    '                ob.Execute(sSQL, ob.getconnection)

    '                sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '                sSQL = sSQL & "sELECT " & clsVariables.CompnyId & ",ID.Admission_Fee_Account_Id,0,ID.Admission_Fee," & aq(IPAddress + clsVariables.UserName)
    '                sSQL = sSQL & " FROM Inward_Data as ID"
    '                sSQL = sSQL & " where ID.Company_id=" & clsVariables.CompnyId
    '                sSQL = sSQL & " and ID.Year_id=" & aq(clsVariables.WorkingYear)
    '                sSQL = sSQL & " and ID.Doc_DAte<=" & aq(asondate)
    '                sSQL = sSQL & " and ID.Admission_Fee_Account_Id in (" & conds & ")"
    '                sSQL = sSQL & " and Admission_Fee<>0"
    '                ob.Execute(sSQL, ob.getconnection)
    '            End If
    '        End If




    '        sSQL = "Delete from Joint_Trial_Balance where Company_Id=" & clsVariables.CompnyId
    '        sSQL = sSQL & " and Ip_Address=" & aq(IPAddress)
    '        ob.Execute(sSQL, ob.getconnection)

    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & " select " & clsVariables.CompnyId & ",Account_id,Sum(Ho_Dr)-sum(HO_Cr),0 ," & aq(IPAddress)
    '        sSQL = sSQL & " From Joint_Trial_Balance "
    '        sSQL = sSQL & " where Company_Id=" & clsVariables.CompnyId
    '        sSQL = sSQL & "  And ip_Address=" & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " group by Account_Id"
    '        sSQL = sSQL & " having (Sum(Ho_Dr)-sum(HO_Cr))>0"
    '        ob.Execute(sSQL, ob.getconnection)

    '        sSQL = "INSERT INTO Joint_Trial_Balance(Company_id,Account_Id,HO_Dr,Ho_Cr,ip_Address)"
    '        sSQL = sSQL & " select " & clsVariables.CompnyId & ",Account_id,0,abs(Sum(Ho_Dr)-sum(HO_Cr))," & aq(IPAddress)
    '        sSQL = sSQL & " From Joint_Trial_Balance "
    '        sSQL = sSQL & " where Company_Id=" & clsVariables.CompnyId
    '        sSQL = sSQL & "  And ip_Address=" & aq(IPAddress + clsVariables.UserName)
    '        sSQL = sSQL & " group by Account_Id"
    '        sSQL = sSQL & " having (Sum(Ho_Dr)-sum(HO_Cr))<0"
    '        ob.Execute(sSQL, ob.getconnection)

    '    Catch ex As Exception
    '        MsgBox(ex.Message.ToString)
    '    End Try
    'End Sub
    'Public Sub ReportParameterDeclaration(ByRef Ctrl As AxCrystal.AxCrystalReport)
    '    With Ctrl
    '        .Reset()
    '        .ReportFileName = ""
    '        .WindowTitle = ""
    '        .SelectionFormula = ""

    '        .WindowState = Crystal.WindowStateConstants.crptMaximized

    '        .WindowShowExportBtn = True
    '        .WindowShowPrintBtn = True
    '        .WindowShowPrintSetupBtn = True
    '        .WindowShowProgressCtls = True
    '        .WindowShowRefreshBtn = True
    '        .WindowShowSearchBtn = True
    '        .WindowShowZoomCtl = True
    '        Dim ssql As String
    '        ssql = "DSN=assdsn"
    '        If DbAuth <> "WIN" Then
    '            ssql = ssql & ";UID=advsys;PWD=advsys"
    '        End If
    '        ssql = ssql & ";DSQ=" & dbname
    '        .Connect = ssql
    '    End With
    'End Sub
    Public Function LoadMemberAccountBalance(ByVal Account_id As Integer, ByVal Member_id As Integer, ByVal AsonDate As Date, ByVal cnn As SqlClient.SqlConnection) As Decimal
        LoadMemberAccountBalance = 0
        Try
            Dim ssql As String
            If Val(Member_id) <> 0 Then


                ssql = " Select "
                ssql = ssql & "Sum(isnull(dr_opening,0)-isnull(Cr_opening,0))"
                ssql = ssql & " From Final_Party_Opening_balance"
                ssql = ssql & " where Company_id=" & clsVariables.CompnyId
                ssql = ssql & " and Year_id=" & aq(clsVariables.WorkingYear)
                ssql = ssql & " and member_Id=" & Val(Member_id)
                ssql = ssql & " and Account_id=" & Val(Account_id)
                LoadMemberAccountBalance = Val(ob.FindOneString(ssql, cnn))



                'cal inte 
                ssql = " Select "
                ssql = ssql & "sum(Pay_Amt)-sum(Rec_Amt)"
                ssql = ssql & " from Member_INTEREST_DATA "
                ssql = ssql & " WHERE company_id = " & clsVariables.CompnyId
                ssql = ssql & " and Year_id=" & aq(clsVariables.WorkingYear)
                'ssql = ssql & " and interest_date <= " & aq(sFunction.DateConversion(txtAsOnDate.Text))
                ssql = ssql & " and member_Id=" & Val(Member_id)
                ssql = ssql & " and Account_id=" & Val(Account_id)
                LoadMemberAccountBalance = LoadMemberAccountBalance + Val(ob.FindOneString(ssql, cnn))



                ssql = "Select Sum(payment_Amt)-sum(Receipt_Amt)"
                ssql = ssql & " from Final_Rojmal_Data "
                ssql = ssql & " WHERE company_id = " & clsVariables.CompnyId
                ssql = ssql & " and Year_id=" & aq(clsVariables.WorkingYear)
                'ssql = ssql & " and doc_date <= " & aq(sFunction.DateConversion(txtAsOnDate.Text))
                ssql = ssql & " and member_Id=" & Val(Member_id)
                ssql = ssql & " and Account_id=" & Val(Account_id)
                LoadMemberAccountBalance = LoadMemberAccountBalance + Val(ob.FindOneString(ssql, cnn))

                'Bank Data
                ssql = "Select sum(Payment_amt)-sum(Receipt_amt) FROM Bank_Main as bm,Bank_Detail  as bd "
                ssql = ssql & " WHERE bm.company_id=bd.company_id and bm.doc_type=bd.doc_type and bm.doc_no=bd.doc_no and bm.Year_Id=bd.Year_id"
                ssql = ssql & "  and bm.company_id = " & clsVariables.CompnyId
                ssql = ssql & " and bm.Year_id=" & aq(clsVariables.WorkingYear)
                ssql = ssql & " and bd.member_Id=" & Val(Member_id)
                ssql = ssql & " and bd.Account_id=" & Val(Account_id)
                LoadMemberAccountBalance = LoadMemberAccountBalance + Val(ob.FindOneString(ssql, cnn))

                'Journal Data
                ssql = "Select sum(Payment_Amt)-sum(receipt_amt)"
                ssql = ssql & " FROM Final_Journal_Main as bm,Final_Journal_Detail  as bd "
                ssql = ssql & " WHERE bm.company_id=bd.company_id and bm.doc_type=bd.doc_type and bm.doc_no=bd.doc_no "
                ssql = ssql & "  and bm.Year_id=bd.Year_id "
                ssql = ssql & "  And bm.company_id = " & clsVariables.CompnyId
                ssql = ssql & "  and bm.Year_id=" & aq(clsVariables.WorkingYear)
                'ssql = ssql & "  and doc_date <= " & aq(sFunction.DateConversion(txtAsOnDate.Text))
                ssql = ssql & " and bd.member_Id=" & Val(Member_id)
                ssql = ssql & " and bd.Account_id=" & Val(Account_id)
                LoadMemberAccountBalance = LoadMemberAccountBalance + Val(ob.FindOneString(ssql, cnn))

                'sales

                ssql = " Select Sum(Net_Amt)"
                ssql = ssql & " from Sales_Main "
                ssql = ssql & " WHERE company_id = " & clsVariables.CompnyId
                ssql = ssql & " and Year_id=" & aq(clsVariables.WorkingYear)
                'ssql = ssql & " and doc_date <= " & aq(sFunction.DateConversion(txtAsOnDate.Text))
                ssql = ssql & " and member_Id=" & Val(Member_id)
                ssql = ssql & " and Account_id=" & Val(Account_id)
                LoadMemberAccountBalance = LoadMemberAccountBalance + Val(ob.FindOneString(ssql, cnn))

                'Purchase
                ssql = " Select "
                ssql = ssql & "0-Sum(Net_Amt)"
                ssql = ssql & " from KVN_Main "
                ssql = ssql & " WHERE company_id = " & clsVariables.CompnyId
                ssql = ssql & " and Year_id=" & aq(clsVariables.WorkingYear)
                'ssql = ssql & " and doc_date <= " & aq(sFunction.DateConversion(txtAsOnDate.Text))
                ssql = ssql & " and party_Id=" & Val(Member_id)
                ssql = ssql & " and Account_id=" & Val(Account_id)
                LoadMemberAccountBalance = LoadMemberAccountBalance + Val(ob.FindOneString(ssql, cnn))

                'pady sales
                ssql = " Select 0-Sum(Rd.Amount)"
                ssql = ssql & " from pady_Receipt_main as RM Inner join pady_Receipt_detail as RD"
                ssql = ssql & " on Rm.Company_Id=Rd.COmpany_Id and "
                ssql = ssql & " Rm.Year_Id=Rd.Year_Id and "
                ssql = ssql & " Rm.Season_Id=Rd.Season_Id and "
                ssql = ssql & " Rm.Doc_Type=Rd.Doc_Type and "
                ssql = ssql & " Rm.Doc_no=Rd.Doc_no "
                ssql = ssql & " left outer join Sales_Purchase_Account_Master as SPAM On"
                ssql = ssql & " RD.Company_Id=SPAM.Company_Id  and "
                ssql = ssql & " RD.Year_Id=SPAM.Year_Id and "
                ssql = ssql & " RD.Season_Id=SPAM.Season_Id and "
                ssql = ssql & " Rd.item_Id=SPAM.ITem_Id"
                ssql = ssql & " WHERE Rm.company_id = " & clsVariables.CompnyId
                ssql = ssql & " and Rm.Year_id=" & aq(clsVariables.WorkingYear)
                'ssql = ssql & " and doc_date <= " & aq(sFunction.DateConversion(txtAsOnDate.Text))
                ssql = ssql & " and SPAM.Adv_Ac_Id    = " & Val(Account_id)
                ssql = ssql & " and Account_id=" & Val(Member_id)

                LoadMemberAccountBalance = LoadMemberAccountBalance + Val(ob.FindOneString(ssql, cnn))

             

                If SAVINGSYSTEM = True Then
                    'saving Receipt opening
                    ssql = "Select 0-Sum(RD.Amount)"
                    ssql = ssql & " From SAVING_RECEIPT_MAIN as Rm Inner Join SAVING_RECEIPT_DETAIL as Rd On "
                    ssql = ssql & " Rm.Company_Id=Rd.Company_Id And Rm.Year_Id=Rd.Year_Id And Rm.Doc_Type=Rd.Doc_Type And Rm.Doc_no=Rd.Doc_no "
                    ssql = ssql & " Inner join Column_master as Cm On Rd.Company_id=Cm.Company_Id And Rd.Column_id=Cm.Column_Id"
                    ssql = ssql & " where Rm.COmpany_Id=" & clsVariables.CompnyId
                    ssql = ssql & " and Rm.Year_Id=" & aq(clsVariables.WorkingYear)
                    'ssql = ssql & " and Rm.Doc_DAte<=" & aq(sFunction.DateConversion(txtAsOnDate.Text))
                    ssql = ssql & " and rm.member_Id=" & Val(Member_id)
                    ssql = ssql & " and cm.Account_id=" & Val(Account_id)
                    LoadMemberAccountBalance = LoadMemberAccountBalance + Val(ob.FindOneString(ssql, cnn))

                    'saving Payment opening
                    ssql = "Select Sum(RD.Amount)"
                    ssql = ssql & " From SAVING_Payment_MAIN as Rm Inner Join SAVING_Payment_DETAIL as Rd On "
                    ssql = ssql & " Rm.Company_Id=Rd.Company_Id And Rm.Year_Id=Rd.Year_Id And Rm.Doc_Type=Rd.Doc_Type And Rm.Doc_no=Rd.Doc_no "
                    ssql = ssql & " Inner join Column_master as Cm On Rd.Company_id=Cm.Company_Id And Rd.Column_id=Cm.Column_Id"
                    ssql = ssql & " where Rm.COmpany_Id=" & clsVariables.CompnyId
                    ssql = ssql & " and Rm.Year_Id=" & aq(clsVariables.WorkingYear)
                    'ssql = ssql & " and Rm.Doc_DAte<=" & aq(sFunction.DateConversion(txtAsOnDate.Text))
                    ssql = ssql & " and rm.member_Id=" & Val(Member_id)
                    ssql = ssql & " and cm.Account_id=" & Val(Account_id)
                    LoadMemberAccountBalance = LoadMemberAccountBalance + Val(ob.FindOneString(ssql, cnn))

                End If

                If SHARESYSTEM = True Then
                    If clsVariables.WorkingYear >= "2015-2016" Then
                        'CHANGE 30/01/2015 PRAMOD
                        ssql = "Select "
                        ssql = ssql & "0-sum(Share_Amt)"
                        ssql = ssql & " FROM inward_data "
                        ssql = ssql & " where Company_id=" & clsVariables.CompnyId
                        ssql = ssql & " and year_id=" & aq(clsVariables.WorkingYear)
                        'ssql = ssql & " and Doc_Date<" & aq(ob.DateConversion(txtAsOnDate.Text))
                        ssql = ssql & " and member_Id=" & Val(Member_id)
                        ssql = ssql & " and Share_Account_Id=" & Val(Account_id)
                        LoadMemberAccountBalance = LoadMemberAccountBalance + Val(ob.FindOneString(ssql, cnn))

                        ssql = "Select "
                        ssql = ssql & "0-sum(Admission_Fee)"
                        ssql = ssql & " FROM inward_data "
                        ssql = ssql & " where Company_id=" & clsVariables.CompnyId
                        ssql = ssql & " and year_id=" & aq(clsVariables.WorkingYear)
                        'ssql = ssql & " and Doc_Date<" & aq(ob.DateConversion(txtAsOnDate.Text))
                        ssql = ssql & " and member_Id=" & Val(Member_id)
                        ssql = ssql & " and Admission_Fee_Account_Id=" & Val(Account_id)
                        LoadMemberAccountBalance = LoadMemberAccountBalance + Val(ob.FindOneString(ssql, cnn))

                        ssql = " Select sum(rd.Amount)"
                        ssql = ssql & " from Receipt_main as Rm inner join Receipt_Detail as Rd "
                        ssql = ssql & " On Rm.Company_Id=rd.Company_Id and Rm.Year_Id=Rd.Year_Id and Rm.Doc_no=Rd.Doc_no"
                        ssql = ssql & " where Rm.Company_Id=" & clsVariables.CompnyId
                        ssql = ssql & " and Rm.Year_id=" & aq(clsVariables.WorkingYear)
                        'ssql = ssql & " and rM.Doc_Date<" & aq(ob.DateConversion(txtAsOnDate.Text))
                        ssql = ssql & " and Rd.member_Id=" & Val(Member_id)
                        ssql = ssql & " and RM.Debit_Account_Id=" & Val(Account_id)
                        LoadMemberAccountBalance = LoadMemberAccountBalance + Val(ob.FindOneString(ssql, cnn))
                        'Change 26/08/2015 Pramod
                        ssql = "Select "
                        ssql = ssql & "sum(Doc_Amt)"
                        ssql = ssql & " FROM Dividend_payment_Main"
                        ssql = ssql & " where Company_id=" & clsVariables.CompnyId
                        ssql = ssql & " and year_id=" & aq(clsVariables.WorkingYear)
                        'ssql = ssql & " and Doc_Date<" & aq(ob.DateConversion(txtAsOnDate.Text))
                        ssql = ssql & " and member_Id=" & Val(Member_id)
                        ssql = ssql & " and Debit_Account_Id=" & Val(Account_id)
                        LoadMemberAccountBalance = LoadMemberAccountBalance + Val(ob.FindOneString(ssql, cnn))
                        ssql = "Select "
                        ssql = ssql & "0-sum(Doc_Amt)"
                        ssql = ssql & " FROM Dividend_payment_Main"
                        ssql = ssql & " where Company_id=" & clsVariables.CompnyId
                        ssql = ssql & " and year_id=" & aq(clsVariables.WorkingYear)
                        'ssql = ssql & " and Doc_Date<" & aq(ob.DateConversion(txtAsOnDate.Text))
                        ssql = ssql & " and Credit_member_Id=" & Val(Member_id)
                        ssql = ssql & " and Credit_Account_Id=" & Val(Account_id)
                        LoadMemberAccountBalance = LoadMemberAccountBalance + Val(ob.FindOneString(ssql, cnn))
                        'end
                    End If
                    
                End If
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function LoadAccountBalance(ByVal Account_Id As Integer, ByVal Asondate As Date, ByVal cnn As SqlClient.SqlConnection) As Decimal
        LoadAccountBalance = 0
        Try
            Dim ssql As String
            ssql = "Select sum(isnull(dr_opening,0)) - sum(isnull(Cr_opening,0)) From Final_Account_Opening_Balance"
            ssql = ssql & " Where Company_id=" & clsVariables.CompnyId
            ssql = ssql & " and year_id=" & aq(clsVariables.WorkingYear)
            ssql = ssql & " and Account_id=" & Account_Id
            LoadAccountBalance = Val(ob.FindOneString(ssql, cnn))
            ssql = "SELECT sum(isnull(payment_amt,0)-isnull(receipt_amt,0)) as DocAmt "
            ssql = ssql & " FROM Final_Rojmal_Data "
            ssql = ssql & "  WHERE company_id = " & clsVariables.CompnyId & "  "
            ssql = ssql & " and Year_Id=" & aq(clsVariables.WorkingYear)
            ssql = ssql & " and Account_id=" & Val(Account_Id)
            ssql = ssql & " and doc_date <= " & aq(Asondate)
            LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))
            ssql = "SELECT sum(isnull(receipt_amt,0)-isnull(Payment_amt,0)) as DocAmt"
            ssql = ssql & " FROM Final_Rojmal_Data  as RM,Book_MASter as CM "
            ssql = ssql & "  WHERE Rm.company_Id=CM.company_Id and RM.book_ID=CM.book_ID and RM.company_id = " & clsVariables.CompnyId & "  "
            ssql = ssql & " and Year_Id=" & aq(clsVariables.WorkingYear)
            ssql = ssql & " and CM.Account_id=" & Val(Account_Id)
            ssql = ssql & " and doc_date <= " & aq(Asondate)
            LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))
            ssql = "SELECT Sum(payment_amt-receipt_amt) as DocAmt FROM Bank_Main  as bm,Bank_Detail  as bd "
            ssql = ssql & " WHERE bm.company_id=bd.company_id and bm.doc_type=bd.doc_type and bm.doc_no=bd.doc_no  and bm.Year_id=bd.Year_id"
            ssql = ssql & "  and bm.company_id = " & clsVariables.CompnyId
            ssql = ssql & " and bm.Year_id=" & aq(clsVariables.WorkingYear)
            ssql = ssql & " and Account_id=" & Val(Account_Id)
            ssql = ssql & " and doc_date <= " & aq(Asondate)
            LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))
            ssql = "SELECT sum(receipt_Amt)-sum(payment_Amt) as Dr_Amount FROM Bank_Main  as bm,Bank_Detail  as bd,Book_Master  as bkm "
            ssql = ssql & " WHERE bm.Company_id = bd.Company_id and bm.Doc_Type = bd.Doc_Type and bm.Doc_No=bd.Doc_no and bm.Year_id=bd.Year_id and bm.company_id=bkm.company_id and bm.book_id=bkm.book_id"
            ssql = ssql & "  and bm.Year_id = " & aq(clsVariables.WorkingYear)
            ssql = ssql & "  and bm.company_id = " & clsVariables.CompnyId
            ssql = ssql & " and bkm.Account_id=" & Val(Account_Id)
            ssql = ssql & " and doc_date <= " & aq(Asondate)
            LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))
            ssql = "SELECT Sum(payment_amt-receipt_amt) as DocAmt FROM Final_Journal_Main as bm,Final_Journal_Detail  as bd "
            ssql = ssql & " WHERE bm.company_id=bd.company_id and bm.doc_type=bd.doc_type and bm.doc_no=bd.doc_no and bm.Year_id=bd.Year_id "
            ssql = ssql & " and bm.company_id = " & clsVariables.CompnyId & " "
            ssql = ssql & " and bm.Year_Id=" & aq(clsVariables.WorkingYear)
            ssql = ssql & " and Account_id=" & Val(Account_Id)
            ssql = ssql & " and doc_date <= " & aq(Asondate)
            LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))
            ssql = " Select Sum(Net_Amt) " & aq(IPAddress)
            ssql = ssql & " from KVN_main where Company_Id=" & clsVariables.CompnyId
            ssql = ssql & " and Year_id=" & aq(clsVariables.WorkingYear)
            ssql = ssql & " and Party_id=" & Val(Account_Id)
            ssql = ssql & " and doc_date <= " & aq(Asondate)
            LoadAccountBalance = LoadAccountBalance - Val(ob.FindOneString(ssql, cnn))
            ssql = "Select  SUM(isnull(KID.NET_amt,0) - isnull(KID.Add_VAT_Amt,0) - isnull(KID.Vat_amt,0)) "
            ssql = ssql & " from KVN_MAIN AS KM INNER JOIN"
            ssql = ssql & " KVN_ITEM_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
            ssql = ssql & " KM.Doc_No = KID.Doc_No INNER JOIN"
            ssql = ssql & " ITEM_MASTER AS Im ON KID.Item_id = Im.Item_Id AND KID.Company_Id = Im.Company_Id Left Outer JOIN"
            ssql = ssql & " QUALITY_MASTER AS Qm ON Im.Company_Id = Qm.Company_Id AND Im.Quality_id = Qm.Quality_Id"
            ssql = ssql & " where KM.Company_Id=" & clsVariables.CompnyId
            ssql = ssql & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
            ssql = ssql & " and Qm.Pur_Account_id=" & Account_Id
            ssql = ssql & " and KM.doc_date <= " & aq(Asondate)
            LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))
            'If Vat_Account_id = Account_Id Then
            ssql = "Select  SUM(KID.Vat_amt)"
            ssql = ssql & " from KVN_MAIN AS KM INNER JOIN"
            ssql = ssql & " KVN_ITEM_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
            ssql = ssql & " KM.Doc_No = KID.Doc_No "
            ssql = ssql & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            ssql = ssql & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            ssql = ssql & " where KM.Company_Id=" & clsVariables.CompnyId
            ssql = ssql & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
            ssql = ssql & " and KM.doc_date<=  " & aq(Asondate)
            ssql = ssql & " and Dm.vat_Account_id=" & Account_Id
            LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))
            'End If
            'If Add_Vat_Account_id = Account_Id Then
            ssql = "Select  SUM(isnull(KID.Add_Vat_amt,0)) "
            ssql = ssql & " from KVN_MAIN AS KM INNER JOIN"
            ssql = ssql & " KVN_ITEM_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
            ssql = ssql & " KM.Doc_No = KID.Doc_No "
            ssql = ssql & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            ssql = ssql & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            ssql = ssql & " where KM.Company_Id=" & clsVariables.CompnyId
            ssql = ssql & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
            ssql = ssql & " and KM.doc_date <= " & aq(Asondate)
            ssql = ssql & " and Dm.Add_vat_Account_Id=" & Account_Id
            LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))
            'End If
            'If Oth_Account_id = Account_Id Then
            ssql = "Select Sum(Km.Add_Amt)"
            ssql = ssql & " from KVN_main as km"
            ssql = ssql & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            ssql = ssql & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            ssql = ssql & "  where km.Company_Id=" & clsVariables.CompnyId
            ssql = ssql & " and km.Year_id=" & aq(clsVariables.WorkingYear)
            ssql = ssql & " and km.doc_date <= " & aq(Asondate)
            ssql = ssql & " and Dm.Oth_Account_id=" & Account_Id
            LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))

            ssql = "Select Sum(km.Less_Amt)"
            ssql = ssql & " from KVN_main as Km"
            ssql = ssql & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            ssql = ssql & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            ssql = ssql & " where km.Company_Id=" & clsVariables.CompnyId
            ssql = ssql & " and km.Year_id=" & aq(clsVariables.WorkingYear)
            ssql = ssql & " and km.doc_date <= " & aq(Asondate)
            ssql = ssql & " and Dm.Oth_Account_Id=" & Account_Id
            LoadAccountBalance = LoadAccountBalance - Val(ob.FindOneString(ssql, cnn))
            'End If
            ssql = " Select Sum(Net_Amt) "
            ssql = ssql & " from Sales_main where Company_Id=" & clsVariables.CompnyId
            ssql = ssql & " and Year_id=" & aq(clsVariables.WorkingYear)
            ssql = ssql & " and Account_id=" & Val(Account_Id)
            ssql = ssql & " and doc_date <= " & aq(Asondate)
            LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))

            ssql = "Select  SUM(isnull(KID.NET_amt,0) - isnull(KID.Add_VAT_Amt,0) - isnull(KID.Vat_amt,0)) "
            ssql = ssql & " from Sales_MAIN AS KM INNER JOIN"
            ssql = ssql & " Sales_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
            ssql = ssql & " KM.Doc_No = KID.Doc_No INNER JOIN"
            ssql = ssql & " ITEM_MASTER AS Im ON KID.Item_id = Im.Item_Id AND KID.Company_Id = Im.Company_Id Left Outer JOIN"
            ssql = ssql & " QUALITY_MASTER AS Qm ON Im.Company_Id = Qm.Company_Id AND Im.Quality_id = Qm.Quality_Id"
            ssql = ssql & " where KM.Company_Id=" & clsVariables.CompnyId
            ssql = ssql & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
            ssql = ssql & " and Qm.Sal_Account_id=" & Account_Id
            ssql = ssql & " and KM.doc_date <= " & aq(Asondate)
            LoadAccountBalance = LoadAccountBalance - Val(ob.FindOneString(ssql, cnn))

            'If Vat_Account_id = Account_Id Then
            ssql = "Select  SUM(KID.Vat_amt) "
            ssql = ssql & " from Sales_MAIN AS KM INNER JOIN"
            ssql = ssql & " Sales_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
            ssql = ssql & " KM.Doc_No = KID.Doc_No "
            ssql = ssql & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            ssql = ssql & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            ssql = ssql & " where KM.Company_Id=" & clsVariables.CompnyId
            ssql = ssql & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
            ssql = ssql & " and KM.doc_date <= " & aq(Asondate)
            ssql = ssql & " and Dm.Vat_Account_id=" & Account_Id
            LoadAccountBalance = LoadAccountBalance - Val(ob.FindOneString(ssql, cnn))
            'End If

            'If Add_Vat_Account_id = Account_Id Then
            ssql = "Select  SUM(KID.Add_Vat_amt) "
            ssql = ssql & " from Sales_MAIN AS KM INNER JOIN"
            ssql = ssql & " Sales_DETAIL AS KID ON KM.Company_Id = KID.Company_Id AND KM.Year_id = KID.Year_id AND KM.Doc_Type = KID.Doc_Type AND "
            ssql = ssql & " KM.Doc_No = KID.Doc_No "
            ssql = ssql & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            ssql = ssql & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            ssql = ssql & " where KM.Company_Id=" & clsVariables.CompnyId
            ssql = ssql & " and Km.Year_id=" & aq(clsVariables.WorkingYear)
            ssql = ssql & " and KM.doc_date <= " & aq(Asondate)
            ssql = ssql & " and Dm.Add_vat_Account_id=" & Account_Id
            LoadAccountBalance = LoadAccountBalance - Val(ob.FindOneString(ssql, cnn))
            'End If
            'If Oth_Account_id = Account_Id Then
            ssql = " Select Sum(isnull(km.Add_Amt,0)) "
            ssql = ssql & " from Sales_main as Km "
            ssql = ssql & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            ssql = ssql & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            ssql = ssql & "where km.Company_Id=" & clsVariables.CompnyId
            ssql = ssql & " and km.Year_id=" & aq(clsVariables.WorkingYear)
            ssql = ssql & " and km.doc_date <= " & aq(Asondate)
            ssql = ssql & " and Dm.Oth_Account_id=" & Account_Id
            LoadAccountBalance = LoadAccountBalance - Val(ob.FindOneString(ssql, cnn))

            ssql = " Select Sum(isnull(km.Less_Amt,0)) "
            ssql = ssql & " from Sales_main as km"
            ssql = ssql & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            ssql = ssql & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            ssql = ssql & " where km.Company_Id=" & clsVariables.CompnyId
            ssql = ssql & " and km.Year_id=" & aq(clsVariables.WorkingYear)
            ssql = ssql & " and km.doc_date <= " & aq(Asondate)
            ssql = ssql & " and Dm.Oth_Account_id=" & Account_Id
            LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))
            'End If
            'If Freight_Account_id = Account_Id Then
            ssql = " Select Sum(isnull(Km.Freight_Main,0)) "
            ssql = ssql & " from Sales_main as Km "
            ssql = ssql & " Left Outer  join Voucher_master as Vm On Km.Company_id=Vm.Company_id and Km.Doc_Type=Vm.Doc_Type "
            ssql = ssql & " Left Outer  join Department_master as Dm On Vm.Company_id=Dm.Company_id and Vm.Department_id=Dm.Department_id "
            ssql = ssql & "where km.Company_Id=" & clsVariables.CompnyId
            ssql = ssql & " and km.Year_id=" & aq(clsVariables.WorkingYear)
            ssql = ssql & " and km.doc_date <= " & aq(Asondate)
            ssql = ssql & " and Dm.Freight_Account_id=" & Account_Id
            LoadAccountBalance = LoadAccountBalance - Val(ob.FindOneString(ssql, cnn))
            'End If
            If SAVINGSYSTEM = True Then
                'saving receipt Data Credit 
                ssql = " Select 0-Sum(RD.Amount)"
                ssql = ssql & " From SAVING_RECEIPT_MAIN as Rm Inner Join SAVING_RECEIPT_DETAIL as Rd On "
                ssql = ssql & " Rm.Company_Id=Rd.Company_Id And Rm.Year_Id=Rd.Year_Id And Rm.Doc_Type=Rd.Doc_Type And Rm.Doc_no=Rd.Doc_no "
                ssql = ssql & " Inner join Column_master as Cm On Rd.Company_id=Cm.Company_Id And Rd.Column_id=Cm.Column_Id"
                ssql = ssql & " Inner join Voucher_master as Vm On RM.Company_id=Vm.Company_Id And RM.Doc_Type=Vm.Doc_Type"
                ssql = ssql & " where Rm.COmpany_Id=" & clsVariables.CompnyId
                ssql = ssql & " and Rm.Year_Id=" & aq(clsVariables.WorkingYear)
                ssql = ssql & " and Rm.Doc_DAte<=" & aq(Asondate)
                ssql = ssql & " and Cm.Account_Id =" & Account_Id
                LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))

                'saving receipt Data Debit 

                ssql = " Select Sum(RD.Amount)"
                ssql = ssql & " From SAVING_RECEIPT_MAIN as Rm Inner Join SAVING_RECEIPT_DETAIL as Rd On "
                ssql = ssql & " Rm.Company_Id=Rd.Company_Id And Rm.Year_Id=Rd.Year_Id And Rm.Doc_Type=Rd.Doc_Type And Rm.Doc_no=Rd.Doc_no "
                ssql = ssql & " Inner join Column_master as Cm On Rd.Company_id=Cm.Company_Id And Rd.Column_id=Cm.Column_Id"
                ssql = ssql & " Inner join Voucher_master as Vm On RM.Company_id=Vm.Company_Id And RM.Doc_Type=Vm.Doc_Type"
                ssql = ssql & " where Rm.COmpany_Id=" & clsVariables.CompnyId
                ssql = ssql & " and Rm.Year_Id=" & aq(clsVariables.WorkingYear)
                ssql = ssql & " and Rm.Doc_DAte<=" & aq(Asondate)
                ssql = ssql & " and Rm.Debit_Account_Id =" & Account_Id
                LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))


                'saving Payment Data 
                ssql = " Select Sum(RD.Amount)"
                ssql = ssql & " From SAVING_Payment_MAIN as Rm Inner Join SAVING_Payment_DETAIL as Rd On "
                ssql = ssql & " Rm.Company_Id=Rd.Company_Id And Rm.Year_Id=Rd.Year_Id And Rm.Doc_Type=Rd.Doc_Type And Rm.Doc_no=Rd.Doc_no "
                ssql = ssql & " Inner join Column_master as Cm On Rd.Company_id=Cm.Company_Id And Rd.Column_id=Cm.Column_Id"
                ssql = ssql & " Inner join Voucher_master as Vm On RM.Company_id=Vm.Company_Id And RM.Doc_Type=Vm.Doc_Type"
                ssql = ssql & " where Rm.COmpany_Id=" & clsVariables.CompnyId
                ssql = ssql & " and Rm.Year_Id=" & aq(clsVariables.WorkingYear)
                ssql = ssql & " and Rm.Doc_DAte<=" & aq(Asondate)
                ssql = ssql & " and Cm.Account_Id =" & Account_Id
                LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))

                'saving Payment Data Credit 
                ssql = " Select 0-Sum(RD.Amount)"
                ssql = ssql & " From SAVING_Payment_MAIN as Rm Inner Join SAVING_Payment_DETAIL as Rd On "
                ssql = ssql & " Rm.Company_Id=Rd.Company_Id And Rm.Year_Id=Rd.Year_Id And Rm.Doc_Type=Rd.Doc_Type And Rm.Doc_no=Rd.Doc_no "
                ssql = ssql & " Inner join Column_master as Cm On Rd.Company_id=Cm.Company_Id And Rd.Column_id=Cm.Column_Id"
                ssql = ssql & " Inner join Voucher_master as Vm On RM.Company_id=Vm.Company_Id And RM.Doc_Type=Vm.Doc_Type"
                ssql = ssql & " where Rm.COmpany_Id=" & clsVariables.CompnyId
                ssql = ssql & " and Rm.Year_Id=" & aq(clsVariables.WorkingYear)
                ssql = ssql & " and Rm.Doc_DAte<=" & aq(Asondate)
                ssql = ssql & " and Rm.Credit_Account_Id =" & Account_Id
                LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))
            End If


            If FixdSYSTEM = True Then
                'Fixd Receipt Opening
                ssql = " Select 0-Sum(FR.Amount)"
                ssql = ssql & " From Fixd_Receipt_Data as Fr Left Outer join Column_master as Cm On "
                ssql = ssql & " Fr.Company_Id=Cm.Company_id And Fr.Column_Id=Cm.Column_Id "
                ssql = ssql & " where Fr.Company_Id=" & clsVariables.CompnyId
                ssql = ssql & " and Fr.Year_Id=" & aq(clsVariables.WorkingYear)
                ssql = ssql & " and Fr.Doc_DAte<=" & aq(Asondate)
                ssql = ssql & " and Cm.Account_id =" & Account_Id
                LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))




                ssql = " Select Sum(FR.Amount)"
                ssql = ssql & " From Fixd_Receipt_Data as Fr Left Outer join Column_master as Cm On "
                ssql = ssql & " Fr.Company_Id=Cm.Company_id And Fr.Column_Id=Cm.Column_Id "
                ssql = ssql & " where Fr.Company_Id=" & clsVariables.CompnyId
                ssql = ssql & " and Fr.Year_Id=" & aq(clsVariables.WorkingYear)
                ssql = ssql & " and Fr.Doc_DAte<=" & aq(Asondate)
                ssql = ssql & " and FR.Debit_Account_id =" & Account_Id
                LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))

                'fixd payment
                ssql = " Select Sum(Fp.Fixd_Amt)"
                ssql = ssql & " from Fixd_Payment_DAta as FP inner join Fixd_Balance as Fb on "
                ssql = ssql & " Fp.Company_Id=Fb.Company_Id And FP.Fixd_no=FB.Doc_no and Fp.Year_Id=Fb.Year_id"
                ssql = ssql & " left outer join Column_Master as CM On  "
                ssql = ssql & " Fb.COlumn_Id=CM.Column_Id and Fb.COmpany_id=Cm.COmpany_id"
                ssql = ssql & " where FP.Company_Id=" & clsVariables.CompnyId
                ssql = ssql & " and FP.Year_Id=" & aq(clsVariables.WorkingYear)
                ssql = ssql & " and FP.Doc_DAte<=" & aq(Asondate)
                ssql = ssql & " and Cm.Account_id =" & Account_Id
                LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))

                ssql = " Select Sum(Fp.Interest_Amt)"
                ssql = ssql & " from Fixd_Payment_DAta as FP inner join Fixd_Balance as Fb on "
                ssql = ssql & " Fp.Company_Id=Fb.Company_Id And FP.Fixd_no=FB.Doc_no and Fp.Year_Id=Fb.Year_id"
                ssql = ssql & " left outer join Column_Master as CM On  "
                ssql = ssql & " Fb.COlumn_Id=CM.Column_Id and Fb.COmpany_id=Cm.COmpany_id"
                ssql = ssql & " where FP.Company_Id=" & clsVariables.CompnyId
                ssql = ssql & " and FP.Year_Id=" & aq(clsVariables.WorkingYear)
                ssql = ssql & " and FP.Doc_DAte<=" & aq(Asondate)
                ssql = ssql & " and fp.Interest_Account_ID =" & Account_Id
                LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))

                ssql = " Select Sum(Fp.Interest_Reserve)"
                ssql = ssql & " from Fixd_Payment_DAta as FP inner join Fixd_Balance as Fb on "
                ssql = ssql & " Fp.Company_Id=Fb.Company_Id And FP.Fixd_no=FB.Doc_no and Fp.Year_Id=Fb.Year_id"
                ssql = ssql & " left outer join Column_Master as CM On  "
                ssql = ssql & " Fb.COlumn_Id=CM.Column_Id and Fb.COmpany_id=Cm.COmpany_id"
                ssql = ssql & " where FP.Company_Id=" & clsVariables.CompnyId
                ssql = ssql & " and FP.Year_Id=" & aq(clsVariables.WorkingYear)
                ssql = ssql & " and FP.Doc_DAte<=" & aq(Asondate)
                ssql = ssql & " and fp.Reserve_Interest_Account_ID = " & Account_Id
                LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))

                ssql = " Select 0-(isnull(Sum(Fp.Fixd_Amt),0)+isnull(sum(fp.Interest_Amt),0)+isnull(sum(Fp.Interest_Reserve),0))"
                ssql = ssql & " from Fixd_Payment_DAta as FP inner join Fixd_Balance as Fb on "
                ssql = ssql & " Fp.Company_Id=Fb.Company_Id And FP.Fixd_no=FB.Doc_no and Fp.Year_Id=Fb.Year_id"
                ssql = ssql & " left outer join Column_Master as CM On  "
                ssql = ssql & " Fb.COlumn_Id=CM.Column_Id and Fb.COmpany_id=Cm.COmpany_id"
                ssql = ssql & " where FP.Company_Id=" & clsVariables.CompnyId
                ssql = ssql & " and FP.Year_Id=" & aq(clsVariables.WorkingYear)
                ssql = ssql & " and FP.Doc_DAte<=" & aq(Asondate)
                ssql = ssql & " and Fp.Credit_Account_id =" & Account_Id
                LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))

                'fixd Reserve payment
                ssql = " Select Sum(Fp.Interest_Amt)"
                ssql = ssql & " from FIXD_RESERVE_INTEREST_DATA as FP inner join Fixd_Balance as Fb on "
                ssql = ssql & " Fp.Company_Id=Fb.Company_Id And FP.Fixd_no=FB.Doc_no and Fp.Year_Id=Fb.Year_id"
                ssql = ssql & " left outer join Column_Master as CM On  "
                ssql = ssql & " Fb.COlumn_Id=CM.Column_Id and Fb.COmpany_id=Cm.COmpany_id"
                ssql = ssql & " where FP.Company_Id=" & clsVariables.CompnyId
                ssql = ssql & " and FP.Year_Id=" & aq(clsVariables.WorkingYear)
                ssql = ssql & " and FP.Doc_DAte<=" & aq(Asondate)
                ssql = ssql & " and fp.Reserve_Interest_Account_Id =" & Account_Id
                LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))

                ssql = " Select 0-Sum(Fp.Interest_Amt)"
                ssql = ssql & " from FIXD_RESERVE_INTEREST_DATA as FP inner join Fixd_Balance as Fb on "
                ssql = ssql & " Fp.Company_Id=Fb.Company_Id And FP.Fixd_no=FB.Doc_no and Fp.Year_Id=Fb.Year_id"
                ssql = ssql & " left outer join Column_Master as CM On  "
                ssql = ssql & " Fb.COlumn_Id=CM.Column_Id and Fb.COmpany_id=Cm.COmpany_id"
                ssql = ssql & " where FP.Company_Id=" & clsVariables.CompnyId
                ssql = ssql & " and FP.Year_Id=" & aq(clsVariables.WorkingYear)
                ssql = ssql & " and FP.Doc_DAte<=" & aq(Asondate)
                ssql = ssql & " and fp.Credit_Account_id =" & Account_Id
                LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))
            End If


         

            If SHARESYSTEM = True Then
                If clsVariables.WorkingYear >= "2015-2016" Then
                    ssql = "sELECT sum(Doc_Amt)"
                    ssql = ssql & " FROM Dividend_Payment_main  as Rm "
                    ssql = ssql & " where Rm.Company_id=" & clsVariables.CompnyId
                    ssql = ssql & " and Rm.Year_id=" & aq(clsVariables.WorkingYear)
                    ssql = ssql & " and RM.Doc_DAte<=" & aq(Asondate)
                    ssql = ssql & " and Rm.Debit_Account_Id =" & Account_Id
                    LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))
                    ssql = "sELECT 0-sum(Doc_Amt)"
                    ssql = ssql & " FROM Dividend_Payment_main Rm "
                    ssql = ssql & " where Rm.Company_id=" & clsVariables.CompnyId
                    ssql = ssql & " and Rm.Year_id=" & aq(clsVariables.WorkingYear)
                    ssql = ssql & " and Rm.Doc_DAte<=" & aq(Asondate)
                    ssql = ssql & " and Rm.Credit_Account_Id =" & Account_Id
                    LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))
                    'CHANGE 30/01/2015 Pramod
                    ssql = "sELECT sum(Amount)"
                    ssql = ssql & " FROM Receipt_main as Rm inner join Receipt_Detail as Rd On "
                    ssql = ssql & " Rm.Company_id=rd.Company_Id and Rm.Doc_no=Rd.Doc_no and Rm.year_id=rd.Year_Id"
                    ssql = ssql & " where Rm.Company_id=" & clsVariables.CompnyId
                    ssql = ssql & " and Rm.Year_id=" & aq(clsVariables.WorkingYear)
                    ssql = ssql & " and RM.Doc_DAte<=" & aq(Asondate)
                    ssql = ssql & " and Rm.Debit_Account_Id =" & Account_Id
                    LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))

                    ssql = "sELECT 0-sum(Amount)"
                    ssql = ssql & " FROM Receipt_main as Rm inner join Receipt_Detail as Rd On "
                    ssql = ssql & " Rm.Company_id=rd.Company_Id and Rm.Doc_no=Rd.Doc_no and Rm.year_id=rd.Year_Id"
                    ssql = ssql & " where Rm.Company_id=" & clsVariables.CompnyId
                    ssql = ssql & " and Rm.Year_id=" & aq(clsVariables.WorkingYear)
                    ssql = ssql & " and Rm.Doc_DAte<=" & aq(Asondate)
                    ssql = ssql & " and Rm.Credit_Account_Id=" & Account_Id
                    LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))

                    ssql = "sELECT sum(ID.Share_Amt)"
                    ssql = ssql & " FROM Inward_Data as ID"
                    ssql = ssql & " where ID.Company_id=" & clsVariables.CompnyId
                    ssql = ssql & " and ID.Year_id=" & aq(clsVariables.WorkingYear)
                    ssql = ssql & " and ID.Doc_DAte<=" & aq(Asondate)
                    ssql = ssql & " and ID.Debit_Account_Id =" & Account_Id
                    LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))

                    ssql = "sELECT sum(ID.Admission_Fee)"
                    ssql = ssql & " FROM Inward_Data as ID"
                    ssql = ssql & " where ID.Company_id=" & clsVariables.CompnyId
                    ssql = ssql & " and ID.Year_id=" & aq(clsVariables.WorkingYear)
                    ssql = ssql & " and ID.Doc_DAte<=" & aq(Asondate)
                    ssql = ssql & " and ID.Debit_Account_Id =" & Account_Id
                    LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))

                    ssql = "sELECT 0-sum(ID.Share_Amt)"
                    ssql = ssql & " FROM Inward_Data as ID"
                    ssql = ssql & " where ID.Company_id=" & clsVariables.CompnyId
                    ssql = ssql & " and ID.Year_id=" & aq(clsVariables.WorkingYear)
                    ssql = ssql & " and ID.Doc_DAte<=" & aq(Asondate)
                    ssql = ssql & " and ID.Share_Account_Id =" & Account_Id
                    LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))

                    ssql = "sELECT 0-sum(ID.Admission_Fee)"
                    ssql = ssql & " FROM Inward_Data as ID"
                    ssql = ssql & " where ID.Company_id=" & clsVariables.CompnyId
                    ssql = ssql & " and ID.Year_id=" & aq(clsVariables.WorkingYear)
                    ssql = ssql & " and ID.Doc_DAte<=" & aq(Asondate)
                    ssql = ssql & " and ID.Admission_Fee_Account_Id =" & Account_Id
                    LoadAccountBalance = LoadAccountBalance + Val(ob.FindOneString(ssql, cnn))
                End If
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Sub LoadActcompay()
        'Try
        '    Dim dt As New DataTable
        '    dt = ob.Returntable("Select * from Company where Company_id=" & Val(clsVariables.CompnyId), ob.getconnection(ob.Getconn))
        '    If dt.Rows.Count > 0 Then
        '        'Vat_Account_id = Val(ob.IfNullThen(dt.Rows(0).Item("Vat_Account_id"), 0))
        '        'Add_Vat_Account_id = Val(ob.IfNullThen(dt.Rows(0).Item("Add_Vat_Account_id"), 0))
        '        Oth_Account_id = Val(ob.IfNullThen(dt.Rows(0).Item("oTh_Account_id"), 0))
        '        'Freight_Account_id = Val(ob.IfNullThen(dt.Rows(0).Item("Freight_Account_id"), 0))
        '    End If
        'Catch ex As Exception
        '    MsgBox(ex.Message.ToString)
        'End Try
    End Sub
    Public Function LoadReporttab(ByVal sender As Object, ByVal tba As TabControl, ByVal cn As SqlConnection) As TabControl
        Dim ssql As String
        ssql = "SELECT Distinct Group_name "
        ssql = ssql & " FROM REPORT_MASTER AS R INNER JOIN"
        ssql = ssql & " FORM_INFO as F ON R.Form_id = F.form_id "
        ssql = ssql & " where f.Form_name=" & aq(sender.tag)
        ssql = ssql & " and r.Status=1"
        Dim dt As New DataTable
        dt = Returntable(ssql, cn)
        Dim i As Integer
        Do While i < dt.Rows.Count
            tba.TabPages.Add(IfNullThen(dt.Rows(i).Item("Group_name"), ""))
            i += 1
        Loop
        Return tba

    End Function
    Public Function ReturnDataset(ByVal str As String, ByVal cn As SqlClient.SqlConnection, Optional ByVal TblName As String = "temp") As DataSet
        Dim Onestr As DataSet = Nothing
        Try
            If cn.State = ConnectionState.Closed Then
                cn.Open()
            End If
            Dim adpt As New SqlDataAdapter(str, cn)
            Dim ds As New DataSet
            adpt.Fill(ds, TblName)
            Onestr = ds
            cn.Close()
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Onestr
    End Function
    Public Function DateConversion(ByVal sDate As String) As String
        'sDate = Mid(sDate, 4, 2) & "/" & Mid(sDate, 1, 2) & "/" & Mid(sDate, 7, 4)
        'Return sDate

        If Len(Trim(sDate)) = 10 Then
            sDate = (Mid(sDate, 4, 2) & "/" & Mid(sDate, 1, 2) & "/" & Mid(sDate, 7, 4))
        ElseIf Len(Trim(sDate)) > 10 Then
            sDate = (Mid(sDate, 4, 2) & "/" & Mid(sDate, 1, 2) & "/" & Mid(sDate, 7, 4))
        ElseIf Len(Trim(sDate)) = 9 Then
            If Mid(sDate, 2, 1) = "/" Then
                sDate = (Mid(sDate, 3, 2) & "/" & Mid(sDate, 1, 1) & "/" & Mid(sDate, 6, 4))
            Else
                sDate = (Mid(sDate, 4, 1) & "/" & Mid(sDate, 1, 2) & "/" & Mid(sDate, 6, 4))
            End If
        ElseIf Len(Trim(sDate)) = 8 Then
            sDate = (Mid(sDate, 3, 1) & "/" & Mid(sDate, 1, 1) & "/" & Mid(sDate, 5, 4))
        End If
        Return sDate
    End Function
    Public Sub FilSt()
        Try
            Dim ssql As String
            ssql = "Select Status,SMS_System from COmpany where Company_Id=" & clsVariables.CompnyId
            Dim dty As New DataTable
            dty = ob.Returntable(ssql, ob.getconnection(ob.Getconn()))
            If dty.Rows.Count > 0 Then
                vrepstatus = ob.IfNullThen(dty.Rows(0).Item("Status"), False)
                vSms_System = ob.IfNullThen(dty.Rows(0).Item("Sms_System"), False)
            Else
                vrepstatus = False
                vSms_System = False
            End If
            MsgSenderId = "NVSGIN"
            MsguserID = "navsarigin"
            Msguserpass = "navsariginsms@123"

            ob.CreateDSN("assdsn", dbname)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Sub updateColumnint(ByVal cn As SqlClient.SqlConnection)
        Try
            Dim ssql As String
            ssql = "select o.name as TblName,c.name as FldName from syscolumns c left join sysobjects o on c.id=o.id"
            ssql = ssql & " where o.type='u'"
            ssql = ssql & " and c.Xtype=52 "
            Dim dt As New DataTable
            dt = Returntable(ssql, cn)
            Dim i As Integer
            i = 0
            Do While i < dt.Rows.Count
                If ExeTbl(dt.Rows(i).Item("Tblname"), cn) = True Then
                    If CheckField(dt.Rows(i).Item("Fldname"), dt.Rows(i).Item("Tblname"), cn) = True Then
                        ssql = " Alter Table " & dt.Rows(i).Item("Tblname") & vbCrLf
                        ssql = ssql & " alter column " & dt.Rows(i).Item("fldname") & " int"
                        ob.Execute(ssql, cn)
                    End If
                End If
                i += 1
            Loop
        Catch ex As Exception

        End Try
    End Sub
    Public Function ConfirmDelete(Optional ByRef Master As Object = False) As Boolean
        Dim flag As Integer

        'UPGRADE_WARNING: Couldn't resolve default property of object Master. Click for more: 'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"'
        If Master Then
            flag = MsgBox("Deletetion of a master record may affect the related data." & Chr(13) & "Proceed anyway ?", MsgBoxStyle.Critical + MsgBoxStyle.YesNo, My.Application.Info.Title)
        Else
            flag = MsgBox("Are you sure you want to delete this entry ?", MsgBoxStyle.Question + MsgBoxStyle.YesNo + MsgBoxStyle.DefaultButton2, My.Application.Info.Title)
        End If
        If flag = MsgBoxResult.Yes Then
            ConfirmDelete = True
        Else
            ConfirmDelete = False
        End If

    End Function
    Public Function ConfirmEdit(Optional ByRef Master As Object = False) As Boolean
        Dim flag As Integer

        'UPGRADE_WARNING: Couldn't resolve default property of object Master. Click for more: 'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"'
        If Master Then
            flag = MsgBox("Modification of a master record may affect the related data." & Chr(13) & "Proceed anyway ?", MsgBoxStyle.Critical + MsgBoxStyle.YesNo, My.Application.Info.Title)
        Else
            flag = MsgBox("Are you sure you want to edit this record ? ", MsgBoxStyle.YesNo + MsgBoxStyle.Question + MsgBoxStyle.DefaultButton1, My.Application.Info.Title)
        End If
        If flag = MsgBoxResult.Yes Then
            ConfirmEdit = True
        Else
            ConfirmEdit = False
        End If

    End Function
    Public Function ConfirmPrint(Optional ByRef Master As Object = False) As Boolean
        Dim flag As Integer

        'UPGRADE_WARNING: Couldn't resolve default property of object Master. Click for more: 'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"'
        If Master Then
            flag = MsgBox("Printing of a master record may affect the related data." & Chr(13) & "Proceed anyway ?", MsgBoxStyle.Critical + MsgBoxStyle.YesNo, My.Application.Info.Title)
        Else
            flag = MsgBox("You Want to Print A Document?", MsgBoxStyle.Question + MsgBoxStyle.YesNo + MsgBoxStyle.DefaultButton1, My.Application.Info.Title)
        End If
        If flag = MsgBoxResult.Yes Then
            ConfirmPrint = True
        Else
            ConfirmPrint = False
        End If

    End Function
    'Public Sub ReportParameterDeclaration(ByRef Ctrl As AxCrystal.AxCrystalReport)
    '    With Ctrl
    '        .Reset()
    '        .ReportFileName = ""
    '        .WindowTitle = ""
    '        .SelectionFormula = ""

    '        .WindowState = Crystal.WindowStateConstants.crptMaximized

    '        .WindowShowExportBtn = True
    '        .WindowShowPrintBtn = True
    '        .WindowShowPrintSetupBtn = True
    '        .WindowShowProgressCtls = True
    '        .WindowShowRefreshBtn = True
    '        .WindowShowSearchBtn = True
    '        .WindowShowZoomCtl = True
    '    End With
    'End Sub

    Public Function YesNo(ByVal strMessage As String, ByVal sDefaultButton As Integer) As Boolean

        Dim flag As Integer

        Select Case sDefaultButton
            Case 1
                flag = MsgBox(strMessage, MsgBoxStyle.Question + MsgBoxStyle.YesNo + MsgBoxStyle.DefaultButton1, My.Application.Info.Title)
            Case 2
                flag = MsgBox(strMessage, MsgBoxStyle.Question + MsgBoxStyle.YesNo + MsgBoxStyle.DefaultButton2, My.Application.Info.Title)
        End Select
        If flag = MsgBoxResult.Yes Then
            YesNo = True
        Else
            YesNo = False
        End If

    End Function

    Public Sub SetRptNew(ByVal Rptname As String)
        'Try
        '    Dim i As Integer
        '    Dim crxApp = New CRAXDDRT.Application
        '    Dim crxReport =  crxApp.OpenReport(Rptname, 1)
        '    Dim crxSubreportObject As CRAXDDRT.SubreportObject
        '    Dim crxSubReport As CRAXDDRT.Report
        '    For Each crxDataTable In crxReport.Database.Tables
        '        If DbAuth = "SQL" Then
        '            crxDataTable.SetLogOnInfo(servername, dbname, "advsys", "advsys")
        '        Else
        '            crxDataTable.SetLogOnInfo(servername, dbname, "<<Use Integrated Security>>")
        '        End If

        '        i = InStr(crxDataTable.Location, ".")
        '        If i = 0 Then
        '            crxDataTable.Location = dbname & ".dbo." & crxDataTable.Location
        '        Else
        '            crxDataTable.Location = dbname & Mid$(crxDataTable.Location, i)
        '        End If
        '        If Not crxDataTable.TestConnectivity Then
        '            MsgBox("Unable to connect to database.")
        '            crxReport = Nothing
        '            crxApp = Nothing
        '            Exit Sub
        '        End If
        '    Next
        '    'Subreports

        '    For Each crxSection In crxReport.Sections
        '        For Each ReportObject In crxSection.ReportObjects
        '            'test the objects to see if they're subreports
        '            If ReportObject.Kind = ReportObjectKind.SubreportObject Then
        '                crxSubreportObject = ReportObject
        '                'Finally, open the subreport and treat it as you would any other Report
        '                crxSubReport = crxSubreportObject.OpenSubreport
        '                For Each crxsDataTable In crxSubReport.Database.Tables
        '                    If DbAuth = "SQL" Then
        '                        crxsDataTable.SetLogOnInfo(servername, dbname, "advsys", "advsys")
        '                    Else
        '                        crxsDataTable.SetLogOnInfo(servername, dbname, "<<Use Integrated Security>>", vbNullString)
        '                    End If
        '                    i = InStr(crxsDataTable.Location, ".")
        '                    If i = 0 Then
        '                        crxsDataTable.Location = dbname & ".dbo." & crxsDataTable.Location
        '                    Else
        '                        crxsDataTable.Location = dbname & Mid$(crxsDataTable.Location, i)
        '                    End If
        '                    If Not crxsDataTable.TestConnectivity Then
        '                        MsgBox("Unable to connect subreport '" & crxSubreportObject.SubreportName & "' table '" & crxsDataTable.Name & "' to database.")
        '                        crxReport = Nothing
        '                        crxApp = Nothing
        '                        Exit Sub
        '                    End If
        '                Next
        '            End If
        '        Next
        '    Next
        '    crxReport.SaveAs(Rptname, CRAXDDRT.CRReportFileFormat.cr80FileFormat)
        'Catch ex As Exception
        '    MsgBox(ex.Message.ToString)
        'End Try

    End Sub


    'Public Sub setlocationRpt(ByVal Rptname As String)
    '    'Dim crxrep As AxCrystal.AxCrystalReport
    '    Try
    '        Dim crxApp As New CRAXDDRT.Application
    '        Dim crxRpt As CRAXDDRT.Report
    '        Dim crxTables As CRAXDDRT.DatabaseTables
    '        Dim crxTable As CRAXDDRT.DatabaseTable
    '        Dim crxSubreportObject As CRAXDDRT.SubreportObject
    '        Dim crxSubReport As CRAXDDRT.Report
    '        Dim crxSections As CRAXDDRT.Sections
    '        Dim crxSection As CRAXDDRT.Section
    '        crxRpt = crxApp.OpenReport(Rptname, 1)

    '        If DbAuth = "SQL" Then
    '            crxRpt.Database.Tables(1).SetLogOnInfo(servername, dbname, "advsys", "advsys")
    '        Else
    '            crxRpt.Database.Tables(1).SetLogOnInfo(servername, dbname)
    '        End If
    '        'crxRpt.Database.LogOnServer("pdsoledb.dll", servername, dbname)

    '        'Dim i As Integer
    '        'i = 0
    '        'Do While i < crxRpt.Database.Tables.Count
    '                                '    crxRpt.Database.Tables(i).SetLogOnInfo(servername, dbname)
    '                                '    i += 1
    '                                'Loop
    '                                crxTables = crxRpt.Database.Tables
    '                                For Each crxTable In crxTables
    '                                    With crxTable
    '                                        .Location = .Name
    '                                    End With
    '                                Next
    '                                crxSections = crxRpt.Sections

    '                                For i = 1 To crxSections.Count
    '                                    crxSection = crxSections(i)

    '                                    For j = 1 To crxSection.ReportObjects.Count

    '                                        If crxSection.ReportObjects(j).Kind = ReportObjectKind.SubreportObject Then
    '                                            crxSubreportObject = crxSection.ReportObjects(j)

    '                                            'Open the subreport, and treat like any other report
    '                                            crxSubReport = crxSubreportObject.OpenSubreport
    '                                            crxTables = crxSubReport.Database.Tables

    '                                            For Each crxTable In crxTables
    '                                                With crxTable
    '                                                    If DbAuth = "SQL" Then
    '                                                        .SetLogOnInfo(servername, dbname, "advsys", "advsys")
    '                                                    Else
    '                                                        .SetLogOnInfo(servername, dbname)
    '                                                    End If

    '                                                    .Location = .Name
    '                                                End With
    '                                            Next

    '                                        End If

    '                                    Next j

    '                                Next i
    '                                crxRpt.SaveAs(Rptname, CRAXDDRT.CRReportFileFormat.cr80FileFormat)
    '    Catch ex As Exception
    '        MsgBox(ex.Message.ToString)
    '    End Try
    'End Sub
    Public Function Checkrpt(ByVal rptname As String) As Boolean
        Checkrpt = True
        Try
            If FileIO.FileSystem.FileExists(rptname) = False Then
                MessageBox.Show("Report File " & rptname & " Not Found", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                Checkrpt = False
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Checkrpt
    End Function
    Public Function Calc_Loan_Balance(ByVal iLoanNo As Long, ByVal sDocDate As String, ByVal Final As Boolean) As Double
        Dim sSQL As String
        Dim sRST As New DataTable

        Dim yyRST As DataTable


        Dim sStartYear As String
        Dim dBalAmt As Double

        Try
            sStartYear = "2000-2001"

            dBalAmt = 0

            sSQL = "SELECT * FROM Year_master WHERE company_id = " & clsVariables.CompnyId
            yyRST = Returntable(sSQL, ob.getconnection)
            Dim dbnm As String
            If yyRST.Rows.Count > 0 Then
                Dim y As Integer
                Dim j As Integer
                y = 0
                Do While y < yyRST.Rows.Count
                    If ob.IfNullThen(yyRST.Rows(y).Item("year_id"), "") <> "1999-2000" Then
                        If ob.IfNullThen(yyRST.Rows(y).Item("YEAR_ID"), "") <= "2012-2013" Then
                            dbnm = OLDDbname
                        Else
                            dbnm = dbname
                        End If
                        If ob.IfNullThen(yyRST.Rows(y).Item("year_id"), "") = sStartYear Then
                            sSQL = "SELECT * FROM Loan_Opening_Balance"
                            sSQL = sSQL & "  WHERE company_id = " & clsVariables.CompnyId
                            sSQL = sSQL & " and year_id = " & aq(sStartYear)
                            sSQL = sSQL & " and Loan_No = " & iLoanNo & " ORDER by loan_no"
                            sRST = Returntable(sSQL, ob.getconnection(ob.Getconn(dbnm)))

                            j = 0
                            Do While j < sRST.Rows.Count
                                dBalAmt = dBalAmt + Val(ob.IfNullThen(sRST.Rows(j).Item("Loan_Opening"), 0))
                                j += 1
                            Loop
                            sRST.Clear()
                            sRST.Dispose()
                        End If

                        'Payment Data
                        sSQL = "SELECT Sum(isnull(payment_amount,0) - isnull(Advance_Installment,0)) as amount"
                        sSQL = sSQL & "  FROM Payment_Data"
                        sSQL = sSQL & "  WHERE company_id = " & clsVariables.CompnyId
                        sSQL = sSQL & " AND Doc_date <= " & aq(sFunction.DateConversion(sDocDate))
                        sSQL = sSQL & " and Loan_No = " & iLoanNo
                        sRST = Returntable(sSQL, ob.getconnection(ob.Getconn(dbnm)))
                        j = 0
                        Do While j < sRST.Rows.Count
                            dBalAmt = dBalAmt + Val(ob.IfNullThen(sRST.Rows(j).Item("Amount"), 0))
                            j += 1
                        Loop
                        sRST.Clear()
                        sRST.Dispose()

                        'Expence Data
                        sSQL = "SELECT sum(expence_amount) as amount FROM EXPENSE_DATA"
                        sSQL = sSQL & "  WHERE company_id = " & clsVariables.CompnyId
                        sSQL = sSQL & " AND Doc_date <= " & aq(sFunction.DateConversion(sDocDate))
                        sSQL = sSQL & " and Loan_No = " & iLoanNo
                        sRST = Returntable(sSQL, ob.getconnection(ob.Getconn(dbnm)))

                        j = 0
                        Do While j < sRST.Rows.Count
                            dBalAmt = dBalAmt + Val(ob.IfNullThen(sRST.Rows(j).Item("Amount"), 0))
                            j += 1
                        Loop
                        sRST.Clear()
                        sRST.Dispose()

                        'Receipt Data
                        sSQL = "SELECT Sum(Received_Amount) As Amount FROM Receipt_Data"
                        sSQL = sSQL & "  WHERE company_id = " & clsVariables.CompnyId
                        sSQL = sSQL & " AND Doc_date <= " & aq(sFunction.DateConversion(sDocDate))
                        sSQL = sSQL & " and Loan_No = " & iLoanNo
                        sRST = Returntable(sSQL, ob.getconnection(ob.Getconn(dbnm)))
                        j = 0
                        Do While j < sRST.Rows.Count
                            dBalAmt = dBalAmt - Val(ob.IfNullThen(sRST.Rows(j).Item("Amount"), 0))
                            j += 1
                        Loop
                        sRST.Clear()
                        sRST.Dispose()
                    End If
                    y += 1
                Loop
            End If
            yyRST.Clear()
            yyRST.Dispose()
            Calc_Loan_Balance = dBalAmt
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Calc_Loan_Balance
    End Function
    'Public Function PadString(ByVal txt As String, ByVal RequiredLength As Integer, ByVal bBeforeText As Boolean, ByVal chars As String) As String
    '    If Len(txt) < RequiredLength Then
    '        If bBeforeText Then
    '            PadString = Space(RequiredLength - Len(txt)) & txt
    '        Else
    '            PadString = txt & Space(RequiredLength - Len(txt))
    '        End If
    '    Else
    '        PadString = txt
    '    End If
    'End Function
    
    Public Function SqlDenomination_ledger_report(ByVal Cn As SqlConnection, Optional ByVal Tblname As String = "Denomination_ledger_report") As Boolean
        Dim isad As Boolean
        Try
            Dim sql As String
            sql = "Create Table " & UCase(Tblname) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_id int ," & vbCrLf
            sql = sql & " ip_Address Nvarchar(50)default ''," & vbCrLf
            sql = sql & " Doc_Type Int default 0," & vbCrLf
            sql = sql & " Doc_no int default 0," & vbCrLf
            sql = sql & " Sr_no int default 0," & vbCrLf
            sql = sql & " Doc_Date datetime," & vbCrLf
            sql = sql & " Department_id int ," & vbCrLf
            sql = sql & " Deno_id int ," & vbCrLf
            sql = sql & " opn_Qty float Default 0," & vbCrLf
            sql = sql & " opn_Rate float Default 0," & vbCrLf
            sql = sql & " opn_Amt float Default 0," & vbCrLf
            sql = sql & " Debit_Qty float Default 0," & vbCrLf
            sql = sql & " Debit_Rate float Default 0," & vbCrLf
            sql = sql & " Debit_Amt float Default 0," & vbCrLf
            sql = sql & " Credit_Qty float Default 0," & vbCrLf
            sql = sql & " Credit_Rate float Default 0," & vbCrLf
            sql = sql & " Credit_Amt float Default 0" & vbCrLf
            sql = sql & ")"
            isad = Execute(sql, Cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return isad
    End Function
    Public Function SqlNPA_report(ByVal Cn As SqlConnection, Optional ByVal Tblname As String = "NPA_Report") As Boolean
        Dim isad As Boolean
        Try
            Dim sql As String
            sql = "Create Table " & UCase(Tblname) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_id int ," & vbCrLf
            sql = sql & " ip_Address Nvarchar(50)default ''," & vbCrLf
            sql = sql & " Loan_No bigint," & vbCrLf
            sql = sql & " Balance_Amount float default 0," & vbCrLf
            sql = sql & " Over_Due_Amount float default 0," & vbCrLf
            sql = sql & " Slab_1_Amount float default 0 ," & vbCrLf
            sql = sql & " Slab_2_Amount float default 0 ," & vbCrLf
            sql = sql & " Slab_3_Amount float default 0 ," & vbCrLf
            sql = sql & " Slab_4_Amount float default 0 ," & vbCrLf
            sql = sql & " Slab_5_Amount float default 0 ," & vbCrLf
            sql = sql & " Slab_6_Amount float default 0 ," & vbCrLf
            sql = sql & " Loan_Due_Date Datetime " & vbCrLf
            sql = sql & ")"
            isad = Execute(sql, Cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return isad
    End Function
    Public Function SqlGold_Stock_report(ByVal Cn As SqlConnection, Optional ByVal Tblname As String = "Gold_Stock_report") As Boolean
        Dim isad As Boolean
        Try
            Dim sql As String
            sql = "Create Table " & UCase(Tblname) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_id int ," & vbCrLf
            sql = sql & " ip_Address Nvarchar(50)default ''," & vbCrLf
            sql = sql & " Loan_No bigint," & vbCrLf
            sql = sql & " Item_id int ," & vbCrLf
            sql = sql & " Open_Qnty float default 0," & vbCrLf
            sql = sql & " Open_Gross float default 0," & vbCrLf
            sql = sql & " Open_Net float default 0 ," & vbCrLf
            sql = sql & " In_Qnty float default 0 ," & vbCrLf
            sql = sql & " In_Gross float default 0 ," & vbCrLf
            sql = sql & " In_Net float default 0 ," & vbCrLf
            sql = sql & " Out_Qnty float default 0 ," & vbCrLf
            sql = sql & " Out_Gross float default 0 ," & vbCrLf
            sql = sql & " Out_Net float default 0 ," & vbCrLf
            sql = sql & " Bal_Qnty float default 0 ," & vbCrLf
            sql = sql & " Bal_Gross float default 0 ," & vbCrLf
            sql = sql & " Bal_Net float default 0 " & vbCrLf
            sql = sql & ")"
            isad = Execute(sql, Cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return isad
    End Function
    Public Function SqlLahani_Data(ByVal Cn As SqlConnection, Optional ByVal Tblname As String = "Lahani_Data") As Boolean
        Dim isad As Boolean
        Try
            Dim sql As String
            sql = "Create Table " & UCase(Tblname) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_id int ," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Doc_Date datetime," & vbCrLf
            sql = sql & " Member_id int," & vbCrLf
            sql = sql & " Coupon_no nvarchar(20)default ''," & vbCrLf
            sql = sql & " Remarks Nvarchar(500)default ''," & vbCrLf
            sql = sql & " Item_code int Default 0," & vbCrLf
            sql = sql & " Quantity Float Default 0," & vbCrLf
            sql = sql & " Add_DAte Datetime," & vbCrLf
            sql = sql & " User_name Nvarchar(50)default ''," & vbCrLf
            sql = sql & " Edit_Date Datetime," & vbCrLf
            sql = sql & " Edit_User_name Nvarchar(50)default ''," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address Nvarchar(50)default ''," & vbCrLf
            sql = sql & " mach_name Nvarchar(50)default ''" & vbCrLf
            sql = sql & " Primary Key(Company_id,Year_id,Doc_no)" & vbCrLf
            sql = sql & ")"
            isad = Execute(sql, Cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return isad
    End Function
    Public Function SqlCashCounterMain(ByVal Cn As SqlConnection, Optional ByVal Tblname As String = "CashCounter_main") As Boolean
        Dim isad As Boolean
        Try
            Dim sql As String
            sql = "Create Table " & UCase(Tblname) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & "Company_id int ," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type Int," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Doc_Date datetime," & vbCrLf
            sql = sql & " Department_id int," & vbCrLf
            sql = sql & " Remarks Nvarchar(500)default ''," & vbCrLf
            sql = sql & " Total_Amt float Default 0," & vbCrLf
            sql = sql & " Add_DAte Datetime," & vbCrLf
            sql = sql & " User_name Nvarchar(50)default ''," & vbCrLf
            sql = sql & " Edit_Date Datetime," & vbCrLf
            sql = sql & " Edit_User_name Nvarchar(50)default ''," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address Nvarchar(50)default ''," & vbCrLf
            sql = sql & " mach_name Nvarchar(50)default ''" & vbCrLf
            sql = sql & " Primary Key(Company_id,Year_id,Doc_Type,Doc_no)" & vbCrLf
            sql = sql & ")"
            isad = Execute(sql, Cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return isad
    End Function
    Public Function SqlCashCounterDetail(ByVal Cn As SqlConnection, Optional ByVal Tblname As String = "CashCounter_Detail") As Boolean
        Dim isad As Boolean
        Try
            Dim sql As String
            sql = "Create Table " & UCase(Tblname) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & "Company_id int ," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type Int," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Sr_no int," & vbCrLf
            sql = sql & " Doc_Date datetime," & vbCrLf
            sql = sql & " Account_id int," & vbCrLf
            sql = sql & " Amount float Default 0," & vbCrLf
            sql = sql & " Add_DAte Datetime," & vbCrLf
            sql = sql & " User_name Nvarchar(50)default ''," & vbCrLf
            sql = sql & " Edit_Date Datetime," & vbCrLf
            sql = sql & " Edit_User_name Nvarchar(50)default ''," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address Nvarchar(50)default ''," & vbCrLf
            sql = sql & " mach_name Nvarchar(50)default ''" & vbCrLf
            sql = sql & " Primary Key(Company_id,Year_id,Doc_Type,Doc_no,Sr_no)" & vbCrLf
            sql = sql & ")"
            isad = Execute(sql, Cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return isad
    End Function
    Public Function SqlCash_DenominationDetail(ByVal Cn As SqlConnection, Optional ByVal Tblname As String = "Cash_Denomination_Detail") As Boolean
        Dim isad As Boolean
        Try
            Dim sql As String
            sql = "Create Table " & UCase(Tblname) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & "Company_id int ," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type Int," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Sr_no int," & vbCrLf
            sql = sql & " Doc_Date datetime," & vbCrLf
            sql = sql & " Deno_id int," & vbCrLf
            sql = sql & " Qty float default 0," & vbCrLf
            sql = sql & " Rate float default 0," & vbCrLf
            sql = sql & " Amount float Default 0," & vbCrLf
            sql = sql & " Add_DAte Datetime," & vbCrLf
            sql = sql & " User_name Nvarchar(50)default ''," & vbCrLf
            sql = sql & " Edit_Date Datetime," & vbCrLf
            sql = sql & " Edit_User_name Nvarchar(50)default ''," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address Nvarchar(50)default ''," & vbCrLf
            sql = sql & " mach_name Nvarchar(50)default ''" & vbCrLf
            sql = sql & " Primary Key(Company_id,Year_id,Doc_Type,Doc_no,Sr_no)" & vbCrLf
            sql = sql & ")"
            isad = Execute(sql, Cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return isad
    End Function
    Public Function sqlDenomination_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Denomination_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Denomination_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Deno_Id int," & vbCrLf
            sql = sql & " Deno_Name Nvarchar(100) not null," & vbCrLf
            sql = sql & " Currancy_Id int," & vbCrLf
            sql = sql & " Value float default 0," & vbCrLf
            sql = sql & " Remarks nvarchar(500)default ''," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)default ''," & vbCrLf
            sql = sql & " mach_name Nvarchar(50)default ''" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Deno_id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlCurrancy_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Currancy_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Currancy_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Currancy_Id int," & vbCrLf
            sql = sql & " Currancy_name nvarchar(50)not Null," & vbCrLf
            sql = sql & " Logo nvarchar(250)default ''," & vbCrLf
            sql = sql & " Remarks nvarchar(500)default ''," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)default ''," & vbCrLf
            sql = sql & " mach_name Nvarchar(50)default ''" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Currancy_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function intstring(ByVal str As String, ByVal cnn As SqlConnection, Optional ByVal mark As String = ",") As String
        Dim dt1 As New DataTable
        Dim ss1 As String = ""
        Dim r As Integer
        dt1 = ob.ReturnTable(str, cnn)
        Do While r < dt1.Rows.Count
            ss1 = ss1 & dt1.Rows(r).Item(0) & mark
            r = r + 1
        Loop
        ss1 = Mid(ss1, 1, Len(ss1) - 1)
        Return ss1
    End Function
    Public Function GetMemberBalance(ByVal vmember_id As Double, ByVal VMemberExt As String, ByVal vColumn_id As Integer, ByVal cn As SqlClient.SqlConnection)
        GetMemberBalance = 0
        Try
            'Change 28/08/2015 Pramod
            Dim ssql As String = ""
            Dim daccountid As Integer
            ssql = "Select Account_Id from Column_Master where Company_id=" & clsVariables.CompnyId
            ssql = ssql & " and Column_Id=" & vColumn_id
            daccountid = FindOneinteger(ssql, cn)
            GetMemberBalance = ob.LoadMemberAccountBalance(daccountid, vmember_id, gFinYearEnd, cn)
            If GetMemberBalance < 0 Then
                GetMemberBalance = Math.Abs(GetMemberBalance)
            Else
                GetMemberBalance = -(GetMemberBalance)
            End If

            'end

            'Dim Bal As Decimal
            'Dim CBal As Decimal
            'Dim DBal As Decimal
            'Bal = 0
            'DBal = 0
            'CBal = 0
            'Dim dt As New DataTable
            'ssql = "Select sum(isnull(Dr_Opening,0))-sum(isnull(cr_opening,0)) FROM  "
            'ssql = ssql & " FINAL_PARTY_OPENING_BALANCE as B inner join Column_Master as C On B.Company_id=C.Company_id And B.Account_id=C.Account_id "
            'ssql = ssql & " WHERE B.company_id = " & clsVariables.CompnyId & " and B.year_id = " & aq(clsVariables.WorkingYear)
            'ssql = ssql & " and B.Member_Id=" & Val(vmember_id)
            'ssql = ssql & " and C.Column_Id=" & Val(vColumn_id)
            'Bal = Val(ob.FindOneString(ssql, cn))
            'If Bal > 0 Then
            '    DBal = Bal
            'Else
            '    CBal = Abs(Bal)
            'End If
            ''payment
            'ssql = "SELECT sum(amount) as amt"
            'ssql = ssql & " FROM Saving_Payment_Main  as pm,"
            'ssql = ssql & " saving_Payment_Detail as pd "
            'ssql = ssql & " WHERE pm.company_id = pd.company_id and pm.year_id = pd.year_id and pm.doc_type = pd.doc_type and pm.doc_no = pd.doc_no"
            'ssql = ssql & " and pm.company_id = " & clsVariables.CompnyId
            'ssql = ssql & " And Pm.Year_id=" & aq(clsVariables.WorkingYear)
            'ssql = ssql & " AND Pm.Doc_date <=" & aq(Format(Now.Date, "MM/dd/yyyy"))
            'ssql = ssql & " and Member_Id=" & Val(vmember_id)
            'ssql = ssql & " and Account_Ext=" & aq(VMemberExt)
            'ssql = ssql & " and Column_Id=" & Val(vColumn_id)
            ''Bal = Bal + Val(ob.FindOneString(ssql, cn))
            'DBal = DBal + Val(ob.FindOneString(ssql, cn))
            ''receipt
            'ssql = "SELECT sum(Doc_Amt) as amt "
            'ssql = ssql & " FROM saving_Receipt_Main  as rm,"
            'ssql = ssql & " SAving_Receipt_Detail as rd "
            'ssql = ssql & " WHERE rm.company_id = rd.company_id and rm.doc_type = rd.doc_type and rm.doc_no = rd.doc_no "
            'ssql = ssql & " and rm.year_id=rd.year_id"
            'ssql = ssql & " and rm.company_id = " & clsVariables.CompnyId & " and rm.year_id = " & aq(clsVariables.WorkingYear)
            'ssql = ssql & " AND Rm.Doc_date <=" & aq(Format(Now.Date, "MM/dd/yyyy"))
            'ssql = ssql & " and Member_Id=" & Val(vmember_id)
            'ssql = ssql & " and Account_Ext=" & aq(VMemberExt)
            'ssql = ssql & " and Column_Id=" & Val(vColumn_id)
            ''Bal = Bal - Val(ob.FindOneString(ssql, cn))
            'CBal = CBal + Val(ob.FindOneString(ssql, cn))
            ''Transfer To

            'ssql = "SELECT sum(amount) as amt FROM Daily_Transfer_Main as tm,Daily_Transfer_Detail  as td "
            'ssql = ssql & " WHERE tm.company_id = td.company_id and tm.year_id = td.year_id and tm.doc_no = td.doc_no "
            'ssql = ssql & " and tm.company_id = " & clsVariables.CompnyId & " and tm.year_id = " & aq(clsVariables.WorkingYear)
            'ssql = ssql & " AND tm.Doc_date <=" & aq(Format(Now.Date, "MM/dd/yyyy"))
            'ssql = ssql & " and td.Member_Id=" & Val(vmember_id)
            'ssql = ssql & " and td.Account_Ext=" & aq(VMemberExt)
            'ssql = ssql & " and td.Column_Id=" & Val(vColumn_id)
            ''Bal = Bal - Val(ob.FindOneString(ssql, cn))
            'CBal = CBal + Val(ob.FindOneString(ssql, cn))
            ''transfer From 
            'ssql = "SELECT sum(doc_amt) as amt FROM Daily_Transfer_Main as tm "
            'ssql = ssql & " WHERE  company_id = " & clsVariables.CompnyId & " and year_id = " & aq(clsVariables.WorkingYear)
            'ssql = ssql & " AND tm.Doc_date <=" & aq(Format(Now.Date, "MM/dd/yyyy"))
            'ssql = ssql & " and tm.Member_Id=" & Val(vmember_id)
            'ssql = ssql & " and tm.Account_Ext=" & aq(VMemberExt)
            'ssql = ssql & " and tm.Column_Id=" & Val(vColumn_id)
            ''Bal = Bal + Val(ob.FindOneString(ssql, cn))
            'DBal = DBal + Val(ob.FindOneString(ssql, cn))


            ''Account interest
            'ssql = "SELECT sum(amount) as intamt "
            'ssql = ssql & " FROM saving_Interest_Data "
            'ssql = ssql & " WHERE company_id = " & clsVariables.CompnyId
            'ssql = ssql & " and year_id = " & aq(clsVariables.WorkingYear)
            'ssql = ssql & " and Member_id=" & Val(vmember_id)
            'ssql = ssql & " and Account_Ext=" & aq(VMemberExt)
            'If vColumn_id = 1 Then
            '    ssql = ssql & " AND Column_Id = 2" ' & Val(vColumn_id)

            'End If
            'ssql = ssql & " AND posting_date<=" & aq(Format(Now.Date, "MM/dd/yyyy"))
            ''Bal = Bal + ob.RoundOff(Val(ob.FindOneString(ssql, cn)), 1, AdoFunc.RoundOffConstants.slNearest)
            'CBal = CBal + ob.RoundOff(Val(ob.FindOneString(ssql, cn)), 1, AdoFunc.RoundOffConstants.slNearest)


            ''interest
            'ssql = "SELECT sum(amount) as intamt "
            'ssql = ssql & " FROM saving_Interest_Data "
            'ssql = ssql & " WHERE company_id = " & clsVariables.CompnyId
            'ssql = ssql & " and year_id = " & aq(clsVariables.WorkingYear)
            'ssql = ssql & " and Member_id=" & Val(vmember_id)
            'ssql = ssql & " and Account_Ext=" & aq(VMemberExt)
            'ssql = ssql & " AND Column_Id = " & Val(vColumn_id)
            'ssql = ssql & " AND posting_date<=" & aq(Format(Now.Date, "MM/dd/yyyy"))
            ''Bal = Bal + Val(ob.FindOneString(ssql, cn))
            'CBal = CBal + Val(ob.FindOneString(ssql, cn))

            'GetMemberBalance = CBal - DBal

        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return GetMemberBalance
    End Function
    Public Function sqlAddjustment_Detail(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Addjustment_Detail") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Addjustment_Detail"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_id int ," & vbCrLf
            sql = sql & "  Doc_Type int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Sr_no int," & vbCrLf
            sql = sql & " Item_id int," & vbCrLf
            sql = sql & " Qnty float default 0," & vbCrLf
            sql = sql & " Add_User Nvarchar(20) default ''," & vbCrLf
            sql = sql & " Add_Date Datetime ," & vbCrLf
            sql = sql & " Edit_User Nvarchar(20) default ''," & vbCrLf
            sql = sql & " Edit_Date Datetime ," & vbCrLf
            sql = sql & " Revision int default 0 ," & vbCrLf
            sql = sql & " Ip_Address nvarchar(50)default '',"
            sql = sql & " Mach_Name nvarchar(50)default '',"
            sql = sql & " Primary Key(Company_id,Year_id,Doc_Type,Doc_No,Sr_no)"
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlAddjustment_main(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Addjustment_Main") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Addjustment_Main"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_id int ," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Doc_Date Datetime ," & vbCrLf
            sql = sql & " Remarks Nvarchar(500)default ''," & vbCrLf
            sql = sql & " Add_User Nvarchar(20) default ''," & vbCrLf
            sql = sql & " Add_Date Datetime ," & vbCrLf
            sql = sql & " Edit_User Nvarchar(20) default ''," & vbCrLf
            sql = sql & " Edit_Date Datetime ," & vbCrLf
            sql = sql & " Revision int default 0 ," & vbCrLf
            sql = sql & " Ip_Address nvarchar(50) default '',"
            sql = sql & " Mach_Name nvarchar(50) default '',"
            sql = sql & " Primary Key(Company_id,Year_id,Doc_Type,Doc_No)"
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function LoadReportGrid(ByVal sender As Object, ByVal cn As SqlConnection) As DataTable
        Dim ssql As String
        ssql = "SELECT Rep_Header, Rep_Rpt,  (CASE WHEN isnull(R.Direct_Print, '0') = '0' THEN 'NO' ELSE 'YES' END) AS 'Direct_Print',Sr_no "
        ssql = ssql & " FROM REPORT_MASTER AS R INNER JOIN"
        ssql = ssql & " FORM_INFO as F ON R.Form_id = F.form_id "
        ssql = ssql & " where f.Form_name=" & aq(sender.tag)
        ssql = ssql & " order by Sr_no"
        Dim dt As New DataTable
        dt = Returntable(ssql, cn)
        Return dt

    End Function
    Public Function formatdg(ByVal dg As DataGridView) As DataGridView
        With dg
            .Columns(3).Width = 40
            .Columns(3).Visible = True
            .Columns(2).Visible = False
            If clsVariables.UserName <> "admin" And clsVariables.UserName <> "prmd" Then
                .Columns(1).Visible = False
                .Columns(3).Visible = False
            End If

            .Columns(0).Width = 440
            .Columns(1).Width = 200
            .Columns(2).Width = 50
            .Columns(0).HeaderText = "Report Header"
            .Columns(1).HeaderText = "Rpt Name"
            .Columns(2).HeaderText = "DP"
        End With
        Return dg
    End Function
    Public Sub insertreport(ByVal cn As SqlConnection)
        Try
            Dim ssql As String
            ob.Execute("Select * into report_master" & Now.Day & Now.Month & Now.Year & Now.Hour & Now.Minute & Now.Second & " from Report_master", cn)
            ob.Execute("delete from report_Master", cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "199,'Details','Application Inward Report','ApplicationInwardReport.Rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "200,'Details','Share Issue Report','ShareIssueReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "200,'Details','Sabhasad Register Report','SabhasadRegisterReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "200,'Details','Share Register Report','ShareRegisterReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "201,'Details','Share Receipt Report','ShareReceiptReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "202,'Details','Share Transfer Report','ShareTransferReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "203,'Details','Dividend Payment Report','DividendPaymentReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "203,'Details','Dividend Payment Year Wise Summary','DividendPaymentYearWiseSummary.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "193,'Details','Daily Passing Report','PassingReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "193,'Details','Passing Column Summary Report','PassingColumnWiseSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "193,'Details','Passing Date Summary Report','PassingDateWiseSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "193,'Details','Gold Receipt Report','GoldReceiptReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "193,'Details','Passing Date and Column Summary Report','PassingDateColumnWiseSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "194,'Details','Daily Payment Report','PaymentReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "194,'Details','Payment Column Wise Summary Report','PaymentColumnWiseSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "194,'Details','Payment Date Wise Summary Report','PaymentDateWiseSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "194,'Details','Taran Detail Report','TaranDetailReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "194,'Details','Payment Date and Column Summary Report','PaymentDateColumnWiseSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "195,'Details','Daily Receipt Report','ReceiptReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "195,'Details','Receipt Column Summary Report','ReceiptColumnWiseSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "195,'Details','Receipt Date Wise Summary Report','ReceiptDateWiseSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "195,'Details','Receipt Date + Column Wise Receipt Summary Report','ReceiptDate+ColumnWiseReceiptSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "195,'Details','Receipt Date + Column Wise Interest Summary Report','ReceiptDate+ColumnWiseInterestSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "195,'Details','Receipt Date + Column Wise Penalty Summary Report','ReceiptDate+ColumnWisePenaltySummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "195,'Details','Year Wise Receipt Summary Report','YearWiseReceiptReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "195,'Details','Year Wise Over Due Loan Receipt Summary Report','YearWiseOpenNewCloseRunningLoanReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "195,'Details','Year Wise Receipt Summary Report (Columner)','YearWiseReceiptReportColumner.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "195,'Details','Year Wise OD Loan Receipt Summary (Columner)','YearWiseReceiptReportColumner.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "195,'Details','Receipt Column Summary Report (Combined)','ReceiptColumnSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "195,'Details','Daily Laps Report','LapsReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "196,'Details','Daily Expence Report','ExpenceReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "196,'Details','Expence Column Wise Summary Report','ExpenceColumnWiseSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "196,'Details','Expence Date Wise Summary Report','ExpenceDateWiseSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "196,'Details','Daily Expence Report (With Jamin)','ExpenceReportWithJamin.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "196,'Details','Expence Date+Column Wise Summary Report','ExpenceDate+ColumnWiseSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "197,'Details','Daily Gold Return Report','GoldReturnReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "198,'Details','Daily Claim Report','ClaimReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "191,'Details','Daily Receipt Report','SavingReceiptReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "191,'Details','Receipt Summary Report','SavingReceiptSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "192,'Details','Daily Payment Report','SavingPaymentReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "192,'Details','Payment Summary Report','SavingPaymentSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "189,'Details','Daily Receipt Report','SavingReceiptReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "189,'Details','Receipt Summary Report','SavingReceiptSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "190,'Details','Daily Payment Report','SavingPaymentReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "190,'Details','Payment Summary Report','SavingPaymentSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "186,'Details','Daily Receipt Report','SavingReceiptReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "186,'Details','Receipt Summary Report','SavingReceiptSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "187,'Details','Daily Payment Report','SavingPaymentReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "187,'Details','Payment Summary Report','SavingPaymentSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "188,'Details','Daily Receipt Report','DailyTransferReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "188,'Details','Receipt Summary Report','DailyTransferSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "183,'Details','Daily Payment Report','FixedReceiptReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "183,'Details','Column Wise Receipt Summary Report','FixedColumnWiseReceiptSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "183,'Details','Date Wise Receipt Summary Report','FixedReceiptSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "183,'Details','Date + Column Wise Receipt Summary Report','FixedDate+ColumnWiseReceiptSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "183,'Details','Village Wise Receipt Summary Report','FixedVillageWiseReceiptSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "183,'Details','Month Wise Receipt Summary Report','FixedMonthWiseReceiptSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "183,'Details','Thapan Printing','FixedReceiptPrintingSign.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "184,'Details','Daily Payment Report','FixedPaymentReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "184,'Details','Column Wise Payment Summary Report','FixedColumnWisePaymentSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "184,'Details','Date Wise Payment Summary Report','FixedPaymentSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "184,'Details','Village Wise Payment Summary Report','FixedVillageWisePaymentSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "185,'Details','Daily Reserve Payment Report','FixedReservePaymentReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "185,'Details','Daily Renewal Report','FixedReservePaymentReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "180,'Details','Daily Receipt Report','GramlaxmiReceiptReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "180,'Details','Column Wise Receipt Summary Report','GramlaxmiColumnWiseReceiptSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "180,'Details','Date Wise Receipt Summary Report','GramlaxmiReceiptSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "180,'Details','Date + Column Wise Receipt Summary Report','GramlaxmiDate+ColumnWiseReceiptSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "180,'Details','Village Wise Receipt Summary Report','GramlaxmiVillageWiseReceiptSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "180,'Details','Month Wise Receipt Summary Report','GramlaxmiMonthWiseReceiptSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "180,'Details','Thapan Printing','GramlaxmiReceiptPrintingSign.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "181,'Details','Daily Payment Report','GramLaxmiPaymentReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "181,'Details','Column Wise Payment Summary Report','GramLaxmiColumnWisePaymentSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "181,'Details','Date Wise Payment Summary Report','GramLaxmiPaymentSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "181,'Details','Village Wise Payment Summary Report','GramLaxmiVillageWisePaymentSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "182,'Details','Daily Reserve Payment Report','GramLaxmiReservePaymentReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "182,'Details','Daily Renewal Report','GramLaxmiReservePaymentReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "177,'Details','Daily Receipt Report','KamDhenuReceiptReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "177,'Details','Column Wise Receipt Summary Report','KamDhenuColumnWiseReceiptSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "177,'Details','Date Wise Receipt Summary Report','KamDhenuReceiptSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "177,'Details','Date + Column Wise Receipt Summary Report','KamDhenuDate+ColumnWiseReceiptSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "177,'Details','Village Wise Receipt Summary Report','KamDhenuVillageWiseReceiptSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "177,'Details','Month Wise Receipt Summary Report','KamDhenuMonthWiseReceiptSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "177,'Details','Thapan Printing','KamDhenuReceiptPrintingSign.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "178,'Details','Daily Payment Report','KamDhenuPaymentReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "178,'Details','Column Wise Payment Summary Report','KamDhenuColumnWisePaymentSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "178,'Details','Date Wise Payment Summary Report','KamDhenuPaymentSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "178,'Details','Village Wise Payment Summary Report','KamDhenuVillageWisePaymentSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "179,'Details','Daily Reserve Payment Report','KamDhenuReservePaymentReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "174,'Details','Daily Payment Report','InvestmentPaymentReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "174,'Details','Column Wise payment Summary Report','InvestmentColumnWisePaymentSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "174,'Details','Date Wise Payment Summary Report','InvestmentpaymentSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "174,'Details','Date + Column Wise Payment Summary Report','InvestmentDate+ColumnWisePaymentSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "174,'Details','Village Wise Payment Summary Report','InvestmentVillageWisepaymentSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "174,'Details','Month Wise payment Summary Report','InvestmentMonthWisePaymentSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "174,'Details','Thapan Printing','InvestmentPaymentPrintingSign.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "175,'Details','Daily Receipt Report','InvestmentReceiptReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "175,'Details','Column Wise Receipt Summary Report','InvestmentColumnWiseReceiptSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "175,'Details','Date Wise Receipt Summary Report','InvestmentReceiptSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "175,'Details','Village Wise Receipt Summary Report','InvestmentVillageWiseReceiptSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "176,'Details','Daily Reserve Receipt Report','InvestmentReserveReceiptReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "170,'Details','Locker Issue Report','LockerIssueReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "171,'Details','Locker Operation Report','LockerOperationReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "172,'Details','Locker Key Loss Report','LockerKeyLossReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "169,'Details','Daily Purchase Report','DeadStockPurchaseReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "169,'Details','Column Wise Purchase Summary Report','DeadStockPurchaseSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "160,'Details','Transaction Report','TransactionReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "161,'Details','Payroll Register','PayrollRegister.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "161,'Details','Payroll Bank Statement','PayrollBankStatement.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "161,'Details','Payslip','PayslipPrinting.rpt',0,1)"
            ob.Execute(ssql, cn)


            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "162,'Details','Transaction Report','PayrollAddDedReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "162,'Details','Transaction Summary Report','PayrollAddDedSummary.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "163,'Details','Leave Wages Add Report','LeaveWagesAddReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "163,'Details','Leave Wages Less Report','LeaveWagesLessReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "164,'Details','P.F. Report','PFReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "165,'Details','Leave Ledger Report','LeaveLedgerReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "165,'Details','Leave Balance Report','LeaveBalanceReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "166,'Details','Bonus Report','BonusReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "166,'Details','Bonus Report','BonusUpto6000Report.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "166,'Details','Bonus Ex-Gratia Report','BonusExGratiaReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "167,'Details','Gross Earning Report','GrossEarningReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "167,'Details','Gross Earning Total Report','GrossEarningTotalReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "168,'Details','Gross P.F. Report','GrossPFReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "159,'Details','Daily Supplimentary Report','SupplimentaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "159,'Details','Daily Supplimentary Report (View Date)','SupplimentaryReportView.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "159,'Details','Tarij Report','SupplimentryTarijReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "159,'Details','Month Wise Summary Report','SupplimentryMonthwiseSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "155,'Details','Daily Rojmal Report','NewRojmalReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "155,'Details','Daily Cash Balance Report','DailyCashBalanceReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "156,'Details','Bank Book Report','BankBookReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "157,'Details','Bank Summary Report','BankBalanceSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "258,'Details','Share Ledger Report','ShareLedgerReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "259,'Details','Member Balance Report','MemberBalanceReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "259,'Details','Member Balance Report With Address','MemberBalanceReportWithAddress.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "259,'Details','Certificate Balance Report','CertiBalanceReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "251,'Details','Loan Ledger Report (Yearly)','LoanLedgerReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "251,'Details','Loan Ledger Report (Combined)','LoanLedgerReport.rpt',0,1)"
            ob.Execute(ssql, cn)


            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "252,'Details','Loan Balance Report','LoanBalanceReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "252,'Details','Loan Village Balance Report','LoanVillageBalanceReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "252,'Details','Loan Only Balance Report','LoanOnlyBalanceReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "252,'Details','Loan Only Balance (Column Wise Summary) Report','LoanOnlyBalanceColumnWiseReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "252,'Details','Loan Only Interest Balance Report','LoanOnlyInterestBalanceReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "252,'Details','Loan Balance Report New','LoanBalanceReportNew.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "252,'Details','Loan Balance Confirmaion Report','LoanBalanceConfirmationLetter.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "254,'Details','Interest Reserve Report','InterestReserveReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "255,'Details','Taran Due Report','TaranDueReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "256,'Details','Loan Over Due Report (With Jamin)','LoanOverDueReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "256,'Details','Loan Over Due Report (Without Jamin)','LoanOverDueReportWithoutJamin.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "256,'Details','Loan Over Due Report (Only List)','LoanOverDueReportOnlyList.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "256,'Details','Loan Over Due Column Wise Summary Report','LoanOverDueColumnWiseSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "256,'Details','Loan Over Due Letter','LoanOverDueLetter.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "256,'Details','Gold Over Due Letter','GoldLoanOverDueLetter.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "256,'Details','Loan Over Due Report (Year Slab)','LoanOverDueColumn+YearWiseSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "256,'Details','Gold Over Due Final Letter','GoldLoanOverDueFinalLetter.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "256,'Details','Gold Over Due Haraji Letter','GoldLoanOverDueHarajiLetter.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "256,'Details','Gold Over Due Report','LoanOverDueReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "256,'Details','Loan Balance Report','LoanBalanceReportWithoutJamin.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "256,'Details','Loan Over Due Report (With Jamin)(Only Balance)','LoanOverDueReportOnlyBalance.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "256,'Details','Loan Over Due Report (Without Jamin)(Only Balance)','LoanOverDueReportWithoutJaminOnlyBalance.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "256,'Details','Loan Over Due Report (Only List)(Only Balance)','LoanOverDueReportOnlyListOnlyBalance.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "256,'Details','Loan Over Due Report (Year Slab) (Only Balance)','LoanOverDueColumn+YearWiseSummaryReportOnlyBalance.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "256,'Details','Loan Over Due Column Wise Summary Report (Only Balance)','LoanOverDueColumnWiseSummaryReportOnlyBalance.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "256,'Details','Loan Over Due Report (New)','LoanOverDueReportNew.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "256,'Details','Loan Over Due Report (Without Jamin) - (New)','LoanOverDueReportWithoutJaminNew.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "257,'Details','Loan Installment Due Report (With Jamin)','LoanInstallmentDueReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "257,'Details','Loan Installment Due Report (Without Jamin)','LoanInstallmentDueReportWithoutJamin.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "257,'Details','Loan Installment Due Report (Only List)','LoanInstallmentDueReportOnlyList.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "257,'Details','Loan Installment Due Column Wise Summary Report','LoanInstallmentDueColumnWiseSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "257,'Details','Loan Installment Due Letter','LoanInstallmentDueLetter.rpt',0,1)"
            ob.Execute(ssql, cn)


            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "247,'Details','Member Ledger Reports','SavingMemberLedgerReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "247,'Details','Member Ledger Report (Combined)','SavingMemberLedgerReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "242,'Details','Member Ledger Reports','SavingMemberLedgerReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "242,'Details','Member Ledger Report (Combined)','SavingMemberLedgerReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "236,'Details','Member Ledger Reports','SavingMemberLedgerReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "236,'Details','Member Ledger Report (Combined)','SavingMemberLedgerReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "236,'Details','Member Ledger Report (Transfer Summarised)','SavingmemberLedgerReportTrfSumm.rpt',0,1)"
            ob.Execute(ssql, cn)


            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "248,'Details','Member Balance Report','SavingMemberBalanceReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "248,'Details','Village Balance Report','SavingMemberBalanceVillageWiseReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "248,'Details','No Transaction Checking Report','SavingMemberBalReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "248,'Details','Member Balance Summary Report','SavingMemberBalSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)


            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "243,'Details','Member Balance Report','SavingMemberBalanceReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "243,'Details','Village Balance Report','SavingMemberBalanceVillageWiseReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            'ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            'ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            'ssql = ssql & "243,'Details','No Transaction Checking Report','SavingMemberBalReport.rpt',0,1)"
            'ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "243,'Details','Member Balance Summary Report','SavingMemberBalSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "237,'Details','Member Balance Report','SavingMemberBalanceReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "237,'Details','Village Balance Report','SavingMemberBalanceVillageWiseReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            'ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            'ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            'ssql = ssql & "237,'Details','No Transaction Checking Report','SavingMemberBalReport.rpt',0,1)"
            'ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "237,'Details','Member Balance Summary Report','SavingMemberBalSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "249,'Details','Member Balance With Interest Report','SavingMemberBalWithInterestReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "244,'Details','Member Balance With Interest Report','SavingMemberBalWithInterestReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "238,'Details','Member Balance With Interest Report','SavingMemberBalWithInterestReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "250,'Details','Interest Reserve Report','SavingInterestReserveReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "245,'Details','Interest Reserve Report','SavingInterestReserveReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "239,'Details','Interest Reserve Report','SavingInterestReserveReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "246,'Details','Agent Commission Report','AgentCommissionReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "246,'Details','Agent Summary Report','AgentSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "240,'Details','Agent Commission Report','AgentCommissionReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "240,'Details','Agent Summary Report','AgentSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "241,'Details','Agent Collection Form','AgentCollectionForm.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "229,'Details','Member Ledger Report','FixdLedgerReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "230,'Details','Member Balance Report','FixdMemberBalanceReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "230,'Details','Member Fixd Wise Balance Report','FixdmemberFixdBalanceReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "231,'Details','Fixd Balance(New) Report','FixdBalNewReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "231,'Details','Fixd Balance(New) Village Report','FixdBalNewVillageReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "231,'Details','Fixd Balance (Column Wise) Report','FixdBalColumnWiseReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "231,'Details','Fixd Balance (Column + % Wise) Report','FixdBalColumn+PercentageWiseReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "232,'Details','Fixd Due Report','FixdDueReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "232,'Details','Fixd Due Column Summary Report','FixdDueColumnSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "233,'Details','Interest Reserve Report','FixdInterestReserveReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "234,'Details','Member Ledger Report','FixdColumnWiseInOutSummary.rpt',0,1)"
            ob.Execute(ssql, cn)


            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "235,'Details','Interest Slab Report','FixdInterestSlabReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "222,'Details','Gram-Laxmi Member Ledger Report','GramLaxmiLedgerReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "223,'Details','Member Balance Report','FixdMemberBalanceReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "223,'Details','Member Fixd Wise Balance Report','FixdmemberFixdBalanceReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "224,'Details','Gram-Laxmi Balance(New) Report','GramLaxmiBalNewReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "224,'Details','Gram-Laxmi Balance(New) Village Report','GramLaxmiBalNewVillageReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "224,'Details','Gram-Laxmi Balance (Column Wise) Report','GramLaxmiBalColumnWiseReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "224,'Details','Gram Laxmi Balance (Column + % Wise) Report','GramLaxmiBalColumn+PercentageWiseReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "225,'Details','Gram-Laxmi Due Report','GramLaxmiDueReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "225,'Details','Gram-Laxmi Due Column Summary Report','GramLaxmiDueColumnSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "226,'Details','Gram-Laxmi Interest Reserve Report','GramLaxmiInterestReserveReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "227,'Details','Member Ledger Report','GramLaxmiColumnWiseInOutSummary.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "228,'Details','Interest Slab Report','GramLaxmiInterestSlabReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "228,'Details','Interest Slab Report','GramLaxmiInterestSlabReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "218,'Details','KamDhenu Member Ledger Report','KamDhenuLedgerReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "219,'Details','Certificate Due Report','KamDhenuCertificateDueReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "220,'Details','KamDhenu Member Balance Report','KamDhenuMemberBalanceReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "220,'Details','KamDhenu Member Fixd Wise Balance Report','KamDhenumemberFixdBalanceReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "221,'Details','KamDhenu Interest Reserve Report','KamDhenuInterestReserveReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "215,'Details','Member Ledger Report','InvestmentLedgerReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "215,'Details','Member Ledger Report (Combined)','InvestmentLedgerReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "216,'Details','Member Balance Report','InvestmentMemberBalanceReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "216,'Details','Member Fixd Wise Balance Report','InvestmentmemberFixdBalanceReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "217,'Details','Interest Reserve Report','InvestmentInterestReserveReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "213,'Details','Member Ledger Report','LockerMemberLedgerReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "214,'Details','Locker Rent Due Report','LockerRentDueReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "214,'Details','Locker Rent Due Letter','LockerRentDueLetter.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "211,'Details','Dead Stock  Ledger Report','DeadStockLedgerReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "212,'Details','Mmeber Balance Report','DeadStockBalanceDetailReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "212,'Details','Mmeber DeadStock Wise Balance Report','DeadStockBalanceDetailReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "209,'Details','Party Ledger Report','SuppliPartyLedgerReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "209,'Details','Party Tarij Report','SupplitarijReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "210,'Details','Party Balance Report','SuppliPartyBalanceReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            'ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            'ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            'ssql = ssql & "210,'Details','Party Balance Report','SuppliPartyBalanceReport.rpt',0,1)"
            'ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "204,'Details','Account Ledger Report','FinalAccountLedgerReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "204,'Details','Account Ledger DateWise Report','FinalAccountLedgerDatewiseReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "205,'Details','Account Interest Ledger','FinalAccountInterestLedgerReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "206,'Details','Party Ledger Report','FinalPartyLedgerReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "206,'Details','Party Tarij Report','FinalPartyTarijReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "207,'Details','Party Balance Report','FinalPartyBalanceReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "208,'Details','Bank Passbook Report','FinalBankPassbookReport.rpt',0,1)"
            ob.Execute(ssql, cn)


            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "260,'Details','Tarij Report','FinalTarijReport.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "261,'Details','Trial Balance','FinalTrialBalance.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "261,'Details','Trial Balance 'T' Format','FinalTrialBalanceTFormat.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "262,'Details','Trading Account','FinalTradingAccount.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "262,'Details','Group Wise Trading Account','FinalTradingGroupWiseTradingAccount.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "263,'Details','Profit & Loss Account','FundProfitLossAccount.rpt',0,1)"
            ob.Execute(ssql, cn)

            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "264,'Details','Balance Sheet','FinalBalanceSheet.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "264,'Details','Balance Sheet'T' Format','FinalBalanceSheettFormat.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "173,'Details','Locker Payment / Receipt Report','LockerPaymentReceiptReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "173,'Details','Locker Payment / Receipt Summary Report','LockerPaymentReceiptSummaryReport.rpt',0,1)"
            ob.Execute(ssql, cn)
            ssql = "Insert into Report_Master (Sr_no,Form_Id,Group_name,Rep_Header,Rep_Rpt,Direct_Print,Status) values("
            ssql = ssql & ob.FindOneinteger("Select isnull(max(Sr_no),0)+1 from Report_master", cn) & ","
            ssql = ssql & "158,'Details','Journal Book Report','FinalJournalBookReport.rpt',0,1)"
            ob.Execute(ssql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Function sqlReport_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Report_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Report_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Sr_no int," & vbCrLf
            sql = sql & " Form_id int," & vbCrLf
            sql = sql & " Group_Name nvarchar(500)," & vbCrLf
            sql = sql & " Rep_Header nvarchar(500)," & vbCrLf
            sql = sql & " Rep_Rpt nvarchar(100)," & vbCrLf
            sql = sql & " Direct_Print Bit default 0," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Sr_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function CheckAccountGroupMaster(ByVal GroupId As Integer, ByVal cn As SqlConnection) As Boolean
        Try
            Dim sql As String
            sql = "Select Count(*) from Account_master where group_id=" & GroupId & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckAccountGroupMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Account_master where Trading_group_id=" & GroupId & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckAccountGroupMaster = True
                Exit Function
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function CheckbookGroupMaster(ByVal GroupId As Integer, ByVal cn As SqlConnection) As Boolean
        Try
            Dim sql As String
            Dim GroupName As String
            GroupName = FindOneString("Select Book_Group_name from Book_Group_master where Book_Group_id=" & Val(GroupId), cn)
            sql = "Select Count(*) from Book_master where Book_Group_Name=" & aq(GroupName) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckbookGroupMaster = True
                Exit Function
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function CheckVoucherGroupMaster(ByVal Groupid As Integer, ByVal cn As SqlConnection) As Boolean
        Try
            Dim sql As String
            sql = "Select Count(*) from VOUCHER_MASTER where Doc_Group_Id=" & Val(Groupid) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckVoucherGroupMaster = True
                Exit Function
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function CheckVoucherMaster(ByVal Groupid As Integer, ByVal cn As SqlConnection) As Boolean
        Try
            Dim sql As String
            
            sql = "Select Count(*) from Final_Rojmal_Data where Doc_TYpe=" & Val(Groupid) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckVoucherMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Bank_Main where Doc_TYpe=" & Val(Groupid) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckVoucherMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Bank_Detail where Doc_TYpe=" & Val(Groupid) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckVoucherMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Final_Journal_Main where Doc_TYpe=" & Val(Groupid) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckVoucherMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Final_Journal_Detail where Doc_TYpe=" & Val(Groupid) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckVoucherMaster = True
                Exit Function
            End If
            

        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function CheckColumnMaster(ByVal GroupId As Integer, ByVal cn As SqlConnection) As Boolean
        Try
            Dim sql As String
            sql = "Select Count(*) from SAVING_RECEIPT_DETAIL where Column_id=" & Val(GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckColumnMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from SAVING_Payment_DETAIL where Column_id=" & Val(GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckColumnMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Receipt_DATA where Column_id=" & Val(GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckColumnMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Passing_Data where Column_id=" & Val(GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckColumnMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from PASSING_DATA where Column_id=" & Val(GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckColumnMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Expense_Data where Column_id=" & Val(GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckColumnMaster = True
                Exit Function
            End If
          
            sql = "Select Count(*) from KamDhenu_Receipt_Data where Column_id=" & Val(GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckColumnMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from KamDhenu_Payment_Data where Column_id=" & Val(GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckColumnMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from kamDhenu_RESERVE_PAYMENT_DATA where Column_id=" & Val(GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckColumnMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Investment_RESERVE_PAYMENT_DATA where Column_id=" & Val(GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckColumnMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Investment_Receipt_Data where Column_id=" & Val(GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckColumnMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Investment_Payment_Data where Column_id=" & Val(GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckColumnMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Gram_Laxmi_RESERVE_PAYMENT_DATA where Column_id=" & Val(GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckColumnMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Gram_Laxmi_Receipt_Data where Column_id=" & Val(GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckColumnMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Gram_Laxmi_Payment_Data where Column_id=" & Val(GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckColumnMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Fixd_Receipt_Data where Column_id=" & Val(GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckColumnMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Fixd_payment_Data where Column_id=" & Val(GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckColumnMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Fixd_Opening_Balance where Column_id=" & Val(GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckColumnMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Fixd_Interest_Date_Data where Column_id=" & Val(GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckColumnMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Dead_Stock_Purchase_Data where Column_id=" & Val(GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckColumnMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from DAILY_TRANSFER_MAIN where Column_id=" & Val(GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckColumnMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Fixd_Opening_Balance where Column_id=" & Val(GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckColumnMaster = True
                Exit Function
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function CheckBookMaster(ByVal GroupId As Integer, ByVal cn As SqlConnection) As Boolean
        Try
            Dim sql As String
            sql = "Select Count(*) from Suppli_Rojmal_Data where Book_id=" & (GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckBookMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from ROJMAL_DATA where Book_id=" & (GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckBookMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Final_Rojmal_Data where Book_id=" & (GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckBookMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Bank_Main where Book_id=" & (GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckBookMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Suppli_Rojmal_Data where Book_id=" & (GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckBookMaster = True
                Exit Function
            End If

        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function CheckUserDepartmentMaster(ByVal GroupId As String, ByVal cn As SqlConnection) As Boolean
        Try
            Dim sql As String
            sql = "Select Count(*) from LoginMst where Department_id=" & Val(GroupId)
            If FindOneinteger(sql, cn) > 0 Then
                CheckUserDepartmentMaster = True
                Exit Function
            End If

            sql = "Select Count(*) from Form_info where Department_id=" & Val(GroupId) '& " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckUserDepartmentMaster = True
                Exit Function
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function CheckEmployeeMaster(ByVal GroupId As String, ByVal cn As SqlConnection) As Boolean
        Try
            Dim sql As String
            sql = "Select Count(*) from Transaction_Data where Employee_id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckEmployeeMaster = True
                Exit Function
            End If

            sql = "Select Count(*) from Paid_Data where Employee_id=" & Val(GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckEmployeeMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Leave_Data where Employee_id=" & Val(GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckEmployeeMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Leave_Data_Old where Employee_id=" & Val(GroupId) & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckEmployeeMaster = True
                Exit Function
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function CheckMemberMaster(ByVal GroupId As String, ByVal cn As SqlConnection) As Boolean
        Try
            Dim sql As String
            sql = "Select Count(*) from Transfer_Detail where from_Member_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckMemberMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Transfer_Detail where TO_Member_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckMemberMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Receipt_Detail where member_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckMemberMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Issue_detail where member_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckMemberMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Inward_Data where member_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckMemberMaster = True
                Exit Function
            End If
            
            sql = "Select Count(*) from Dividend_Payment_Main where member_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckMemberMaster = True
                Exit Function
            End If
            
            sql = "Select Count(*) from MEMBER_OPENING_BALANCE where member_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckMemberMaster = True
                Exit Function
            End If
            
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function CheckExpenceMaster(ByVal GroupId As String, ByVal cn As SqlConnection) As Boolean
        Try
            Dim sql As String
            sql = "Select Count(*) from Expense_Data where Expense_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckExpenceMaster = True
                Exit Function
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function CheckVillageMaster(ByVal GroupId As String, ByVal cn As SqlConnection) As Boolean
        Try
            Dim sql As String
            sql = "Select Count(*) from member_Master where Village_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckVillageMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Party_Master where Village_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckVillageMaster = True
                Exit Function
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function CheckPTMaster(ByVal GroupId As String, ByVal cn As SqlConnection) As Boolean
        Try
            'Dim sql As String
            'sql = "Select Count(*) from Expense_Data where Pt_id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            'If FindOneinteger(sql, cn) > 0 Then
            '    CheckPTMaster = True
            '    Exit Function
            'End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function CheckpartyMaster(ByVal GroupId As String, ByVal cn As SqlConnection) As Boolean
        Try
            Dim sql As String
            sql = "Select Count(*) from Journal_Detail where Party_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckpartyMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from ROJMAL_DATA where Party_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckpartyMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Dead_Stock_Purchase_Data where Member_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckpartyMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Final_Rojmal_Data where Party_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckpartyMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Bank_Detail where Party_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckpartyMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Final_Journal_Detail where Party_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckpartyMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from FINAL_PARTY_OPENING_BALANCE where Party_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckpartyMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from FINAL_PARTY_BALANCE where Party_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckpartyMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from SUPPLI_PARTY_OPENING_BALANCE where Party_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckpartyMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from SUPPLI_ROJMAL_DATA where Party_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckpartyMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Journal_Detail where Party_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckpartyMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Journal_Detail where Party_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckpartyMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Journal_Detail where Party_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckpartyMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Journal_Detail where Party_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckpartyMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Journal_Detail where Party_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckpartyMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Journal_Detail where Party_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckpartyMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Journal_Detail where Party_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckpartyMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Journal_Detail where Party_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckpartyMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Journal_Detail where Party_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckpartyMaster = True
                Exit Function

            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function CheckNoticeMaster(ByVal GroupId As String, ByVal cn As SqlConnection) As Boolean
        Try
            Dim sql As String
            sql = "Select Count(*) from Expense_Data where Notice_id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckNoticeMaster = True
                Exit Function
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function CheckLockerMaster(ByVal GroupId As String, ByVal cn As SqlConnection) As Boolean
        Try
            Dim sql As String
            sql = "Select Count(*) from Locker_Payment_Receipt_Data where Locker_id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckLockerMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Locker_Operation where Locker_id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckLockerMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Key_Loss where Locker_id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckLockerMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Locker_Issue where Locker_id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckLockerMaster = True
                Exit Function
            End If
           
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function CheckLeaveMaster(ByVal GroupId As String, ByVal cn As SqlConnection) As Boolean
        Try
            Dim sql As String
            sql = "Select Count(*) from Leave_Data where Leave_Id=" & aq(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckLeaveMaster = True
                Exit Function
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function CheckItemMaster(ByVal GroupId As String, ByVal cn As SqlConnection) As Boolean
        Try
            Dim sql As String
            sql = "Select Count(*) from PASSING_DATA_ITEM_DETAIL where Item_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckItemMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Gold_Stock_Data where Item_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckItemMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Gold_Return_Detail where Item_Id=" & Val(GroupId) & " and Company_Id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckItemMaster = True
                Exit Function
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function CheckYearMaster(ByVal GroupId As String, ByVal cn As SqlConnection) As Boolean
        Try
            Dim sql As String
            sql = "Select Count(*) from Issue_detail where  Company_id=" & (clsVariables.CompnyId)
            sql = sql & " and Year_id=" & aq(GroupId)
            If FindOneinteger(sql, cn) > 0 Then
                CheckYearMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Issue_Main where  Company_id=" & (clsVariables.CompnyId)
            sql = sql & " and Year_id=" & aq(GroupId)
            If FindOneinteger(sql, cn) > 0 Then
                CheckYearMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Inward_Data where  Company_id=" & (clsVariables.CompnyId)
            sql = sql & " and Year_id=" & aq(GroupId)
            If FindOneinteger(sql, cn) > 0 Then
                CheckYearMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Final_Rojmal_Data where  Company_id=" & (clsVariables.CompnyId)
            sql = sql & " and Year_id=" & aq(GroupId)
            If FindOneinteger(sql, cn) > 0 Then
                CheckYearMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Bank_Main where  Company_id=" & (clsVariables.CompnyId)
            sql = sql & " and Year_id=" & aq(GroupId)
            If FindOneinteger(sql, cn) > 0 Then
                CheckYearMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Bank_Detail where  Company_id=" & (clsVariables.CompnyId)
            sql = sql & " and Year_id=" & aq(GroupId)
            If FindOneinteger(sql, cn) > 0 Then
                CheckYearMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Final_Journal_Main where  Company_id=" & (clsVariables.CompnyId)
            sql = sql & " and Year_id=" & aq(GroupId)
            If FindOneinteger(sql, cn) > 0 Then
                CheckYearMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Final_Journal_detail where  Company_id=" & (clsVariables.CompnyId)
            sql = sql & " and Year_id=" & aq(GroupId)
            If FindOneinteger(sql, cn) > 0 Then
                CheckYearMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from Dividend_Data where  Company_id=" & (clsVariables.CompnyId)
            sql = sql & " and Year_id=" & aq(GroupId)
            If FindOneinteger(sql, cn) > 0 Then
                CheckYearMaster = True
                Exit Function
            End If

        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function CheckAccountMaster(ByVal AccountId As Integer, ByVal cn As SqlConnection) As Boolean
        Try
            Dim sql As String
            sql = "Select Count(*) from BANK_DETAIL where Account_id=" & AccountId & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckAccountMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from BOOK_MASTER where Account_id=" & AccountId & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckAccountMaster = True
                Exit Function
            End If
            
            sql = "Select Count(*) from FINAL_ACCOUNT_OPENING_BALANCE where Account_id=" & AccountId & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckAccountMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from FINAL_JOURNAL_DETAIL where Account_id=" & AccountId & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckAccountMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from FINAL_PARTY_BALANCE where Account_id=" & AccountId & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckAccountMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from FINAL_PARTY_OPENING_BALANCE where Account_id=" & AccountId & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckAccountMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from FINAL_ROJMAL_DATA where Account_id=" & AccountId & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckAccountMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from FUND_ACCOUNT_BALANCE where Account_id=" & AccountId & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckAccountMaster = True
                Exit Function
            End If
            sql = "Select Count(*) from VOUCHER_MASTER where Account_id=" & AccountId & " and Company_id=" & clsVariables.CompnyId
            If FindOneinteger(sql, cn) > 0 Then
                CheckAccountMaster = True
                Exit Function
            End If

        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function AuthorizedTo(ByVal mode As String, ByVal frmname As String, ByVal cn As SqlConnection) As Boolean
        AuthorizedTo = False
        Dim ssql As String = ""
        Dim frmid As Integer
        frmid = ob.FindOneinteger("Select Form_id from Form_Info where form_name=" & aq(frmname), cn)
        If clsVariables.UserName = "admin" Or clsVariables.UserName = "saipc" Then
            AuthorizedTo = True
        Else
            Select Case mode
                Case AccessMode.AddMode
                    ssql = "Select Count(*) from ACCESS_SECURITY where usrid=" & aq(ChartoAsc(clsVariables.UserName)) & " and Add_right=1 and Form_id=" & Val(frmid)
                    '    AuthorizedTo = True
                Case AccessMode.ChangeMode
                    ssql = "Select Count(*) from ACCESS_SECURITY where usrid=" & aq(ChartoAsc(clsVariables.UserName)) & " and Change_right=1 and Form_id=" & Val(frmid)
                    '   AuthorizedTo = True
                Case AccessMode.DeleteMode
                    ssql = "Select Count(*) from ACCESS_SECURITY where usrid=" & aq(ChartoAsc(clsVariables.UserName)) & " and Delete_right=1 and Form_id=" & Val(frmid)
                    '  AuthorizedTo = True
                Case AccessMode.ViewMode
                    ssql = "Select Count(*) from ACCESS_SECURITY where usrid=" & aq(ChartoAsc(clsVariables.UserName)) & " and (Add_right=1 or Change_right=1 or Delete_right=1) and Form_id=" & Val(frmid)
                    ' AuthorizedTo = True
            End Select
            If FindOneinteger(ssql, cn) > 0 Then
                AuthorizedTo = True
            End If
        End If
    End Function
    Enum RoundOffConstants
        slNearest
        slNearestByAdding
        slNearestBySubtracting
    End Enum
    Public Function RoundOff(ByVal Amount As Double, ByVal RoundOffByAmount As Double, ByVal RoundOffTo As RoundOffConstants) As Double
        'Dim gintAction As Object
        Dim dblResult As Double

        RoundOff = 0
        Try

            dblResult = Amount / RoundOffByAmount
            If VarType(dblResult) = vbInteger Then
                dblResult = 0
            End If

            Select Case RoundOffTo
                Case RoundOffConstants.slNearest   '''' Nearest
                    If dblResult <> 0 Then
                        RoundOff = Val(Format(Amount / RoundOffByAmount, "#")) * RoundOffByAmount
                    Else
                        RoundOff = dblResult
                    End If

                Case RoundOffConstants.slNearestByAdding    '''' Next
                    If dblResult <> 0 Then
                        RoundOff = (Int(Amount / RoundOffByAmount) + 1) * RoundOffByAmount
                    Else
                        RoundOff = dblResult
                    End If

                Case RoundOffConstants.slNearestBySubtracting    '''' Previous
                    If dblResult <> 0 Then
                        RoundOff = Int(Amount / RoundOffByAmount) * RoundOffByAmount
                    Else
                        RoundOff = dblResult
                    End If

            End Select

            Exit Function

        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try


    End Function
    Public Function UpdateEditUser1(ByVal tblname As String, ByVal whr As String, ByVal cn As SqlConnection, Optional ByVal delete As Boolean = False) As Boolean
        Try
            Dim sql As String
            Dim dty As New DataTable

            sql = "Select * from " & tblname & " where " & whr & " and Edit_User=" & aq(New_Entry)
            dty = ob.Returntable(sql, cn)
            If dty.Rows.Count > 0 Then
                sql = "Update " & tblname & " set "
                sql = sql & " Edit_DAte=" & aq(Format(Now, "MM/dd/yyyy HH:mm:ss tt"))
                'If delete = True Then
                '    sql = sql & " ,Edit_Dta_time=" & aq(delete_Entry)
                'End If
                If delete = True Then
                    sql = sql & " ,Edit_User=" & aq(clsVariables.UserName & "Delete")
                Else
                    sql = sql & " ,Edit_User=" & aq(clsVariables.UserName)
                End If

                sql = sql & ",Revision=isnull(Revision,0)+1"
                sql = sql & " where  " & whr '& " and Add_Date=" & aq(dty.Rows(0).Item("Add_DAte"))
                'sql = sql & " and User_NAme=" & aq(dty.Rows(0).Item("User_NAme"))
                sql = sql & " and Edit_User=" & aq(New_Entry)
                Execute(sql, cn)
                Exit Function
            End If

        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function UpdateEditUser(ByVal tblname As String, ByVal whr As String, ByVal cn As SqlConnection, Optional ByVal delete As Boolean = False) As Boolean
        Try
            Dim sql As String
            Dim dty As New DataTable

            sql = "Select * from " & tblname & " where " & whr & " and Edit_User_Name=" & aq(New_Entry)
            dty = ob.Returntable(sql, cn)
            If dty.Rows.Count > 0 Then
                sql = "Update " & tblname & " set "
                sql = sql & " Edit_DAte=" & aq(Format(Now, "MM/dd/yyyy HH:mm:ss tt"))
                If delete = True Then
                    'sql = sql & " ,Edit_Dta_time=" & aq(delete_Entry)
                    sql = sql & " ,Edit_User_Name=" & aq(clsVariables.UserName & "Delete")
                Else
                    sql = sql & " ,Edit_User_Name=" & aq(clsVariables.UserName)
                End If
                sql = sql & ",Revision=isnull(Revision,0)+1"
                sql = sql & " where  " & whr '& " and Add_Date=" & aq(dty.Rows(0).Item("Add_DAte"))
                'sql = sql & " and User_NAme=" & aq(dty.Rows(0).Item("User_NAme"))
                sql = sql & " and Edit_User_Name=" & aq(New_Entry)
                Execute(sql, cn)
                Exit Function
            End If

        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function UpdateEditUserOnly(ByVal tblname As String, ByVal whr As String, ByVal cn As SqlConnection, Optional ByVal delete As Boolean = False) As Boolean
        Try
            Dim sql As String
            Dim dty As New DataTable
            sql = "Select * from " & tblname & " where " & whr & " and Edit_User_Name=" & aq(New_Entry)
            dty = ob.Returntable(sql, cn)
            If dty.Rows.Count > 0 Then
                sql = "Update " & tblname & " set "
                sql = sql & " Edit_DAte=" & aq(Format(Now, "MM/dd/yyyy HH:mm:ss tt"))
                sql = sql & " ,Edit_User_Name=" & aq(clsVariables.UserName)
                sql = sql & " where  " & whr
                sql = sql & " and Edit_User_Name=" & aq(New_Entry)
                ob.Execute(sql, cn)
                Exit Function
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function UpdateIdmach(ByVal tblname As String, ByVal whr As String, ByVal cn As SqlConnection) As Boolean
        Try
            Dim sql As String
            Dim dty As New DataTable

            sql = "Select * from " & tblname & " where " & whr & " and Edit_User_Name=" & aq(New_Entry)
            dty = ob.Returntable(sql, cn)
            If dty.Rows.Count > 0 Then
                sql = "Update " & tblname & " set "
                sql = sql & " Ip_Address=" & aq(ipaddress)
                sql = sql & " ,Mach_Name=" & aq(machineName)
                sql = sql & " where  " & whr & " and Edit_User_Name=" & aq(New_Entry)
                Execute(sql, cn)
                Exit Function
            End If

        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function UpdateIdmach(ByVal tblname As String, ByVal whr As String, ByVal cn As SqlConnection, ByVal fn As Boolean) As Boolean
        Try
            Dim sql As String
            Dim dty As New DataTable

            sql = "Select * from " & tblname & " where " & whr
            dty = ob.Returntable(sql, cn)
            If dty.Rows.Count > 0 Then
                sql = "Update " & tblname & " set "
                sql = sql & " Ip_Address=" & aq(ipaddress)
                sql = sql & " ,Mach_Name=" & aq(machineName)
                sql = sql & " where  " & whr
                Execute(sql, cn)
                Exit Function
            End If

        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Sub setbackUsername(ByVal sql As String, ByVal cn As SqlConnection)
        Try
            Dim dty As New DataTable
            dty = ob.Returntable(sql, cn)
            gbackUserName = ""
            If dty.Rows.Count > 0 Then

            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Function validtime(ByVal Txt1 As MaskedTextBox) As Boolean
        Dim h As String
        Dim m As String
        Dim PrevTime As String
        Dim str As Integer
        Try
            If Txt1.Text = "  :" Then
                MsgBox("Time Error", vbOK + vbExclamation, " Time Error..")
                validtime = False
                Txt1.Focus()
                Exit Function
            End If

            PrevTime = Txt1.Text
            str = Replace(Txt1.Text, ":", "")
            If Len(Trim(str)) = 0 Then
                validtime = True
                Exit Function
            End If
            If (Val(str) >= 2400 Or Val(str) < 0 Or Val(str) = 24) Then
                MsgBox("Time Error", vbOK + vbExclamation, " Time Error..")
                validtime = False
                Txt1.Focus()
                Exit Function
            End If
            Dim ssr As String
            Dim tt As Integer
            h = ""
            m = ""
            For tt = 1 To Len(PrevTime)
                h = h & Mid(PrevTime, tt, 1)
                If Mid(PrevTime, tt, 1) = ":" Or Mid(PrevTime, tt, 1) = "." Or Mid(PrevTime, tt, 1) = " " Then
                    If Mid(PrevTime, tt, 1) <> " " Then
                        m = Mid(PrevTime, tt + 1, Len(PrevTime))
                    Else
                        m = 0
                    End If
                    Exit For
                End If
            Next

            If Len(h) >= 2 Then
                If Mid(h, Len(h), 1) = ":" Or Mid(h, Len(h), 1) = "." Then
                    h = Mid(h, 1, Len(h) - 1)
                    If Len(h) = 1 Then
                        h = "0" & Mid(h, 1, Len(h))
                    End If
                Else

                End If
            ElseIf Len(h) = 1 Then
                h = "0" & Mid(h, 1, Len(h))
            ElseIf Val(h) = 0 Then
                h = "00"
            End If
            If Len(m) = 0 Then
                m = "00"
            ElseIf Len(m) = 1 Then
                m = m & "0"
            End If
            ssr = h & m
            h = IIf(Mid(ssr, 1, 2) = "", "00", Mid(ssr, 1, 2))
            m = IIf(Mid(ssr, 3, 2) = "", "00", Mid(ssr, 3, 2))


            m = IIf(Len(Trim(m)) = 1, m & "0", m)
            If (h = 24) Then
                h = "00"
            End If

            If Val(h) >= 1 And Val(h) <= 9 Then
                h = "0" & Val(h)
            ElseIf Val(h) = 0 Then
                h = "00"
            End If
            If Val(m) = 60 Then
                MsgBox("Time Error", vbOK + vbExclamation, " Time Error..")
                validtime = False
                Txt1.Focus()
                Exit Function
            End If
            'If (m = 60 Or m = "") Then
            If (m = "") Then
                'h = h + 1
                m = "00"
            End If
            If Len(m) = 1 Then
                m = m & "0"
            End If
            If Val(m) = 0 Then
                m = "00"
            End If

            If (h > 24 Or m > 59) Then

                Txt1.Text = PrevTime
                Txt1.SelectionStart = 0
                Txt1.SelectionLength = Len(Txt1.Text)

                MsgBox("Invalid Time.", MsgBoxStyle.Exclamation, "System")
                validtime = False
                Txt1.Focus()
                Exit Function
            Else
                validtime = True
                Txt1.Text = h & ":" & m
            End If
        Catch ex As Exception
            MsgBox("Error : " + ex.Message.ToString, MsgBoxStyle.Exclamation, "System")
        End Try
    End Function
    Public Sub Msg(ByVal Isadd As Boolean, ByVal docno As Long, Optional ByVal Docnos As String = "Doc No")
        If Isadd = True Then
            MessageBox.Show("Entry Is Successfully.........! Saved At " & Docnos & " = " & Val(docno), Application.ProductName, MessageBoxButtons.OK)
        Else
            MessageBox.Show("Entry Is Successfully.........! Update At " & Docnos & " = " & Val(docno), Application.ProductName, MessageBoxButtons.OK)
        End If
    End Sub
    Public Sub MsgType(ByVal Isadd As Boolean, ByVal docno As Long, ByVal DocType As String, Optional ByVal Docnos As String = "Doc Type")
        If Isadd = True Then
            MessageBox.Show("Entry Is Successfully.........! Saved At Doc No = " & Val(docno) & " and Doc Type = " & DocType, Application.ProductName, MessageBoxButtons.OK)
        Else
            MessageBox.Show("Entry Is Successfully.........! Update At Doc No = " & Val(docno) & " and Doc Type = " & DocType, Application.ProductName, MessageBoxButtons.OK)
        End If
    End Sub
    Public Function sqlACCESS_SECURITY(ByVal cn As SqlConnection, Optional ByVal tblname As String = "ACCESS_SECURITY") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "ACCESS_SECURITY"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " UsrId nvarchar(20) ," & vbCrLf
            sql = sql & " form_id int," & vbCrLf
            sql = sql & " add_right bit default 0," & vbCrLf
            sql = sql & " change_right bit default 0," & vbCrLf
            sql = sql & " delete_right bit default 0" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlForm_Info(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Form_Info") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Form_info"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " form_id int," & vbCrLf
            sql = sql & " form_name nvarchar(100)default ''," & vbCrLf
            sql = sql & " form_type nvarchar(50) default ''," & vbCrLf
            sql = sql & " Department_id int " & vbCrLf
            sql = sql & " Primary Key(Form_Id)"
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlLocker_Ledger(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Locker_Ledger") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Locker_Ledger"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Member_Id Bigint," & vbCrLf
            sql = sql & " Locker_Id int," & vbCrLf
            sql = sql & " Locker_No bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_no Bigint," & vbCrLf
            sql = sql & " Deposite Float Default 0," & vbCrLf
            sql = sql & " Rent Float Default 0," & vbCrLf
            sql = sql & " Receipt_Amt Float Default 0," & vbCrLf
            sql = sql & " Late_Fee Float Default 0," & vbCrLf
            sql = sql & " Net_Amount Float Default 0," & vbCrLf
            sql = sql & " Payment_Amt Float Default 0," & vbCrLf
            sql = sql & " Remarks Nvarchar(200)default ''," & vbCrLf
            sql = sql & " Rent_UpTo_Date datetime," & vbCrLf
            sql = sql & " Enter_Date Datetime," & vbCrLf
            sql = sql & " Enter_Time datetime," & vbCrLf
            sql = sql & " Return_Date Datetime," & vbCrLf
            sql = sql & " Return_Time datetime," & vbCrLf
            sql = sql & " Rent_Break Nvarchar(10) default ''" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlPayroll_Register(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Payroll_Register") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Payroll_Register"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Employee_Id Bigint," & vbCrLf
            'sql = sql & " A_d nvarchar(10)default ''," & vbCrLf
            'sql = sql & " Basic_Salary Float default 0," & vbCrLf
            'sql = sql & " Working_Days Float default 0," & vbCrLf
            'sql = sql & " Present_Days Float default 0," & vbCrLf
            sql = sql & " Addition1 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Addition2 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Addition3 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Addition4 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Addition5 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Addition6 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Addition7 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Addition8 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Addition9 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Addition10 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Addition11 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Addition12 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Addition13 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Addition14 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Addition15 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Deduction1 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Deduction2 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Deduction3 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Deduction4 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Deduction5 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Deduction6 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Deduction7 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Deduction8 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Deduction9 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Deduction10 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Deduction11 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Deduction12 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Deduction13 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Deduction14 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Deduction15 Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Payment Float default 0," & vbCrLf
            sql = sql & " addamt Float default 0," & vbCrLf
            sql = sql & " dedamt Float default 0" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlDepriciation_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Depriciation_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Depriciation_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_no Bigint," & vbCrLf
            sql = sql & " Depriciation_date Datetime," & vbCrLf
            sql = sql & " Member_id  bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Interest_From Datetime," & vbCrLf
            sql = sql & " Interest_To Datetime," & vbCrLf
            sql = sql & " Interest_Days Bigint," & vbCrLf
            sql = sql & " Amount Float Default 0," & vbCrLf
            sql = sql & " Depriciation_Amount Float Default 0," & vbCrLf
            sql = sql & " Old_Depriciation Float default 0" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlDepriciation_Opening_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Depriciation_Opening_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Depriciation_Opening_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Depriciation_date Datetime," & vbCrLf
            sql = sql & " Member_id  int," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Interest_From Datetime," & vbCrLf
            sql = sql & " Interest_To Datetime," & vbCrLf
            sql = sql & " Interest_Days Bigint," & vbCrLf
            sql = sql & " Amount Float Default 0," & vbCrLf
            sql = sql & " Depriciation_Amount Float Default 0," & vbCrLf
            sql = sql & " Old_Depriciation Float default 0," & vbCrLf
            sql = sql & " Depriciation_Paid bit default 0," & vbCrLf
            sql = sql & " Pay_Date Datetime" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlDead_Stock_Ledger(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Dead_Stock_Ledger") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Dead_Stock_Ledger"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Member_id  bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Fixd_No Bigint," & vbCrLf
            sql = sql & " doc_type int," & vbCrLf
            sql = sql & " Doc_no Bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Remarks nvarchar(500) default ''," & vbCrLf
            sql = sql & " Receipt_Amt Float  default 0," & vbCrLf
            sql = sql & " Payment_Amt Float  default 0," & vbCrLf
            sql = sql & " Int_Receipt_Amt Float  default 0," & vbCrLf
            sql = sql & " Int_Payment_Amt Float  default 0" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlLocker_Payment_Receipt_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Locker_Payment_Receipt_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Locker_Payment_Receipt_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_no Bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Member_Id Bigint," & vbCrLf
            sql = sql & " Locker_Id int," & vbCrLf
            sql = sql & " Locker_No bigint," & vbCrLf
            sql = sql & " Key_No Bigint," & vbCrLf
            sql = sql & " Rent_UpTo_Date datetime," & vbCrLf
            sql = sql & " RentBreak nvarchar(1)," & vbCrLf
            sql = sql & " Remarks Nvarchar(200)default ''," & vbCrLf
            sql = sql & " Rec_Amt Float default 0," & vbCrLf
            sql = sql & " Late_Fee Float default 0," & vbCrLf
            sql = sql & " Net_Amt Float default 0," & vbCrLf
            sql = sql & " Pay_Amt Float Default 0," & vbCrLf
            sql = sql & " Locker_Empty Bit default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlLocker_Receipt_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Locker_Receipt_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Locker_Receipt_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_no Bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Member_Id Bigint," & vbCrLf
            sql = sql & " Locker_Id int," & vbCrLf
            sql = sql & " Locker_No bigint," & vbCrLf
            sql = sql & " Key_No Bigint," & vbCrLf
            sql = sql & " Remarks Nvarchar(200)default ''," & vbCrLf
            sql = sql & " Amount Float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " Ip_Address nvarchar(50)default ''," & vbCrLf
            sql = sql & " Mach_name Nvarchar(50)default ''" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlLocker_Payment_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Locker_Payment_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Locker_Payment_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_no Bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Member_Id Bigint," & vbCrLf
            sql = sql & " Locker_Id int," & vbCrLf
            sql = sql & " Locker_No bigint," & vbCrLf
            sql = sql & " Key_No Bigint," & vbCrLf
            sql = sql & " Remarks Nvarchar(200)default ''," & vbCrLf
            sql = sql & " Locker_Deposit_Amount Float Default 0," & vbCrLf
            sql = sql & " Key_Deposit_Amount Float Default 0," & vbCrLf
            sql = sql & " Net_Amount Float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " Ip_Address nvarchar(50)default ''," & vbCrLf
            sql = sql & " Mach_name Nvarchar(50)default ''" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlDead_Stock_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Dead_Stock_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Dead_Stock_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_no Bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Member_Id Bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Column_id int," & vbCrLf
            sql = sql & " Percentage Float default 0," & vbCrLf
            sql = sql & " Quantity Float default 0," & vbCrLf
            sql = sql & " Rate Float default 0," & vbCrLf
            sql = sql & " Amount float default 0," & vbCrLf
            sql = sql & " Depriciation Float default 0," & vbCrLf
            sql = sql & " Balance float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlDead_Stock_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Dead_Stock_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Dead_Stock_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_no Bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Member_Id Bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Column_id int," & vbCrLf
            sql = sql & " Percentage Float default 0," & vbCrLf
            sql = sql & " Quantity Float default 0," & vbCrLf
            sql = sql & " Rate Float default 0," & vbCrLf
            sql = sql & " Amount float default 0," & vbCrLf
            sql = sql & " Depriciation Float default 0," & vbCrLf
            sql = sql & " Balance float default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlDead_Stock_Opening_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Dead_Stock_Opening_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Dead_Stock_Opening_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Member_Id int," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Column_id int," & vbCrLf
            sql = sql & " Percentage Float default 0," & vbCrLf
            sql = sql & " Quantity Float default 0," & vbCrLf
            sql = sql & " Rate Float default 0," & vbCrLf
            sql = sql & " Amount float default 0," & vbCrLf
            sql = sql & " Depriciation Float default 0," & vbCrLf
            sql = sql & " Balance_Amount float default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlDead_Stock_Purchase_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Dead_Stock_Purchase_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Dead_Stock_Purchase_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_no Bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Member_Id Bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Column_id int," & vbCrLf
            sql = sql & " Percentage Float default 0," & vbCrLf
            sql = sql & " Quantity Float default 0," & vbCrLf
            sql = sql & " Rate Float default 0," & vbCrLf
            sql = sql & " Amount float default 0," & vbCrLf
            sql = sql & " Remarks Nvarchar(200)default ''," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlLocker_Operation(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Locker_Operation") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Locker_Operation"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_no Bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Member_Id Bigint," & vbCrLf
            sql = sql & " Locker_Id int," & vbCrLf
            sql = sql & " Locker_No bigint," & vbCrLf
            sql = sql & " OP_time datetime," & vbCrLf
            sql = sql & " Op_date datetime," & vbCrLf
            sql = sql & " Re_time datetime," & vbCrLf
            sql = sql & " Re_date datetime," & vbCrLf
            sql = sql & " Remarks Nvarchar(200)default ''," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlKey_Loss(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Key_Loss") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Key_Loss"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_no Bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Member_Id Bigint," & vbCrLf
            sql = sql & " Locker_Id int," & vbCrLf
            sql = sql & " Locker_No bigint," & vbCrLf
            sql = sql & " Remarks Nvarchar(200)default ''," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlLocker_Issue(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Locker_Issue") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Locker_Issue"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_no Bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Member_Id Bigint," & vbCrLf
            sql = sql & " Memo_No Bigint," & vbCrLf
            sql = sql & " Remarks Nvarchar(100)default '',"
            sql = sql & " Locker_Id int," & vbCrLf
            sql = sql & " Locker_No bigint," & vbCrLf
            sql = sql & " Key_no bigint," & vbCrLf
            sql = sql & " Deposite bigint," & vbCrLf
            sql = sql & " Rent Float ," & vbCrLf
            sql = sql & " RentUpTo datetime," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlLocker_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Locker_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Locker_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Member_Id Bigint," & vbCrLf
            sql = sql & " Locker_Id int," & vbCrLf
            sql = sql & " Locker_No bigint," & vbCrLf
            sql = sql & " Key_No bigint," & vbCrLf
            sql = sql & " UpTo_Date datetime," & vbCrLf
            sql = sql & " Deposite bigint," & vbCrLf
            sql = sql & " Rent Float default 0," & vbCrLf
            sql = sql & " Open_Bal Float default 0," & vbCrLf
            sql = sql & " Rec_Amt Float default 0," & vbCrLf
            sql = sql & " Pay_Amt Float default 0," & vbCrLf
            sql = sql & " Cur_Bal Float default 0," & vbCrLf
            sql = sql & " Empty Bit Default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Member_Id,Locker_id,Locker_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function

    Public Function Num_To_Guj_Word(ByVal dFigure As Double) As String
        Dim temp_Str1 As String = ""
        'Dim temp_str2 As String
        Dim temp_str3 As String = ""

        'Dim i As Integer = 0
        Dim j As Integer = 0
        Dim length As Integer
        Dim temp_len As Integer
        Dim temp_text As String = ""
        Dim temp_text2 As String = ""

        Dim dec_pos As Integer
        Dim sAmount As String
        Dim dPaisa As Integer
        Dim sPaisa As String
        Dim sRupiya As String

        guj_unit_arr(0) = "S*ºy"
        guj_unit_arr(1) = "a[k"
        guj_unit_arr(2) = "b["
        guj_unit_arr(3) = "#iN"
        guj_unit_arr(4) = "cir"
        guj_unit_arr(5) = "pi>c"
        guj_unit_arr(6) = "C"
        guj_unit_arr(7) = "sit"
        guj_unit_arr(8) = "aiq"
        guj_unit_arr(9) = "nv"
        guj_unit_arr(10) = "dS"
        guj_unit_arr(11) = "a(gyir"
        guj_unit_arr(12) = "bir"
        guj_unit_arr(13) = "t[r"
        guj_unit_arr(14) = "cud"
        guj_unit_arr(15) = "p>dr"
        guj_unit_arr(16) = "si[L"
        guj_unit_arr(17) = "s_ir"
        guj_unit_arr(18) = "aQir"
        guj_unit_arr(19) = "ai[gN)s"
        guj_unit_arr(20) = "v)s"
        guj_unit_arr(21) = "a[kv)s"
        guj_unit_arr(22) = "biv)s"
        guj_unit_arr(23) = "t[v)s"
        guj_unit_arr(24) = "ci[v)s"
        guj_unit_arr(25) = "pµc)s"
        guj_unit_arr(26) = "CÄv)s"
        guj_unit_arr(27) = "s_iiv)s"
        guj_unit_arr(28) = "aÎiv)s"
        guj_unit_arr(29) = "ai[gN#i)s"
        guj_unit_arr(30) = "#i)s"

        guj_unit_arr(31) = "a[k#i)s"
        guj_unit_arr(32) = "b#i)s"
        guj_unit_arr(33) = "t[#i)s"
        guj_unit_arr(34) = "ci[#i)s"
        guj_unit_arr(35) = "pi>#i)s"
        guj_unit_arr(36) = "C#i)s"
        guj_unit_arr(37) = "siD#i)s"
        guj_unit_arr(38) = "aiD#i)s"
        guj_unit_arr(39) = "ai[gNciL)s"
        guj_unit_arr(40) = "ciL)s"

        guj_unit_arr(41) = "a[ktiL)s"
        guj_unit_arr(42) = "b[tiL)s"
        guj_unit_arr(43) = "t[tiL)s"
        guj_unit_arr(44) = "c&ÀmiL)s"
        guj_unit_arr(45) = "(pAtiL)s"
        guj_unit_arr(46) = "C[tiL)s"
        guj_unit_arr(47) = "s&DtiL)s"
        guj_unit_arr(48) = "aDtiL)s"
        guj_unit_arr(49) = "ai[gNpcis"
        guj_unit_arr(50) = "pcis"
        guj_unit_arr(51) = "a[kivn"
        guj_unit_arr(52) = "bivn"
        guj_unit_arr(53) = "#i[pn"
        guj_unit_arr(54) = "ci[¼pn"
        guj_unit_arr(55) = "p>civn"
        guj_unit_arr(56) = "C¼pn"
        guj_unit_arr(57) = "s_iivn"
        guj_unit_arr(58) = "aÎivn"
        guj_unit_arr(59) = "ai[gNsi>q"
        guj_unit_arr(60) = "si>q"
        guj_unit_arr(61) = "a[ksq"
        guj_unit_arr(62) = "bi>sq"
        guj_unit_arr(63) = "#i[sq"
        guj_unit_arr(64) = "ci[sq"
        guj_unit_arr(65) = "pi>sq"
        guj_unit_arr(66) = "Ci>sq"
        guj_unit_arr(67) = "sDsq"
        guj_unit_arr(68) = "aDsq"
        guj_unit_arr(69) = "ai[gN(s_i[r"
        guj_unit_arr(70) = "(s_i[r"
        guj_unit_arr(71) = "a[ki[t[r"
        guj_unit_arr(72) = "bi[t[r"
        guj_unit_arr(73) = "ti[t[r"
        guj_unit_arr(74) = "c&Àmi[t[r"
        guj_unit_arr(75) = "p>ci[t[r"
        guj_unit_arr(76) = "Ci[t[r"
        guj_unit_arr(77) = "(s_ii[t[r"
        guj_unit_arr(78) = "eÎi[t[r"
        guj_unit_arr(79) = "ai[gNa[>S)"
        guj_unit_arr(80) = "a[>S)"
        guj_unit_arr(81) = "a[kyi>s)"
        guj_unit_arr(82) = "¾yi>s)"
        guj_unit_arr(83) = "Ryi>s)"
        guj_unit_arr(84) = "ci[yi<s)"
        guj_unit_arr(85) = "p>µyi>s)"
        guj_unit_arr(86) = "Cyi>s)"
        guj_unit_arr(87) = "sRyi>s)"
        guj_unit_arr(88) = "aqyi>s)"
        guj_unit_arr(89) = "n[Äyi>s)"
        guj_unit_arr(90) = "n[v&"
        guj_unit_arr(91) = "a[ki>N&"
        guj_unit_arr(92) = "biN&>"
        guj_unit_arr(93) = "#iiN&>"
        guj_unit_arr(94) = "ci[riN&>"
        guj_unit_arr(95) = "p>µci>N&"
        guj_unit_arr(96) = "Cºn&"
        guj_unit_arr(97) = "s_iiN&>"
        guj_unit_arr(98) = "aÎiN&>"
        guj_unit_arr(99) = "nÄviN&>"

        guj_hundred_arr(1) = "a[ksi["
        guj_hundred_arr(2) = "bsi["
        guj_hundred_arr(3) = "#iNsi["
        guj_hundred_arr(4) = "cirsi["
        guj_hundred_arr(5) = "pi>csi["
        guj_hundred_arr(6) = "Csi["
        guj_hundred_arr(7) = "sitsi["
        guj_hundred_arr(8) = "aiqsi["
        guj_hundred_arr(9) = "nvsi["

        guj_Thousand_arr(1) = "a[k hjir"
        guj_Thousand_arr(2) = "b[ hjir"
        guj_Thousand_arr(3) = "#iN hjir"
        guj_Thousand_arr(4) = "cir hjir"
        guj_Thousand_arr(5) = "pi>c hjir"
        guj_Thousand_arr(6) = "C hjir"
        guj_Thousand_arr(7) = "sit hjir"
        guj_Thousand_arr(8) = "aiq hjir"
        guj_Thousand_arr(9) = "nv hjir"
        sPaisa = ""
        sRupiya = ""

        If dFigure >= 0 Then
            sAmount = Format(dFigure, "0.00")
            dec_pos = InStr(1, sAmount, ".", 1)
            If Not dec_pos = 0 And Not Val(sAmount) = 0 Then
                temp_text = Left$(sAmount, (dec_pos - 1))
                temp_str3 = Right$(sAmount, Len(sAmount) - dec_pos)
            Else
                temp_text = sAmount
                temp_str3 = ""
            End If
            dPaisa = (dFigure - Val(temp_text)) * 100
            If dPaisa > 0 Then
                sPaisa = guj_unit_arr(dPaisa)
            Else
                sPaisa = ""
            End If

            length = Len(temp_text)
            temp_len = length
            If length = 10 Then
                sRupiya = guj_unit_arr(Val(Mid(temp_text, 1, 1))) & " abj "
                If Val(Mid(temp_text, 2, 2)) > 0 Then
                    If Len(sRupiya) > 0 Then
                        sRupiya = sRupiya & guj_unit_arr(Val(Mid(temp_text, 2, 2))) & " kri[D "
                    End If
                End If
                If Val(Mid(temp_text, 4, 2)) > 0 Then
                    If Len(sRupiya) > 0 Then
                        sRupiya = sRupiya & guj_unit_arr(Val(Mid(temp_text, 4, 2))) & " liK "
                    End If
                End If
                If Val(Mid(temp_text, 6, 2)) > 0 Then
                    If Len(sRupiya) > 0 Then
                        sRupiya = sRupiya & guj_unit_arr(Val(Mid(temp_text, 6, 2))) & " hjir "
                    End If
                End If
                If Val(Mid(temp_text, 8, 1)) > 0 Then
                    If Len(sRupiya) > 0 Then
                        sRupiya = sRupiya & guj_hundred_arr(Val(Mid(temp_text, 8, 1))) & " "
                    End If
                End If
                If Val(Mid(temp_text, 9, 2)) > 0 Then
                    If Len(sRupiya) > 0 Then
                        sRupiya = sRupiya & guj_unit_arr(Val(Mid(temp_text, 9, 2)))
                    End If
                End If
            Else
                If length = 9 Then
                    sRupiya = guj_unit_arr(Val(Mid(temp_text, 1, 2))) & " kri[D "
                    If Val(Mid(temp_text, 3, 2)) > 0 Then
                        If Len(sRupiya) > 0 Then
                            sRupiya = sRupiya & guj_unit_arr(Val(Mid(temp_text, 3, 2))) & " liK "
                        End If
                    End If
                    If Val(Mid(temp_text, 5, 2)) > 0 Then
                        If Len(sRupiya) > 0 Then
                            sRupiya = sRupiya & guj_unit_arr(Val(Mid(temp_text, 5, 2))) & " hjir  "
                        End If
                    End If
                    If Val(Mid(temp_text, 7, 1)) > 0 Then
                        If Len(sRupiya) > 0 Then
                            sRupiya = sRupiya & guj_hundred_arr(Val(Mid(temp_text, 7, 1))) & " "
                        End If
                    End If
                    If Val(Mid(temp_text, 8, 2)) > 0 Then
                        If Len(sRupiya) > 0 Then
                            sRupiya = sRupiya & guj_unit_arr(Val(Mid(temp_text, 8, 2)))
                        End If
                    End If
                Else
                    If length = 8 Then
                        sRupiya = guj_unit_arr(Val(Mid(temp_text, 1, 1))) & " kri[D  "
                        If Val(Mid(temp_text, 2, 2)) > 0 Then
                            If Len(sRupiya) > 0 Then
                                sRupiya = sRupiya & guj_unit_arr(Val(Mid(temp_text, 2, 2))) & "  liK "
                            End If
                        End If
                        If Val(Mid(temp_text, 4, 2)) > 0 Then
                            If Len(sRupiya) > 0 Then
                                sRupiya = sRupiya & guj_unit_arr(Val(Mid(temp_text, 4, 2))) & "  hjir "
                            End If
                        End If
                        If Val(Mid(temp_text, 6, 1)) > 0 Then
                            If Len(sRupiya) > 0 Then
                                sRupiya = sRupiya & guj_hundred_arr(Val(Mid(temp_text, 6, 1))) & " "
                            End If
                        End If
                        If Val(Mid(temp_text, 7, 2)) > 0 Then
                            If Len(sRupiya) > 0 Then
                                sRupiya = sRupiya & guj_unit_arr(Val(Mid(temp_text, 7, 2)))
                            End If
                        End If
                    Else
                        If length = 7 Then
                            sRupiya = guj_unit_arr(Val(Mid(temp_text, 1, 2))) & "  liK "
                            If Val(Mid(temp_text, 3, 2)) > 0 Then
                                If Len(sRupiya) > 0 Then
                                    sRupiya = sRupiya & guj_unit_arr(Val(Mid(temp_text, 3, 2))) & "  hjir "
                                End If
                            End If
                            If Val(Mid(temp_text, 5, 1)) > 0 Then
                                If Len(sRupiya) > 0 Then
                                    sRupiya = sRupiya & guj_hundred_arr(Val(Mid(temp_text, 5, 1))) & " "
                                End If
                            End If
                            If Val(Mid(temp_text, 6, 2)) > 0 Then
                                If Len(sRupiya) > 0 Then
                                    sRupiya = sRupiya & guj_unit_arr(Val(Mid(temp_text, 6, 2)))
                                End If
                            End If
                        Else
                            If length = 6 Then
                                sRupiya = guj_unit_arr(Val(Mid(temp_text, 1, 1))) & "  liK "
                                If Val(Mid(temp_text, 2, 2)) > 0 Then
                                    If Len(sRupiya) > 0 Then
                                        sRupiya = sRupiya & guj_unit_arr(Val(Mid(temp_text, 2, 2))) & "  hjir "
                                    End If
                                End If
                                If Val(Mid(temp_text, 4, 1)) > 0 Then
                                    If Len(sRupiya) > 0 Then
                                        sRupiya = sRupiya & guj_hundred_arr(Val(Mid(temp_text, 4, 1))) & " "
                                    End If
                                End If
                                If Val(Mid(temp_text, 5, 2)) > 0 Then
                                    If Len(sRupiya) > 0 Then
                                        sRupiya = sRupiya & guj_unit_arr(Val(Mid(temp_text, 5, 2)))
                                    End If
                                End If
                            Else
                                If length = 5 Then
                                    sRupiya = guj_unit_arr(Val(Mid(temp_text, 1, 2))) & "  hjir "
                                    If Val(Mid(temp_text, 3, 1)) > 0 Then
                                        If Len(sRupiya) > 0 Then
                                            sRupiya = sRupiya & guj_hundred_arr(Val(Mid(temp_text, 3, 1))) & " "
                                        End If
                                    End If
                                    If Val(Mid(temp_text, 4, 2)) > 0 Then
                                        If Len(sRupiya) > 0 Then
                                            sRupiya = sRupiya & guj_unit_arr(Val(Mid(temp_text, 4, 2)))
                                        End If
                                    End If
                                Else
                                    If length = 4 Then
                                        sRupiya = guj_unit_arr(Val(Mid(temp_text, 1, 1))) & " hjir "
                                        If Val(Mid(temp_text, 2, 1)) > 0 Then
                                            If Len(sRupiya) > 0 Then
                                                sRupiya = sRupiya & guj_hundred_arr(Val(Mid(temp_text, 2, 1))) & " "
                                            End If
                                        End If
                                        If Val(Mid(temp_text, 3, 2)) > 0 Then
                                            If Len(sRupiya) > 0 Then
                                                sRupiya = sRupiya & guj_unit_arr(Val(Mid(temp_text, 3, 2)))
                                            End If
                                        End If
                                    Else
                                        If length = 3 Then
                                            sRupiya = guj_hundred_arr(Val(Mid(temp_text, 1, 1))) & " "
                                            If Val(Mid(temp_text, 2, 2)) > 0 Then
                                                If Len(sRupiya) > 0 Then
                                                    sRupiya = sRupiya & guj_unit_arr(Val(Mid(temp_text, 2, 2)))
                                                End If
                                            End If
                                        Else
                                            If length > 0 Then
                                                sRupiya = guj_unit_arr(Val(temp_text))
                                            Else
                                                Num_To_Guj_Word = ""
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        End If
        If Len(Trim(sPaisa)) > 0 Then
            Num_To_Guj_Word = "a>k[ $p)yi : " & sRupiya & "  an[ p]si " & sPaisa & "  p&ri."
        Else
            Num_To_Guj_Word = "a>k[ $p)yi :  " & sRupiya & "  p&ri."
        End If
        '  Num_To_Guj_Word = "Dxks ~fhVe " & sRupiya & " Dvs hwme " & sPaisa & " htje."

    End Function
    Public Function comfocous(ByVal sender As ComboBox, ByVal ss As String, ByVal cn As SqlConnection) As ComboBox
        Dim dt1 As New DataTable
        Dim combo As New ComboBox
        Dim ss1 As String = ""
        combo = sender
        ss1 = combo.Text
        dt1 = Returntable(ss, cn)
        Dim r As Integer = 0
        combo.Items.Clear()
        Do While r < dt1.Rows.Count
            combo.Items.Add(dt1.Rows(r).Item(0) & "-" & dt1.Rows(r).Item(1))
            r = r + 1
        Loop
        If ss1 = "" Then
            If combo.Items.Count > 0 Then
                combo.Text = combo.Items(0).ToString
            End If
        Else
            combo.Text = ss1
        End If

        Return combo
    End Function
    Public Function CheckField(ByVal c_fld As String, ByVal c_tbl As String, ByVal cnn As SqlConnection) As Boolean
        Try
            Dim dt As New DataTable
            Dim sql As String
            sql = "select c.name from syscolumns c"
            sql = sql & " left join sysobjects o on c.id=o.id"
            sql = sql & " where o.type='u'"
            sql = sql & " and o.name=" & aq(c_tbl)
            sql = sql & " and c.name=" & aq(c_fld)
            dt = ob.Returntable(sql, cnn)
            If dt.Rows.Count > 0 Then
                CheckField = True
            Else
                CheckField = False
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return CheckField
    End Function
    Public Function Round2One(ByVal tmpCalc As Double)
        If tmpCalc - Int(tmpCalc) >= 0.5 Then
            tmpCalc = Int(tmpCalc) + 1
        Else
            tmpCalc = Int(tmpCalc)
        End If
        Round2One = tmpCalc
    End Function
    Public Function Get_Last_Receipt_Date_New(ByVal iLoanNo As Long, ByVal sLoanDate As String, ByVal sUpToDate As String) As Date
        Dim sSQL As String
        Dim rdRST As New DataTable
        Try

            sSQL = "SELECT max(doc_date) as LastDate FROM Receipt_Data WHERE company_id = " & clsVariables.CompnyId & " and loan_no = " & iLoanNo & " and Doc_Date <= " & aq(sFunction.DateConversion(sUpToDate))
            rdRST = ob.Returntable(sSQL, ob.getconnection(ob.Getconn))
            If rdRST.Rows.Count > 0 And Not IsDBNull(rdRST.Rows(0).Item("Lastdate")) Then
                If gLastReserveDate > rdRST.Rows(0).Item("Lastdate") Then
                    Get_Last_Receipt_Date_New = CDate(gLastReserveDate)
                Else
                    Get_Last_Receipt_Date_New = CDate(rdRST.Rows(0).Item("lastdate"))
                End If
            Else
                If gLastReserveDate > CDate((sFunction.DateConversion(sLoanDate))) Then
                    Get_Last_Receipt_Date_New = CDate(gLastReserveDate)
                Else
                    Get_Last_Receipt_Date_New = CDate((sFunction.DateConversion(sLoanDate)))
                End If
            End If

        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Get_Last_Receipt_Date_New
    End Function
    Public Sub Calc_Interest_New(ByVal iLoanNo As Long, ByVal sDocDate As String, ByVal Final As Boolean)
        Dim sSQL As String
        Dim sRST, lRST As New DataTable
        Dim rdRST As New DataTable

        Dim mLRDate, mDATE, mToDate, dDate As Date
        'Dim mRINTAMT, mRPANAMT, mRODINTAMT, mRODPANAMT, mINSTALL, mDAYS, mPINTBAL, xPINTBAL, mMDAYS, dRECAMT, dPAYAMT, dBAL As Double
        Dim mINSTALL, mDays, mPINTBAL, mMDAYS, dRECAMT, dPAYAMT, dBAL As Double
        Dim MTH, MTH1, MTH2, mINSTMTH, mPERIOD, mMONTH, mMTHDAYS As Integer
        Dim YY, MM As Integer

        Dim mPINTDAYS, mSTARTDAY, mENDDAY As Double

        Dim mINT, mINT1, mODINT, mBALINT, mBALODINT, tINT, tODINT As Double
        Dim dACCTCODE, lDocType, lDocNo, dDays, dODDays As Long

        '        Dim tmpLRDate As Date

        Try
            mRINTAMT = 0
            mRPANAMT = 0
            mRODINTAMT = 0
            mRODPANAMT = 0
            mINSTALL = 0
            mDays = 0
            MTH = 0
            MTH1 = 0
            MTH2 = 0
            mINSTMTH = 0
            mPERIOD = 0
            mPINTBAL = 0
            xPINTBAL = 0
            mODINTBAL = 0
            mODPANBAL = 0
            mDuePeriod = 0

            sSQL = "SELECT * FROM Loan_balance WHERE company_id = " & clsVariables.CompnyId & " and loan_no = " & iLoanNo
            lRST = ob.Returntable(sSQL, ob.getconnection(ob.Getconn))
            sDocDate = Mid(sDocDate, 4, 2) & "/" & Mid(sDocDate, 1, 2) & "/" & Mid(sDocDate, 7, 4)
            If lRST.Rows.Count > 0 Then
                If Not ob.IfNullThen(lRST.Rows(0).Item("Stop_Payment"), False) Then
                    mINT = ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)
                    mINT1 = ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)
                    mODINT = 2
                    'mToDate = DateValue(CDate(sDocDate))
                    mToDate = sDocDate
                    If Not ob.IfNullThen(lRST.Rows(0).Item("Stop_Payment"), False) Then
                        Select Case lRST.Rows(0).Item("Column_id")
                            Case 11, 10, 12, 15, 18
                                mINSTALL = (ob.IfNullThen(lRST.Rows(0).Item("loan_amount"), 0) - ob.IfNullThen(lRST.Rows(0).Item("advance_installment"), 0)) / ob.IfNullThen(lRST.Rows(0).Item("period"), 0)

                                mLRDate = Get_Last_Receipt_Date_New(iLoanNo, Format(CDate(lRST.Rows(0).Item("doc_date")), "dd/MM/yyyy"), Format(CDate(mToDate), "dd/MM/yyyy"))
                                Select Case lRST.Rows(0).Item("due_date")
                                    Case Is >= DateValue(sDocDate)
                                        '
                                        '                                 *************** Interest @ Receipt
                                        mDays = DateDiff(DateInterval.Day, mLRDate, CDate(sDocDate))
                                        'mDays = DateDiff(DateInterval.Day, (sDocDate), mLRDate)
                                        '                                  mRINTAMT = roundoff(((lRST!balance_amount * lRST!Percentage) / 100 * mDAYS) / 365)
                                        mRINTAMT = ob.RoundOff(((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) * ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)) / 100 * mDays) / 365, 1, AdoFunc.RoundOffConstants.slNearest)

                                        '                                 *************** Panalty Interest @ Receipt

                                        '                                  ********** Total Installment Month
                                        MTH1 = Month(lRST.Rows(0).Item("doc_date")) + Year(lRST.Rows(0).Item("doc_date")) * 12
                                        MTH2 = Month(DateValue((sDocDate))) + Year(DateValue((sDocDate))) * 12

                                        mINSTMTH = 0
                                        mPERIOD = 0
                                        MTH = MTH1
                                        Do While MTH <= MTH2
                                            MTH = MTH + 1
                                            mINSTMTH = mINSTMTH + 1
                                            mPERIOD = mPERIOD + 1
                                        Loop
                                        mINSTMTH = mINSTMTH - 2
                                        mPERIOD = mPERIOD
                                        '                                 **********
                                        MTH1 = Month(mLRDate) + Year(mLRDate) * 12
                                        MTH2 = Month(DateValue((sDocDate))) + Year(DateValue((sDocDate))) * 12

                                        MTH = MTH1

                                        mPINTDAYS = 0
                                        mSTARTDAY = 0
                                        mENDDAY = 0

                                        Do While MTH <= MTH2
                                            YY = Int(MTH / 12)
                                            MM = MTH - (YY * 12)
                                            If MM = 0 Then
                                                YY = YY - 1
                                                MM = 12
                                            End If
                                            If MM < 10 Then
                                                mDATE = DateValue("0" & Format(MM, "#0") & "/27/" + Format(YY, "###0"))
                                            Else
                                                mDATE = DateValue(Format(MM, "#0") & "/27/" + Format(YY, "###0"))
                                            End If

                                            mSTARTDAY = 0
                                            mMONTH = Month(mDATE)
                                            mMTHDAYS = 26
                                            Do While mMONTH = Month(mDATE)
                                                mDATE = DateAdd(DateInterval.Day, 1, mDATE)
                                                'mDATE = mDATE + 1
                                                mMTHDAYS = mMTHDAYS + 1
                                                If MTH = MTH1 Then
                                                    mSTARTDAY = mMTHDAYS
                                                End If
                                                mENDDAY = mMTHDAYS

                                                If mDATE >= DateValue((sDocDate)) Then
                                                    Exit Do
                                                End If
                                            Loop
                                            MTH = MTH + 1
                                            mPINTDAYS = mPINTDAYS + mMTHDAYS
                                            If mDATE >= DateValue((sDocDate)) Then
                                                Exit Do
                                            End If
                                        Loop
                                        mPINTDAYS = mDays
                                        If lRST.Rows(0).Item("Column_id") = 15 And ob.IfNullThen(lRST.Rows(0).Item("submit_doccument"), "N") = "Y" Then
                                            If mPERIOD > 5 Then
                                                mPINTBAL = ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) - ((ob.IfNullThen(lRST.Rows(0).Item("loan_amount"), 0) - ob.IfNullThen(lRST.Rows(0).Item("advance_installment"), 0)) - (mINSTMTH * mINSTALL))
                                                xPINTBAL = mPINTBAL
                                                If mPINTBAL > 0 Then
                                                    mRPANAMT = ob.RoundOff(((mPINTBAL * 2 / 100) * mPINTDAYS) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                                Else
                                                    mRPANAMT = 0
                                                End If
                                            End If
                                        Else
                                            If mPERIOD > 1 Then
                                                mPINTBAL = ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) - ((ob.IfNullThen(lRST.Rows(0).Item("loan_amount"), 0) - ob.IfNullThen(lRST.Rows(0).Item("advance_installment"), 0)) - (mINSTMTH * mINSTALL))
                                                xPINTBAL = mPINTBAL
                                                If mPINTBAL > 0 Then
                                                    mRPANAMT = ob.RoundOff(((mPINTBAL * 2 / 100) * mPINTDAYS) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                                Else
                                                    mPINTBAL = 0
                                                    mRPANAMT = 0
                                                End If
                                            End If
                                        End If
                                    Case Is < DateValue(sDocDate)
                                        If lRST.Rows(0).Item("due_date") >= mLRDate And lRST.Rows(0).Item("due_date") <= DateValue((sDocDate)) Then
                                            mDays = DateDiff(DateInterval.Day, mLRDate, CDate(lRST.Rows(0).Item("due_date")))
                                            mRINTAMT = ob.RoundOff(((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) * ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)) / 100 * mDays) / 365, 1, AdoFunc.RoundOffConstants.slNearest)

                                            '                                     *************** Panalty Interest @ Receipt
                                            '                                     ********** Total Installment Month
                                            MTH1 = Month(lRST.Rows(0).Item("doc_date")) + Year(lRST.Rows(0).Item("doc_date")) * 12
                                            MTH2 = Month(lRST.Rows(0).Item("due_date")) + Year(lRST.Rows(0).Item("due_date")) * 12

                                            mINSTMTH = 0
                                            MTH = MTH1
                                            Do While MTH <= MTH2
                                                MTH = MTH + 1
                                                mINSTMTH = mINSTMTH + 1
                                            Loop
                                            mINSTMTH = mINSTMTH - 1
                                            '                                    **********
                                            MTH1 = Month(mLRDate) + Year(mLRDate) * 12
                                            MTH2 = Month(lRST.Rows(0).Item("due_date")) + Year(lRST.Rows(0).Item("due_date")) * 12

                                            mPERIOD = 0
                                            MTH = MTH1

                                            mPINTDAYS = 0
                                            mSTARTDAY = 0
                                            mENDDAY = 0
                                            Do While MTH <= MTH2
                                                YY = Int(MTH / 12)
                                                MM = MTH - (YY * 12)
                                                If MM = 0 Then
                                                    YY = YY - 1
                                                    MM = 12
                                                End If
                                                If MM < 10 Then
                                                    mDATE = DateValue("0" & Format(MM, "#0") & "/27/" + Format(YY, "###0"))
                                                Else
                                                    mDATE = DateValue(Format(MM, "#0") & "/27/" + Format(YY, "###0"))
                                                End If

                                                mMONTH = Month(mDATE)
                                                mMTHDAYS = 26
                                                mSTARTDAY = 0
                                                Do While mMONTH = Month(mDATE)
                                                    mDATE = DateAdd(DateInterval.Day, 1, mDATE)
                                                    'mDATE = mDATE + 1
                                                    mMTHDAYS = mMTHDAYS + 1
                                                    If MTH = MTH1 Then
                                                        mSTARTDAY = mMTHDAYS
                                                    End If
                                                    mENDDAY = mMTHDAYS
                                                Loop
                                                MTH = MTH + 1
                                                mPERIOD = mPERIOD + 1
                                                mPINTDAYS = mPINTDAYS + mMTHDAYS
                                            Loop
                                            mPINTDAYS = mDays
                                            If lRST.Rows(0).Item("Column_id") = 15 And ob.IfNullThen(lRST.Rows(0).Item("submit_doccument"), "N") = "Y" Then
                                                If mPERIOD > 5 Then
                                                    mPINTBAL = ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) - ((ob.IfNullThen(lRST.Rows(0).Item("loan_amount"), 0) - ob.IfNullThen(lRST.Rows(0).Item("advance_installment"), 0)) - (mINSTMTH * mINSTALL))
                                                    xPINTBAL = mPINTBAL

                                                    mRPANAMT = ob.RoundOff(((mPINTBAL * 2 / 100) * mPINTDAYS) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                                End If
                                            Else
                                                If mPERIOD > 1 Then
                                                    mPINTBAL = ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) - ((ob.IfNullThen(lRST.Rows(0).Item("loan_amount"), 0) - ob.IfNullThen(lRST.Rows(0).Item("advance_installment"), 0)) - (mINSTMTH * mINSTALL))
                                                    xPINTBAL = mPINTBAL
                                                    mRPANAMT = ob.RoundOff(((mPINTBAL * 2 / 100) * mPINTDAYS) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                                End If
                                            End If
                                            mLRDate = lRST.Rows(0).Item("due_date")
                                        End If
                                        '                                  *************** Over Due Interest @ Receipt
                                        mDays = DateDiff(DateInterval.Day, mLRDate, CDate(sDocDate))
                                        '                                  mRODINTAMT = RoundOff(((lRST!balance_amount * lRST!Percentage) / 100 * mDays) / 365, 1, slNearest)
                                        mRODINTAMT = ob.RoundOff((((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) + ob.IfNullThen(lRST.Rows(0).Item("Over_Due_Interest_Balance"), 0) + ob.IfNullThen(lRST.Rows(0).Item("Over_Due_Penalty_Balance"), 0)) * ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)) / 100 * mDays) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                        '                                  *************** Over Due Panalty Interest @ Receipt
                                        MTH1 = Month(mLRDate) + Year(mLRDate) * 12
                                        MTH2 = Month(DateValue((sDocDate))) + Year(DateValue((sDocDate))) * 12

                                        mPERIOD = 0
                                        MTH = MTH1

                                        mPINTDAYS = 0
                                        mSTARTDAY = 0
                                        mENDDAY = 0

                                        Do While MTH <= MTH2
                                            YY = Int(MTH / 12)
                                            MM = MTH - (YY * 12)
                                            If MM = 0 Then
                                                YY = YY - 1
                                                MM = 12
                                            End If
                                            If MM < 10 Then
                                                mDATE = DateValue("0" & Format(MM, "#0") & "/27/" + Format(YY, "###0"))
                                            Else
                                                mDATE = DateValue(Format(MM, "#0") & "/27/" + Format(YY, "###0"))
                                            End If

                                            mMONTH = Month(mDATE)
                                            mMTHDAYS = 26
                                            mSTARTDAY = 0
                                            Do While mMONTH = Month(mDATE)
                                                mDATE = DateAdd(DateInterval.Day, 1, mDATE)
                                                'mDATE = mDATE + 1
                                                mMTHDAYS = mMTHDAYS + 1
                                                If MTH = MTH1 Then
                                                    mSTARTDAY = mMTHDAYS
                                                End If
                                                mENDDAY = mMTHDAYS
                                            Loop
                                            MTH = MTH + 1
                                            mPERIOD = mPERIOD + 1
                                            mPINTDAYS = mPINTDAYS + mMTHDAYS
                                        Loop
                                        mPINTDAYS = mDays
                                        If mPERIOD > 1 Then
                                            '                                     mRODPANAMT = RoundOff(((lRST!balance_amount * 2 / 100) * mPINTDAYS) / 365, 1, slNearest)
                                            mRODPANAMT = ob.RoundOff((((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) + ob.IfNullThen(lRST.Rows(0).Item("Over_Due_Interest_Balance"), 0) + ob.IfNullThen(lRST.Rows(0).Item("Over_Due_Penalty_Balance"), 0)) * 2 / 100) * mPINTDAYS) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                        End If
                                End Select
                                '       ****************** Gold Loan
                            Case 14
                                mINSTALL = (ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) - ob.IfNullThen(lRST.Rows(0).Item("advance_installment"), 0)) / ob.IfNullThen(lRST.Rows(0).Item("period"), 0)

                                mLRDate = Get_Last_Receipt_Date_New(iLoanNo, Format(CDate(lRST.Rows(0).Item("doc_date")), "dd/MM/yyyy"), Format(CDate(mToDate), "dd/MM/yyyy"))

                                Select Case lRST.Rows(0).Item("due_date")
                                    Case Is >= DateValue(sDocDate)
                                        '                                  *************** Interest @ Receipt
                                        mMDAYS = DateDiff(DateInterval.Day, CDate(sDocDate), CDate(lRST.Rows(0).Item("doc_date")))
                                        If Final Then
                                            If mMDAYS < 30 Then
                                                mRINTAMT = ob.RoundOff(((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) * ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)) / 100 * 30) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                            Else

                                                mDays = DateDiff(DateInterval.Day, mLRDate, (CDate(sDocDate)))
                                                mRINTAMT = ob.RoundOff(((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) * ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)) / 100 * mDays) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                            End If
                                        Else
                                            mDays = DateDiff(DateInterval.Day, mLRDate, CDate(sDocDate))
                                            mRINTAMT = ob.RoundOff(((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) * ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)) / 100 * mDays) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                        End If
                                    Case Is < DateValue(CDate(sDocDate))
                                        If lRST.Rows(0).Item("due_date") >= mLRDate And lRST.Rows(0).Item("due_date") <= DateValue(CDate(sDocDate)) Then
                                            mDays = DateDiff(DateInterval.Day, mLRDate, CDate(lRST.Rows(0).Item("due_date")))
                                            mRINTAMT = ob.RoundOff(((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) * ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)) / 100 * mDays) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                            mLRDate = lRST.Rows(0).Item("due_date")
                                        End If
                                        '                                  *************** Over Due Interest @ Receipt
                                        mDays = DateDiff(DateInterval.Day, mLRDate, CDate(sDocDate))
                                        mRODINTAMT = ob.RoundOff(((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) * ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)) / 100 * mDays) / 365, 1, AdoFunc.RoundOffConstants.slNearest)


                                        mRODPANAMT = ob.RoundOff(((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) * 2) / 100 * mDays) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                End Select
                                '****************** Taran  Loan
                            Case 13
                                '                      mINSTALL = (lrst!loan_amount - lrst!advance_installment) / lrst!period

                                mLRDate = Get_Last_Receipt_Date_New(iLoanNo, Format(CDate(lRST.Rows(0).Item("doc_date")), "dd/MM/yyyy"), Format(CDate(mToDate), "dd/MM/yyyy"))

                                '                      *************** Interest @ Receipt
                                mMDAYS = DateDiff(DateInterval.Day, CDate(lRST.Rows(0).Item("doc_date")), CDate(sDocDate))
                                If Final = vbBoolean Then
                                    If mMDAYS < 30 Then
                                        mRINTAMT = ob.RoundOff(((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) * ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)) / 100 * 30) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                    Else
                                        mDays = DateDiff(DateInterval.Day, mLRDate, CDate(sDocDate))
                                        mRINTAMT = ob.RoundOff(((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) * ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)) / 100 * mDays) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                    End If
                                Else
                                    mDays = DateDiff(DateInterval.Day, mLRDate, CDate(sDocDate))

                                    mRINTAMT = ob.RoundOff(((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) * ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)) / 100 * mDays) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                End If
                            Case 16
                                If ob.IfNullThen(lRST.Rows(0).Item("period"), 0) <> 0 Then
                                    mINSTALL = (ob.IfNullThen(lRST.Rows(0).Item("loan_amount"), 0) - ob.IfNullThen(lRST.Rows(0).Item("advance_installment"), 0)) / ob.IfNullThen(lRST.Rows(0).Item("period"), 0)
                                Else
                                    mINSTALL = 0
                                End If

                                mLRDate = Get_Last_Receipt_Date_New(iLoanNo, Format(CDate(lRST.Rows(0).Item("doc_date")), "dd/MM/yyyy"), Format(CDate(mToDate), "dd/MM/yyyy"))

                                '                      *************** Interest @ Receipt

                                mMDAYS = DateDiff(DateInterval.Day, CDate(lRST.Rows(0).Item("doc_date")), CDate(sDocDate))

                                mDays = DateDiff(DateInterval.Day, mLRDate, CDate(sDocDate))

                                mRINTAMT = ob.RoundOff(((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) * ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)) / 100 * mDays) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                '******Cash Credit Dhiran
                            Case 17

                                mToDate = DateValue(CDate(sDocDate))
                                sSQL = "DELETE FROM CC_Ledger WHERE company_id = " & clsVariables.CompnyId & " and loan_no = " & iLoanNo
                                ob.Execute(sSQL, ob.getconnection(ob.Getconn))
                                'Opening
                                sSQL = "SELECT loan_opening,Over_Due_interest_Opening,Over_Due_Penalty_Opening FROM Loan_Opening_Balance WHERE company_id = " & clsVariables.CompnyId & " and loan_no = " & iLoanNo & " and Loan_Opening <> 0"
                                rdRST = ob.Returntable(sSQL, ob.getconnection(ob.Getconn))
                                If rdRST.Rows.Count > 0 Then
                                    sSQL = "INSERT INTO CC_Ledger VALUES(" & clsVariables.CompnyId & "," & iLoanNo & "," & aq(Format(CDate(gFinYearBegin), "MM/dd/yyyy")) & ",0,0"
                                    If ob.IfNullThen(rdRST.Rows(0).Item("Loan_Opening"), 0) > 0 Then
                                        sSQL = sSQL & "," & ob.IfNullThen(rdRST.Rows(0).Item("Loan_Opening"), 0) & ",0," & ob.IfNullThen(rdRST.Rows(0).Item("over_due_interest_opening"), 0) & "," & ob.IfNullThen(rdRST.Rows(0).Item("over_due_penalty_opening"), 0) & ",0,0,0,0,0,0,0,0,0,0,0,0)"
                                    Else
                                        sSQL = sSQL & ",0," & ob.IfNullThen(rdRST.Rows(0).Item("Loan_Opening"), 0) & ",0,0," & ob.IfNullThen(rdRST.Rows(0).Item("over_due_interest_opening"), 0) & "," & ob.IfNullThen(rdRST.Rows(0).Item("over_due_penalty_opening"), 0) & ",0,0,0,0,0,0,0,0,0,0)"
                                    End If
                                    ob.Execute(sSQL, ob.getconnection(ob.Getconn))
                                End If
                                rdRST.Clear()
                                'Payment
                                sSQL = "SELECT doc_no,doc_date,payment_amount,advance_installment FROM Payment_Data WHERE company_id = " & clsVariables.CompnyId & " and loan_no = " & iLoanNo & " and doc_date <= " & aq(sDocDate)
                                rdRST = ob.Returntable(sSQL, ob.getconnection(ob.Getconn))
                                If rdRST.Rows.Count > 0 Then
                                    Dim j As Integer
                                    j = 0
4:                                  Do While j < rdRST.Rows.Count
                                        sSQL = "INSERT INTO CC_Ledger VALUES(" & clsVariables.CompnyId & "," & iLoanNo & "," & aq(Format(CDate(rdRST.Rows(j).Item("doc_date")), "MM/dd/yyyy")) & ",0," & rdRST.Rows(j).Item("doc_no") & "," & ob.IfNullThen(rdRST.Rows(j).Item("payment_amount"), 0) & "-" & ob.IfNullThen(rdRST.Rows(j).Item("advance_installment"), 0) & ",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)"
                                        ob.Execute(sSQL, ob.getconnection(ob.Getconn))
                                        j = j + 1
                                    Loop
                                End If
                                rdRST.Clear()

                                'Receipt
                                sSQL = "SELECT doc_type,doc_no,column_id,doc_date,received_amount,received_interest,received_penalty,Actual_Interest FROM Receipt_Data WHERE company_id = " & clsVariables.CompnyId & " and loan_no = " & iLoanNo & " and doc_date <= " & aq(sDocDate)
                                rdRST = ob.Returntable(sSQL, ob.getconnection(ob.Getconn))
                                If rdRST.Rows.Count > 0 Then
                                    Dim j As Integer
                                    j = 0
                                    Do While j < rdRST.Rows.Count
                                        sSQL = "INSERT INTO CC_Ledger  VALUES(" & clsVariables.CompnyId & "," & iLoanNo & "," & aq(rdRST.Rows(j).Item("doc_date")) & "," & rdRST.Rows(j).Item("doc_type") & "," & rdRST.Rows(j).Item("doc_no") & ",0," & ob.IfNullThen(rdRST.Rows(j).Item("Received_Amount"), 0) & ",0"
                                        If rdRST.Rows(j).Item("Column_id") = 17 Then
                                            If ob.IfNullThen(rdRST.Rows(j).Item("Actual_Interest"), 0) < 0 Then
                                                '                                  sSQL = sSQL & "," & Abs(rdRST!Actual_Interest + rdRST!received_interest) & "," & rdRST!received_interest & ""
                                                sSQL = sSQL & ",0," & Abs(ob.IfNullThen(rdRST.Rows(j).Item("Actual_Interest"), 0)) & ""
                                            Else
                                                sSQL = sSQL & ",0," & ob.IfNullThen(rdRST.Rows(j).Item("received_interest"), 0) & ""
                                            End If
                                        Else
                                            sSQL = sSQL & ",0," & ob.IfNullThen(rdRST.Rows(j).Item("received_interest"), 0) & ""
                                        End If
                                        sSQL = sSQL & "," & ob.IfNullThen(rdRST.Rows(j).Item("received_penalty"), 0) & ",0,0,0,0,0,0,0,0,0,0)"
                                        ob.Execute(sSQL, ob.getconnection(ob.Getconn))
                                        j = j + 1
                                    Loop
                                End If
                                rdRST.Clear()

                                'Interest Data
                                sSQL = "SELECT year_id,Interest_date,Loan_No,(Interest_amount + penalty_amount) as interest,(over_due_interest+over_due_penalty) as penalty FROM Interest_Data WHERE company_id = " & clsVariables.CompnyId & " AND interest_date <= " & aq(sDocDate) & " and loan_no = " & iLoanNo & ""
                                sSQL = sSQL & " ORDER by loan_no,interest_date"
                                sRST = ob.Returntable(sSQL, ob.getconnection(ob.Getconn))
                                If sRST.Rows.Count > 0 Then
                                    Dim j As Integer
                                    j = 0
                                    Do While j < sRST.Rows.Count
                                        sSQL = "INSERT INTO CC_Ledger  VALUES(" & clsVariables.CompnyId & "," & iLoanNo & "," & aq(sRST.Rows(j).Item("interest_date")) & ",0,0," & ob.IfNullThen(sRST.Rows(j).Item("interest"), 0) + ob.IfNullThen(sRST.Rows(j).Item("penalty"), 0) & ",0,0,0," & ob.IfNullThen(sRST.Rows(j).Item("interest"), 0) + ob.IfNullThen(sRST.Rows(j).Item("penalty"), 0) & ",0,0,0,0,0,0,0,0,0,0,0)"
                                        ob.Execute(sSQL, ob.getconnection(ob.Getconn))
                                        j = j + 1
                                    Loop
                                End If
                                sRST.Clear()
                                Dim dRecBal, dPayBal, dRecProd, dPayProd, mPayInt, mRecInt, dPODPROD, dRODPROD, mRODINT, mPODINT, tRECINT, tPAYINT, tRODINT, tPODINT As Double

                                tRECINT = 0
                                tPAYINT = 0
                                tRODINT = 0
                                tPODINT = 0
                                'Calculate Interest
                                sSQL = "SELECT * FROM CC_Ledger WHERE company_id = " & clsVariables.CompnyId & " and loan_no = " & iLoanNo & " ORDER by DOC_DATE"
                                rdRST = ob.Returntable(sSQL, ob.getconnection(ob.Getconn))
                                If rdRST.Rows.Count > 0 Then
                                    Dim j As Integer
                                    j = 0
                                    Do While j < rdRST.Rows.Count
                                        dACCTCODE = rdRST.Rows(j).Item("Loan_No")
                                        dDate = rdRST.Rows(j).Item("doc_date")

                                        dRECAMT = 0
                                        dPAYAMT = 0
                                        dBAL = 0
                                        Do While j < rdRST.Rows.Count And rdRST.Rows(j).Item("Loan_No") = dACCTCODE
                                            lDocType = rdRST.Rows(j).Item("doc_type")
                                            lDocNo = rdRST.Rows(j).Item("doc_no")
                                            dRecBal = 0
                                            dPayBal = 0
                                            dRecProd = 0
                                            dPayProd = 0
                                            mPayInt = 0
                                            mRecInt = 0
                                            dPODPROD = 0
                                            dRODPROD = 0
                                            mRODINT = 0
                                            mPODINT = 0

                                            If rdRST.Rows(j).Item("doc_date") <> gFinYearBegin Then
                                                If Val(rdRST.Rows(j).Item("doc_type")) = 0 And Val(rdRST.Rows(j).Item("doc_no")) = 0 Then
                                                    dDays = DateDiff(DateInterval.Day, dDate, CDate(rdRST.Rows(j).Item("doc_date"))) + 1      ' DAYS = BETWEEN TO DAYS
                                                Else
                                                    dDays = DateDiff(DateInterval.Day, dDate, CDate(rdRST.Rows(j).Item("doc_date"))) '+ 1      ' DAYS = BETWEEN TO DAYS
                                                End If
                                            Else
                                                dDays = DateDiff(DateInterval.Day, dDate, CDate(rdRST.Rows(j).Item("doc_date"))) '+ 1      ' DAYS = BETWEEN TO DAYS
                                            End If
                                            dODDays = 0

                                            If dBAL < 0 Then
                                                dRecBal = Abs(dBAL)
                                                dRecProd = (dRecBal * dDays)
                                                dRODPROD = (dRecBal * dODDays)
                                                mRecInt = ob.RoundOff((mINT * dRecProd) / 36500, 1, AdoFunc.RoundOffConstants.slNearest)
                                            Else
                                                dPayBal = Abs(dBAL)
                                                dPayProd = (dPayBal * dDays)
                                                dPODPROD = (dPayBal * dODDays)

                                                mPayInt = ob.RoundOff((mINT * dPayProd) / 36500, 1, AdoFunc.RoundOffConstants.slNearest)
                                            End If
                                            sSQL = "UPDATE CC_Ledger SET DAYS = " & dDays & ",rec_bal =  " & dRecBal & ",pay_bal = " & dPayBal & ",rec_prod = " & dRecProd & ",PAY_PROD = " & dPayProd & ",PAY_INT = PAY_INT + " & mPayInt & ",REC_INT = REC_INT + " & mRecInt & " WHERE company_id = " & clsVariables.CompnyId & " and loan_no = " & iLoanNo & " and doc_type = " & lDocType & " and doc_no = " & lDocNo
                                            ob.Execute(sSQL, ob.getconnection(ob.Getconn))

                                            'dDate = rdRST!Doc_Date                 '// AGAIN FOR NEXT CALUCATION
                                            If rdRST.Rows(j).Item("doc_date") <> gFinYearBegin Then
                                                If rdRST.Rows(j).Item("doc_type") = 0 And rdRST.Rows(j).Item("doc_no") = 0 Then
                                                    dDate = DateAdd(DateInterval.Day, 1, CDate(rdRST.Rows(j).Item("doc_date")))      ' DAYS = BETWEEN TO DAYS
                                                Else
                                                    dDate = rdRST.Rows(j).Item("doc_date")          ' DAYS = BETWEEN TO DAYS
                                                End If
                                            Else
                                                dDays = rdRST.Rows(j).Item("doc_date")                      '// AGAIN FOR NEXT CALUCATION
                                            End If

                                            dRECAMT = dRECAMT + ob.IfNullThen(rdRST.Rows(j).Item("rec_amt"), 0)
                                            dPAYAMT = dPAYAMT + ob.IfNullThen(rdRST.Rows(j).Item("pay_amt"), 0)
                                            dBAL = dPAYAMT - dRECAMT
                                            '                               tRECINT = tRECINT + mRecInt
                                            tRECINT = tRECINT + mRecInt + ob.IfNullThen(rdRST.Rows(j).Item("rec_int"), 0)
                                            tPAYINT = tPAYINT + mPayInt
                                            tRODINT = tRODINT + mRODINT
                                            tPODINT = tPODINT + mPODINT

                                            j = j + 1
                                            If j = rdRST.Rows.Count Then
                                                Exit Do
                                            End If
                                        Loop

                                        dDays = DateDiff(DateInterval.Day, dDate, mToDate) '+ 1

                                        mPayInt = 0
                                        mRecInt = 0

                                        If dBAL < 0 Then
                                            dRecBal = Abs(dBAL)
                                            dRecProd = (dRecBal * dDays)
                                            dRODPROD = (dRecBal * dODDays)

                                            mRecInt = ob.RoundOff((mINT * dRecProd) / 36500, 1, AdoFunc.RoundOffConstants.slNearest)
                                        Else
                                            dPayBal = Abs(dBAL)
                                            dPayProd = (dPayBal * dDays)
                                            dPODPROD = (dPayBal * dODDays)

                                            mPayInt = ob.RoundOff((mINT * dPayProd) / 36500, 1, AdoFunc.RoundOffConstants.slNearest)
                                        End If
                                        tRECINT = tRECINT + mRecInt
                                        tPAYINT = tPAYINT + mPayInt
                                        tRODINT = tRODINT + mRODINT
                                        tPODINT = tPODINT + mPODINT

                                        'Editing to be continued from here Later

                                        sSQL = "INSERT INTO CC_Ledger  VALUES(" & clsVariables.CompnyId & "," & iLoanNo & "," & aq(Format(CDate(mToDate), "MM/dd/yyyy")) & ",9,9999,0,0," & mPayInt & ",0,0,0,0," & dRecBal & "," & dPayBal & "," & dRecProd & "," & dPayProd & ",0,0," & dDays & ",0,0)"
                                        ob.Execute(sSQL, ob.getconnection(ob.Getconn))

                                        If j = rdRST.Rows.Count Then
                                            Exit Do
                                        End If
                                    Loop
                                End If
                                rdRST.Clear()
                                mBALINT = tPAYINT - tRECINT
                                mBALODINT = tPODINT - tRODINT
                                tINT = tINT + mBALINT
                                tODINT = tODINT + mBALODINT
                                mRINTAMT = Round(tINT, 0)
                                mRPANAMT = Round(tODINT, 0)
                        End Select
                    End If
                End If
                mODINTBAL = ob.IfNullThen(lRST.Rows(0).Item("Over_Due_Interest_Balance"), 0)
                mODPANBAL = ob.IfNullThen(lRST.Rows(0).Item("Over_Due_Penalty_Balance"), 0)

            End If
            lRST.Clear()

            Select Case iLoanNo
                Case 800122
                    mRODINTAMT = mRODINTAMT + mRINTAMT
                    mRODPANAMT = mRODPANAMT + mRPANAMT
                    mRINTAMT = 0
                    mRPANAMT = 0
                Case 106486, 106553, 106554, 106556, 106557, 106558, 106559, 106560, 106561, 106564, 106566, 106567, 106568, 106569, 106570, 106572, 106573, 106574, 106575, 106576, 106577, 106578, 106579, 106580, 106581, 106582, 106583, 106584, 106585, 106586, 106587, 106593, 106775
                    If DateValue(CDate(sDocDate)) = DateValue("03/31/2010") Then
                        mRODINTAMT = mRODINTAMT + mRINTAMT
                        mRODPANAMT = mRODPANAMT + mRPANAMT
                        mRINTAMT = 0
                        mRPANAMT = 0
                    End If
            End Select
            mDuePeriod = mPERIOD
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Sub Calc_Interest_Reserve(ByVal iLoanNo As Long, ByVal sDocDate As String, ByVal Final As Boolean)
        Dim sSQL As String
        Dim sRST, lRST As New DataTable
        Dim rdRST As New DataTable

        Dim mLRDate, mDATE, mToDate, dDate As Date
        'Dim mRINTAMT, mRPANAMT, mRODINTAMT, mRODPANAMT, mINSTALL, mDAYS, mPINTBAL, xPINTBAL, mMDAYS, dRECAMT, dPAYAMT, dBAL As Double
        Dim mINSTALL, mDays, mPINTBAL, mMDAYS, dRECAMT, dPAYAMT, dBAL As Double
        Dim MTH, MTH1, MTH2, mINSTMTH, mPERIOD, mMONTH, mMTHDAYS As Integer
        Dim YY, MM As Integer
        Dim tmpLRDate As Date
        Dim mPINTDAYS, mSTARTDAY, mENDDAY As Double

        Dim mINT, mINT1, mODINT, mBALINT, mBALODINT, tINT, tODINT As Double
        Dim dACCTCODE, lDocType, lDocNo, dDays, dODDays As Long

        '        Dim tmpLRDate As Date

        Try
            mRINTAMT = 0
            mRPANAMT = 0
            mRODINTAMT = 0
            mRODPANAMT = 0
            mINSTALL = 0
            mDays = 0
            MTH = 0
            MTH1 = 0
            MTH2 = 0
            mINSTMTH = 0
            mPERIOD = 0
            mPINTBAL = 0
            xPINTBAL = 0
            mODINTBAL = 0
            mODPANBAL = 0
            mDuePeriod = 0

            sSQL = "SELECT * FROM Loan_balance WHERE company_id = " & clsVariables.CompnyId & " and loan_no = " & iLoanNo
            lRST = ob.Returntable(sSQL, ob.getconnection(ob.Getconn))
            sDocDate = Mid(sDocDate, 4, 2) & "/" & Mid(sDocDate, 1, 2) & "/" & Mid(sDocDate, 7, 4)
            If lRST.Rows.Count > 0 Then
                If Not ob.IfNullThen(lRST.Rows(0).Item("Stop_Payment"), False) Then
                    mINT = ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)
                    mINT1 = ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)
                    mODINT = 2
                    'mToDate = DateValue(CDate(sDocDate))
                    mToDate = sDocDate
                    If Not ob.IfNullThen(lRST.Rows(0).Item("Stop_Payment"), False) Then
                        Select Case lRST.Rows(0).Item("Column_id")
                            Case 11, 10, 12, 15, 18
                                mINSTALL = (ob.IfNullThen(lRST.Rows(0).Item("loan_amount"), 0) - ob.IfNullThen(lRST.Rows(0).Item("advance_installment"), 0)) / ob.IfNullThen(lRST.Rows(0).Item("period"), 0)

                                mLRDate = Get_Last_Receipt_Date_New(iLoanNo, Format(CDate(lRST.Rows(0).Item("doc_date")), "dd/MM/yyyy"), Format(CDate(mToDate), "dd/MM/yyyy"))
                                Select Case lRST.Rows(0).Item("due_date")
                                    Case Is >= DateValue(sDocDate)
                                        '
                                        '                                 *************** Interest @ Receipt
                                        mDays = DateDiff(DateInterval.Day, mLRDate, CDate(sDocDate))
                                        'mDays = DateDiff(DateInterval.Day, (sDocDate), mLRDate)
                                        '                                  mRINTAMT = roundoff(((lRST!balance_amount * lRST!Percentage) / 100 * mDAYS) / 365)
                                        mRINTAMT = ob.RoundOff(((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) * ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)) / 100 * mDays) / 365, 1, AdoFunc.RoundOffConstants.slNearest)

                                        '                                 *************** Panalty Interest @ Receipt

                                        '                                  ********** Total Installment Month
                                        MTH1 = Month(lRST.Rows(0).Item("doc_date")) + Year(lRST.Rows(0).Item("doc_date")) * 12
                                        MTH2 = Month(DateValue((sDocDate))) + Year(DateValue((sDocDate))) * 12

                                        mINSTMTH = 0
                                        mPERIOD = 0
                                        MTH = MTH1
                                        Do While MTH <= MTH2
                                            MTH = MTH + 1
                                            mINSTMTH = mINSTMTH + 1
                                            mPERIOD = mPERIOD + 1
                                        Loop
                                        mINSTMTH = mINSTMTH - 2
                                        mPERIOD = mPERIOD
                                        '                                 **********
                                        MTH1 = Month(mLRDate) + Year(mLRDate) * 12
                                        MTH2 = Month(DateValue((sDocDate))) + Year(DateValue((sDocDate))) * 12

                                        MTH = MTH1

                                        mPINTDAYS = 0
                                        mSTARTDAY = 0
                                        mENDDAY = 0

                                        Do While MTH <= MTH2
                                            YY = Int(MTH / 12)
                                            MM = MTH - (YY * 12)
                                            If MM = 0 Then
                                                YY = YY - 1
                                                MM = 12
                                            End If
                                            If MM < 10 Then
                                                mDATE = DateValue("0" & Format(MM, "#0") & "/27/" + Format(YY, "###0"))
                                            Else
                                                mDATE = DateValue(Format(MM, "#0") & "/27/" + Format(YY, "###0"))
                                            End If

                                            mSTARTDAY = 0
                                            mMONTH = Month(mDATE)
                                            mMTHDAYS = 26
                                            Do While mMONTH = Month(mDATE)
                                                mDATE = DateAdd(DateInterval.Day, 1, mDATE)
                                                'mDATE = mDATE + 1
                                                mMTHDAYS = mMTHDAYS + 1
                                                If MTH = MTH1 Then
                                                    mSTARTDAY = mMTHDAYS
                                                End If
                                                mENDDAY = mMTHDAYS

                                                If mDATE >= DateValue((sDocDate)) Then
                                                    Exit Do
                                                End If
                                            Loop
                                            MTH = MTH + 1
                                            mPINTDAYS = mPINTDAYS + mMTHDAYS
                                            If mDATE >= DateValue((sDocDate)) Then
                                                Exit Do
                                            End If
                                        Loop
                                        mPINTDAYS = mDays
                                        If lRST.Rows(0).Item("Column_id") = 15 And ob.IfNullThen(lRST.Rows(0).Item("submit_doccument"), "N") = "Y" Then
                                            If mPERIOD > 5 Then
                                                mPINTBAL = ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) - ((ob.IfNullThen(lRST.Rows(0).Item("loan_amount"), 0) - ob.IfNullThen(lRST.Rows(0).Item("advance_installment"), 0)) - (mINSTMTH * mINSTALL))
                                                xPINTBAL = mPINTBAL
                                                If mPINTBAL > 0 Then
                                                    mRPANAMT = ob.RoundOff(((mPINTBAL * 2 / 100) * mPINTDAYS) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                                Else
                                                    mRPANAMT = 0
                                                End If
                                            End If
                                        Else
                                            If mPERIOD > 1 Then
                                                mPINTBAL = ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) - ((ob.IfNullThen(lRST.Rows(0).Item("loan_amount"), 0) - ob.IfNullThen(lRST.Rows(0).Item("advance_installment"), 0)) - (mINSTMTH * mINSTALL))
                                                xPINTBAL = mPINTBAL
                                                If mPINTBAL > 0 Then
                                                    mRPANAMT = ob.RoundOff(((mPINTBAL * 2 / 100) * mPINTDAYS) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                                Else
                                                    mPINTBAL = 0
                                                    mRPANAMT = 0
                                                End If
                                            End If
                                        End If
                                    Case Is < DateValue(sDocDate)
                                        If lRST.Rows(0).Item("due_date") >= mLRDate And lRST.Rows(0).Item("due_date") <= DateValue((sDocDate)) Then
                                            mDays = DateDiff(DateInterval.Day, mLRDate, CDate(lRST.Rows(0).Item("due_date")))
                                            mRINTAMT = ob.RoundOff(((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) * ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)) / 100 * mDays) / 365, 1, AdoFunc.RoundOffConstants.slNearest)

                                            '                                     *************** Panalty Interest @ Receipt
                                            '                                     ********** Total Installment Month
                                            MTH1 = Month(lRST.Rows(0).Item("doc_date")) + Year(lRST.Rows(0).Item("doc_date")) * 12
                                            MTH2 = Month(lRST.Rows(0).Item("due_date")) + Year(lRST.Rows(0).Item("due_date")) * 12

                                            mINSTMTH = 0
                                            MTH = MTH1
                                            Do While MTH <= MTH2
                                                MTH = MTH + 1
                                                mINSTMTH = mINSTMTH + 1
                                            Loop
                                            mINSTMTH = mINSTMTH - 1
                                            '                                    **********
                                            MTH1 = Month(mLRDate) + Year(mLRDate) * 12
                                            MTH2 = Month(lRST.Rows(0).Item("due_date")) + Year(lRST.Rows(0).Item("due_date")) * 12

                                            mPERIOD = 0
                                            MTH = MTH1

                                            mPINTDAYS = 0
                                            mSTARTDAY = 0
                                            mENDDAY = 0
                                            Do While MTH <= MTH2
                                                YY = Int(MTH / 12)
                                                MM = MTH - (YY * 12)
                                                If MM = 0 Then
                                                    YY = YY - 1
                                                    MM = 12
                                                End If
                                                If MM < 10 Then
                                                    mDATE = DateValue("0" & Format(MM, "#0") & "/27/" + Format(YY, "###0"))
                                                Else
                                                    mDATE = DateValue(Format(MM, "#0") & "/27/" + Format(YY, "###0"))
                                                End If

                                                mMONTH = Month(mDATE)
                                                mMTHDAYS = 26
                                                mSTARTDAY = 0
                                                Do While mMONTH = Month(mDATE)
                                                    mDATE = DateAdd(DateInterval.Day, 1, mDATE)
                                                    'mDATE = mDATE + 1
                                                    mMTHDAYS = mMTHDAYS + 1
                                                    If MTH = MTH1 Then
                                                        mSTARTDAY = mMTHDAYS
                                                    End If
                                                    mENDDAY = mMTHDAYS
                                                Loop
                                                MTH = MTH + 1
                                                mPERIOD = mPERIOD + 1
                                                mPINTDAYS = mPINTDAYS + mMTHDAYS
                                            Loop
                                            mPINTDAYS = mDays
                                            If lRST.Rows(0).Item("Column_id") = 15 And ob.IfNullThen(lRST.Rows(0).Item("submit_doccument"), "N") = "Y" Then
                                                If mPERIOD > 5 Then
                                                    mPINTBAL = ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) - ((ob.IfNullThen(lRST.Rows(0).Item("loan_amount"), 0) - ob.IfNullThen(lRST.Rows(0).Item("advance_installment"), 0)) - (mINSTMTH * mINSTALL))
                                                    xPINTBAL = mPINTBAL

                                                    mRPANAMT = ob.RoundOff(((mPINTBAL * 2 / 100) * mPINTDAYS) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                                End If
                                            Else
                                                If mPERIOD > 1 Then
                                                    mPINTBAL = ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) - ((ob.IfNullThen(lRST.Rows(0).Item("loan_amount"), 0) - ob.IfNullThen(lRST.Rows(0).Item("advance_installment"), 0)) - (mINSTMTH * mINSTALL))
                                                    xPINTBAL = mPINTBAL
                                                    mRPANAMT = ob.RoundOff(((mPINTBAL * 2 / 100) * mPINTDAYS) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                                End If
                                            End If
                                            mLRDate = lRST.Rows(0).Item("due_date")
                                        End If
                                        '                                  *************** Over Due Interest @ Receipt
                                        mDays = DateDiff(DateInterval.Day, mLRDate, CDate(sDocDate))
                                        '                                  mRODINTAMT = RoundOff(((lRST!balance_amount * lRST!Percentage) / 100 * mDays) / 365, 1, slNearest)
                                        mRODINTAMT = ob.RoundOff((((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) + ob.IfNullThen(lRST.Rows(0).Item("Over_Due_Interest_Balance"), 0) + ob.IfNullThen(lRST.Rows(0).Item("Over_Due_Penalty_Balance"), 0)) * ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)) / 100 * mDays) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                        '                                  *************** Over Due Panalty Interest @ Receipt
                                        MTH1 = Month(mLRDate) + Year(mLRDate) * 12
                                        MTH2 = Month(DateValue((sDocDate))) + Year(DateValue((sDocDate))) * 12

                                        mPERIOD = 0
                                        MTH = MTH1

                                        mPINTDAYS = 0
                                        mSTARTDAY = 0
                                        mENDDAY = 0

                                        Do While MTH <= MTH2
                                            YY = Int(MTH / 12)
                                            MM = MTH - (YY * 12)
                                            If MM = 0 Then
                                                YY = YY - 1
                                                MM = 12
                                            End If
                                            If MM < 10 Then
                                                mDATE = DateValue("0" & Format(MM, "#0") & "/27/" + Format(YY, "###0"))
                                            Else
                                                mDATE = DateValue(Format(MM, "#0") & "/27/" + Format(YY, "###0"))
                                            End If

                                            mMONTH = Month(mDATE)
                                            mMTHDAYS = 26
                                            mSTARTDAY = 0
                                            Do While mMONTH = Month(mDATE)
                                                mDATE = DateAdd(DateInterval.Day, 1, mDATE)
                                                'mDATE = mDATE + 1
                                                mMTHDAYS = mMTHDAYS + 1
                                                If MTH = MTH1 Then
                                                    mSTARTDAY = mMTHDAYS
                                                End If
                                                mENDDAY = mMTHDAYS
                                            Loop
                                            MTH = MTH + 1
                                            mPERIOD = mPERIOD + 1
                                            mPINTDAYS = mPINTDAYS + mMTHDAYS
                                        Loop
                                        mPINTDAYS = mDays
                                        If mPERIOD > 1 Then
                                            '                                     mRODPANAMT = RoundOff(((lRST!balance_amount * 2 / 100) * mPINTDAYS) / 365, 1, slNearest)
                                            mRODPANAMT = ob.RoundOff((((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) + ob.IfNullThen(lRST.Rows(0).Item("Over_Due_Interest_Balance"), 0) + ob.IfNullThen(lRST.Rows(0).Item("Over_Due_Penalty_Balance"), 0)) * 2 / 100) * mPINTDAYS) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                        End If
                                End Select
                                '       ****************** Gold Loan
                            Case 14
                                mINSTALL = (ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) - ob.IfNullThen(lRST.Rows(0).Item("advance_installment"), 0)) / ob.IfNullThen(lRST.Rows(0).Item("period"), 0)

                                mLRDate = Get_Last_Receipt_Date_New(iLoanNo, Format(CDate(lRST.Rows(0).Item("doc_date")), "dd/MM/yyyy"), Format(CDate(mToDate), "dd/MM/yyyy"))

                                Select Case lRST.Rows(0).Item("due_date")
                                    Case Is >= DateValue(sDocDate)
                                        '                                  *************** Interest @ Receipt
                                        mMDAYS = DateDiff(DateInterval.Day, CDate(sDocDate), CDate(lRST.Rows(0).Item("doc_date")))
                                        If Final Then
                                            If mMDAYS < 30 Then
                                                mRINTAMT = ob.RoundOff(((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) * ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)) / 100 * 30) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                            Else
                                                mDays = DateDiff(DateInterval.Day, mLRDate, (CDate(sDocDate)))
                                                mRINTAMT = ob.RoundOff(((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) * ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)) / 100 * mDays) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                            End If
                                        Else
                                            mDays = DateDiff(DateInterval.Day, mLRDate, CDate(sDocDate))
                                            mRINTAMT = ob.RoundOff(((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) * ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)) / 100 * mDays) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                        End If
                                    Case Is < DateValue(CDate(sDocDate))
                                        If lRST.Rows(0).Item("due_date") >= mLRDate And lRST.Rows(0).Item("due_date") <= DateValue(CDate(sDocDate)) Then
                                            mDays = DateDiff(DateInterval.Day, mLRDate, CDate(lRST.Rows(0).Item("due_date")))
                                            mRINTAMT = ob.RoundOff(((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) * ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)) / 100 * mDays) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                            mLRDate = lRST.Rows(0).Item("due_date")
                                        End If
                                        '                                  *************** Over Due Interest @ Receipt
                                        mDays = DateDiff(DateInterval.Day, mLRDate, CDate(sDocDate))
                                        mRODINTAMT = ob.RoundOff(((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) * ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)) / 100 * mDays) / 365, 1, AdoFunc.RoundOffConstants.slNearest)


                                        mRODPANAMT = ob.RoundOff(((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) * 2) / 100 * mDays) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                End Select
                                '****************** Taran  Loan
                            Case 13
                                '                      mINSTALL = (lrst!loan_amount - lrst!advance_installment) / lrst!period

                                mLRDate = Get_Last_Receipt_Date_New(iLoanNo, Format(CDate(lRST.Rows(0).Item("doc_date")), "dd/MM/yyyy"), Format(CDate(mToDate), "dd/MM/yyyy"))

                                '                      *************** Interest @ Receipt
                                mMDAYS = DateDiff(DateInterval.Day, CDate(lRST.Rows(0).Item("doc_date")), CDate(sDocDate))
                                If Final = vbBoolean Then
                                    If mMDAYS < 30 Then
                                        mRINTAMT = ob.RoundOff(((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) * ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)) / 100 * 30) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                    Else
                                        mDays = DateDiff(DateInterval.Day, mLRDate, CDate(sDocDate))
                                        mRINTAMT = ob.RoundOff(((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) * ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)) / 100 * mDays) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                    End If
                                Else
                                    mDays = DateDiff(DateInterval.Day, mLRDate, CDate(sDocDate))

                                    mRINTAMT = ob.RoundOff(((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) * ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)) / 100 * mDays) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                End If
                            Case 16
                                If ob.IfNullThen(lRST.Rows(0).Item("period"), 0) <> 0 Then
                                    mINSTALL = (ob.IfNullThen(lRST.Rows(0).Item("loan_amount"), 0) - ob.IfNullThen(lRST.Rows(0).Item("advance_installment"), 0)) / ob.IfNullThen(lRST.Rows(0).Item("period"), 0)
                                Else
                                    mINSTALL = 0
                                End If

                                mLRDate = Get_Last_Receipt_Date_New(iLoanNo, Format(CDate(lRST.Rows(0).Item("doc_date")), "dd/MM/yyyy"), Format(CDate(mToDate), "dd/MM/yyyy"))

                                '                      *************** Interest @ Receipt

                                mMDAYS = DateDiff(DateInterval.Day, CDate(lRST.Rows(0).Item("doc_date")), CDate(sDocDate))

                                mDays = DateDiff(DateInterval.Day, mLRDate, CDate(sDocDate))

                                mRINTAMT = ob.RoundOff(((ob.IfNullThen(lRST.Rows(0).Item("Balance_Amount"), 0) * ob.IfNullThen(lRST.Rows(0).Item("Percentage"), 0)) / 100 * mDays) / 365, 1, AdoFunc.RoundOffConstants.slNearest)
                                '******Cash Credit Dhiran
                            Case 17

                                mToDate = DateValue(CDate(sDocDate))
                                sSQL = "DELETE FROM CC_Ledger WHERE company_id = " & clsVariables.CompnyId & " and loan_no = " & iLoanNo
                                ob.Execute(sSQL, ob.getconnection(ob.Getconn))
                                'Opening
                                sSQL = "SELECT loan_opening,Over_Due_interest_Opening,Over_Due_Penalty_Opening FROM Loan_Opening_Balance WHERE company_id = " & clsVariables.CompnyId & " and loan_no = " & iLoanNo & " and Loan_Opening <> 0"
                                rdRST = ob.Returntable(sSQL, ob.getconnection(ob.Getconn))
                                If rdRST.Rows.Count > 0 Then
                                    sSQL = "INSERT INTO CC_Ledger VALUES(" & clsVariables.CompnyId & "," & iLoanNo & "," & aq(Format(CDate(gFinYearBegin), "MM/dd/yyyy")) & ",0,0"
                                    If ob.IfNullThen(rdRST.Rows(0).Item("Loan_Opening"), 0) > 0 Then
                                        sSQL = sSQL & "," & ob.IfNullThen(rdRST.Rows(0).Item("Loan_Opening"), 0) & ",0," & ob.IfNullThen(rdRST.Rows(0).Item("over_due_interest_opening"), 0) & "," & ob.IfNullThen(rdRST.Rows(0).Item("over_due_penalty_opening"), 0) & ",0,0,0,0,0,0,0,0,0,0,0,0)"
                                    Else
                                        sSQL = sSQL & ",0," & ob.IfNullThen(rdRST.Rows(0).Item("Loan_Opening"), 0) & ",0,0," & ob.IfNullThen(rdRST.Rows(0).Item("over_due_interest_opening"), 0) & "," & ob.IfNullThen(rdRST.Rows(0).Item("over_due_penalty_opening"), 0) & ",0,0,0,0,0,0,0,0,0,0)"
                                    End If
                                    ob.Execute(sSQL, ob.getconnection(ob.Getconn))
                                End If
                                rdRST.Clear()
                                'Payment
                                sSQL = "SELECT doc_no,doc_date,payment_amount,advance_installment FROM Payment_Data WHERE company_id = " & clsVariables.CompnyId & " and loan_no = " & iLoanNo & " and doc_date <= " & aq(sDocDate)
                                rdRST = ob.Returntable(sSQL, ob.getconnection(ob.Getconn))
                                If rdRST.Rows.Count > 0 Then
                                    Dim j As Integer
                                    j = 0
4:                                  Do While j < rdRST.Rows.Count
                                        sSQL = "INSERT INTO CC_Ledger VALUES(" & clsVariables.CompnyId & "," & iLoanNo & "," & aq(Format(CDate(rdRST.Rows(j).Item("doc_date")), "MM/dd/yyyy")) & ",0," & rdRST.Rows(j).Item("doc_no") & "," & ob.IfNullThen(rdRST.Rows(j).Item("payment_amount"), 0) & "-" & ob.IfNullThen(rdRST.Rows(j).Item("advance_installment"), 0) & ",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)"
                                        ob.Execute(sSQL, ob.getconnection(ob.Getconn))
                                        j = j + 1
                                    Loop
                                End If
                                rdRST.Clear()

                                'Receipt
                                sSQL = "SELECT doc_type,doc_no,column_id,doc_date,received_amount,received_interest,received_penalty,Actual_Interest FROM Receipt_Data WHERE company_id = " & clsVariables.CompnyId & " and loan_no = " & iLoanNo & " and doc_date <= " & aq(sDocDate)
                                rdRST = ob.Returntable(sSQL, ob.getconnection(ob.Getconn))
                                If rdRST.Rows.Count > 0 Then
                                    Dim j As Integer
                                    j = 0
                                    Do While j < rdRST.Rows.Count
                                        sSQL = "INSERT INTO CC_Ledger  VALUES(" & clsVariables.CompnyId & "," & iLoanNo & "," & aq(rdRST.Rows(j).Item("doc_date")) & "," & rdRST.Rows(j).Item("doc_type") & "," & rdRST.Rows(j).Item("doc_no") & ",0," & ob.IfNullThen(rdRST.Rows(j).Item("Received_Amount"), 0) & ",0"
                                        If rdRST.Rows(j).Item("Column_id") = 17 Then
                                            If ob.IfNullThen(rdRST.Rows(j).Item("Actual_Interest"), 0) < 0 Then
                                                '                                  sSQL = sSQL & "," & Abs(rdRST!Actual_Interest + rdRST!received_interest) & "," & rdRST!received_interest & ""
                                                sSQL = sSQL & ",0," & Abs(ob.IfNullThen(rdRST.Rows(j).Item("Actual_Interest"), 0)) & ""
                                            Else
                                                sSQL = sSQL & ",0," & ob.IfNullThen(rdRST.Rows(j).Item("received_interest"), 0) & ""
                                            End If
                                        Else
                                            sSQL = sSQL & ",0," & ob.IfNullThen(rdRST.Rows(j).Item("received_interest"), 0) & ""
                                        End If
                                        sSQL = sSQL & "," & ob.IfNullThen(rdRST.Rows(j).Item("received_penalty"), 0) & ",0,0,0,0,0,0,0,0,0,0)"
                                        ob.Execute(sSQL, ob.getconnection(ob.Getconn))
                                        j = j + 1
                                    Loop
                                End If
                                rdRST.Clear()

                                'Interest Data
                                sSQL = "SELECT year_id,Interest_date,Loan_No,(Interest_amount + penalty_amount) as interest,(over_due_interest+over_due_penalty) as penalty FROM Interest_Data WHERE company_id = " & clsVariables.CompnyId & " AND interest_date <= " & aq(sDocDate) & " and loan_no = " & iLoanNo & ""
                                sSQL = sSQL & " ORDER by loan_no,interest_date"
                                sRST = ob.Returntable(sSQL, ob.getconnection(ob.Getconn))
                                If sRST.Rows.Count > 0 Then
                                    Dim j As Integer
                                    j = 0
                                    Do While j < sRST.Rows.Count
                                        sSQL = "INSERT INTO CC_Ledger  VALUES(" & clsVariables.CompnyId & "," & iLoanNo & "," & aq(sRST.Rows(j).Item("interest_date")) & ",0,0," & ob.IfNullThen(sRST.Rows(j).Item("interest"), 0) + ob.IfNullThen(sRST.Rows(j).Item("penalty"), 0) & ",0,0,0," & ob.IfNullThen(sRST.Rows(j).Item("interest"), 0) + ob.IfNullThen(sRST.Rows(j).Item("penalty"), 0) & ",0,0,0,0,0,0,0,0,0,0,0)"
                                        ob.Execute(sSQL, ob.getconnection(ob.Getconn))
                                        j = j + 1
                                    Loop
                                End If
                                sRST.Clear()
                                Dim dRecBal, dPayBal, dRecProd, dPayProd, mPayInt, mRecInt, dPODPROD, dRODPROD, mRODINT, mPODINT, tRECINT, tPAYINT, tRODINT, tPODINT As Double

                                tRECINT = 0
                                tPAYINT = 0
                                tRODINT = 0
                                tPODINT = 0
                                'Calculate Interest
                                sSQL = "SELECT * FROM CC_Ledger WHERE company_id = " & clsVariables.CompnyId & " and loan_no = " & iLoanNo & " ORDER by DOC_DATE"
                                rdRST = ob.Returntable(sSQL, ob.getconnection(ob.Getconn))
                                If rdRST.Rows.Count > 0 Then
                                    Dim j As Integer
                                    j = 0
                                    Do While j < rdRST.Rows.Count
                                        dACCTCODE = rdRST.Rows(j).Item("Loan_No")
                                        dDate = rdRST.Rows(j).Item("doc_date")

                                        dRECAMT = 0
                                        dPAYAMT = 0
                                        dBAL = 0
                                        Do While j < rdRST.Rows.Count And rdRST.Rows(j).Item("Loan_No") = dACCTCODE
                                            lDocType = rdRST.Rows(j).Item("doc_type")
                                            lDocNo = rdRST.Rows(j).Item("doc_no")
                                            dRecBal = 0
                                            dPayBal = 0
                                            dRecProd = 0
                                            dPayProd = 0
                                            mPayInt = 0
                                            mRecInt = 0
                                            dPODPROD = 0
                                            dRODPROD = 0
                                            mRODINT = 0
                                            mPODINT = 0

                                            If rdRST.Rows(j).Item("doc_date") <> gFinYearBegin Then
                                                If Val(rdRST.Rows(j).Item("doc_type")) = 0 And Val(rdRST.Rows(j).Item("doc_no")) = 0 Then
                                                    dDays = DateDiff(DateInterval.Day, dDate, CDate(rdRST.Rows(j).Item("doc_date"))) + 1      ' DAYS = BETWEEN TO DAYS
                                                Else
                                                    dDays = DateDiff(DateInterval.Day, dDate, CDate(rdRST.Rows(j).Item("doc_date"))) '+ 1      ' DAYS = BETWEEN TO DAYS
                                                End If
                                            Else
                                                dDays = DateDiff(DateInterval.Day, dDate, CDate(rdRST.Rows(j).Item("doc_date"))) '+ 1      ' DAYS = BETWEEN TO DAYS
                                            End If
                                            dODDays = 0

                                            If dBAL < 0 Then
                                                dRecBal = Abs(dBAL)
                                                dRecProd = (dRecBal * dDays)
                                                dRODPROD = (dRecBal * dODDays)
                                                mRecInt = ob.RoundOff((mINT * dRecProd) / 36500, 1, AdoFunc.RoundOffConstants.slNearest)
                                            Else
                                                dPayBal = Abs(dBAL)
                                                dPayProd = (dPayBal * dDays)
                                                dPODPROD = (dPayBal * dODDays)

                                                mPayInt = ob.RoundOff((mINT * dPayProd) / 36500, 1, AdoFunc.RoundOffConstants.slNearest)
                                            End If
                                            sSQL = "UPDATE CC_Ledger SET DAYS = " & dDays & ",rec_bal =  " & dRecBal & ",pay_bal = " & dPayBal & ",rec_prod = " & dRecProd & ",PAY_PROD = " & dPayProd & ",PAY_INT = PAY_INT + " & mPayInt & ",REC_INT = REC_INT + " & mRecInt & " WHERE company_id = " & clsVariables.CompnyId & " and loan_no = " & iLoanNo & " and doc_type = " & lDocType & " and doc_no = " & lDocNo
                                            ob.Execute(sSQL, ob.getconnection(ob.Getconn))

                                            'dDate = rdRST!Doc_Date                 '// AGAIN FOR NEXT CALUCATION
                                            If rdRST.Rows(j).Item("doc_date") <> gFinYearBegin Then
                                                If rdRST.Rows(j).Item("doc_type") = 0 And rdRST.Rows(j).Item("doc_no") = 0 Then
                                                    dDate = DateAdd(DateInterval.Day, 1, CDate(rdRST.Rows(j).Item("doc_date")))      ' DAYS = BETWEEN TO DAYS
                                                Else
                                                    dDate = rdRST.Rows(j).Item("doc_date")          ' DAYS = BETWEEN TO DAYS
                                                End If
                                            Else
                                                dDays = rdRST.Rows(j).Item("doc_date")                      '// AGAIN FOR NEXT CALUCATION
                                            End If

                                            dRECAMT = dRECAMT + ob.IfNullThen(rdRST.Rows(j).Item("rec_amt"), 0)
                                            dPAYAMT = dPAYAMT + ob.IfNullThen(rdRST.Rows(j).Item("pay_amt"), 0)
                                            dBAL = dPAYAMT - dRECAMT
                                            '                               tRECINT = tRECINT + mRecInt
                                            tRECINT = tRECINT + mRecInt + ob.IfNullThen(rdRST.Rows(j).Item("rec_int"), 0)
                                            tPAYINT = tPAYINT + mPayInt
                                            tRODINT = tRODINT + mRODINT
                                            tPODINT = tPODINT + mPODINT

                                            j = j + 1
                                            If j = rdRST.Rows.Count Then
                                                Exit Do
                                            End If
                                        Loop

                                        dDays = DateDiff(DateInterval.Day, dDate, mToDate) '+ 1

                                        mPayInt = 0
                                        mRecInt = 0

                                        If dBAL < 0 Then
                                            dRecBal = Abs(dBAL)
                                            dRecProd = (dRecBal * dDays)
                                            dRODPROD = (dRecBal * dODDays)

                                            mRecInt = ob.RoundOff((mINT * dRecProd) / 36500, 1, AdoFunc.RoundOffConstants.slNearest)
                                        Else
                                            dPayBal = Abs(dBAL)
                                            dPayProd = (dPayBal * dDays)
                                            dPODPROD = (dPayBal * dODDays)

                                            mPayInt = ob.RoundOff((mINT * dPayProd) / 36500, 1, AdoFunc.RoundOffConstants.slNearest)
                                        End If
                                        tRECINT = tRECINT + mRecInt
                                        tPAYINT = tPAYINT + mPayInt
                                        tRODINT = tRODINT + mRODINT
                                        tPODINT = tPODINT + mPODINT

                                        'Editing to be continued from here Later

                                        sSQL = "INSERT INTO CC_Ledger  VALUES(" & clsVariables.CompnyId & "," & iLoanNo & "," & aq(Format(CDate(mToDate), "MM/dd/yyyy")) & ",9,9999,0,0," & mPayInt & ",0,0,0,0," & dRecBal & "," & dPayBal & "," & dRecProd & "," & dPayProd & ",0,0," & dDays & ",0,0)"
                                        ob.Execute(sSQL, ob.getconnection(ob.Getconn))

                                        If j = rdRST.Rows.Count Then
                                            Exit Do
                                        End If
                                    Loop
                                End If
                                rdRST.Clear()
                                mBALINT = tPAYINT - tRECINT
                                mBALODINT = tPODINT - tRODINT
                                tINT = tINT + mBALINT
                                tODINT = tODINT + mBALODINT
                                mRINTAMT = Round(tINT, 0)
                                mRPANAMT = Round(tODINT, 0)
                        End Select
                    End If
                End If
                mODINTBAL = ob.IfNullThen(lRST.Rows(0).Item("Over_Due_Interest_Balance"), 0)
                mODPANBAL = ob.IfNullThen(lRST.Rows(0).Item("Over_Due_Penalty_Balance"), 0)
                tmpLRDate = Get_Last_Receipt_Date_New(iLoanNo, Format(CDate(lRST.Rows(0).Item("doc_date")), "dd/MM/yyyy"), Format(CDate(mToDate), "dd/MM/yyyy"))
                MTH1 = Month(tmpLRDate) + Year(tmpLRDate) * 12
                MTH2 = Month(DateValue((sDocDate))) + Year(DateValue((sDocDate))) * 12
                If MTH2 - MTH1 >= 6 Then
                    mRODINTAMT = mRODINTAMT + mRINTAMT
                    mRODPANAMT = mRODPANAMT + mRPANAMT
                    mRINTAMT = 0
                    mRPANAMT = 0
                End If
            End If
            lRST.Clear()


            Select Case iLoanNo
                Case 800122
                    mRODINTAMT = mRODINTAMT + mRINTAMT
                    mRODPANAMT = mRODPANAMT + mRPANAMT
                    mRINTAMT = 0
                    mRPANAMT = 0
                Case 106486, 106553, 106554, 106556, 106557, 106558, 106559, 106560, 106561, 106564, 106566, 106567, 106568, 106569, 106570, 106572, 106573, 106574, 106575, 106576, 106577, 106578, 106579, 106580, 106581, 106582, 106583, 106584, 106585, 106586, 106587, 106593, 106775
                    If DateValue(CDate(sDocDate)) = DateValue("03/31/2010") Then
                        mRODINTAMT = mRODINTAMT + mRINTAMT
                        mRODPANAMT = mRODPANAMT + mRPANAMT
                        mRINTAMT = 0
                        mRPANAMT = 0
                    End If
            End Select
            mDuePeriod = mPERIOD
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Function checkTransfer(ByVal compid As Integer, ByVal wyear As String, ByVal docnno As Long, ByVal cn As SqlConnection) As Boolean
        Try
            Dim sql As String
            If cn.State = ConnectionState.Closed Then
                cn.Open()
            End If
            sql = "SELECT COUNT(*) AS C"
            sql = sql & " FROM TRANSFER_DETAIL t INNER JOIN"
            sql = sql & " Issue_Detail i  ON T.Company_Id = I.Company_Id AND T.from_Member_Id = I.Member_Id AND "
            sql = sql & " T.Certi_No = I.Certi_No"
            sql = sql & " where i.Company_Id=" & Val(compid)
            sql = sql & " and i.Year_Id=" & aq(wyear)
            sql = sql & " and i.Doc_no=" & Val(docnno)
            If ob.FindOneinteger(sql, cn) > 0 Then
                checkTransfer = True
            Else
                checkTransfer = False
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function checkReceipt(ByVal compid As Integer, ByVal wyear As String, ByVal docnno As Long, ByVal cn As SqlConnection) As Boolean
        Try
            Dim sql As String
            If cn.State = ConnectionState.Closed Then
                cn.Open()
            End If
            sql = "SELECT COUNT(*) AS C"
            sql = sql & " FROM Receipt_DETAIL t INNER JOIN"
            sql = sql & " Issue_Detail i  ON T.Company_Id = I.Company_Id AND T.Member_Id = I.Member_Id AND "
            sql = sql & " T.Certi_No = I.Certi_No"
            sql = sql & " where i.Company_Id=" & Val(compid)
            sql = sql & " and i.Year_Id=" & aq(wyear)
            sql = sql & " and i.Doc_no=" & Val(docnno)
            If ob.FindOneinteger(sql, cn) > 0 Then
                checkReceipt = True
            Else
                checkReceipt = False
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Sub Modifyrpt(ByVal rptname As String)
        Try
            If FileIO.FileSystem.FileExists(RptApp) = True Then
                If FileIO.FileSystem.FileExists(rptname) = True Then
                    Shell(RptApp & " " & rptname)
                End If
            End If
        Catch ex As Exception

        End Try
    End Sub
    Public Sub SqlBalance_Confirmation_Data(ByVal cn As SqlConnection, Optional ByVal Tblname As String = "Balance_Confirmation_Data")
        Try
            Dim tbl As String
            Dim sql As String
            tbl = Tblname
            If Len(tbl) = 0 Then
                tbl = "Balance_Confirmation_Data"
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & " (" & vbCrLf
            sql = sql & " Company_id int ," & vbCrLf
            sql = sql & " Letter_Date Datetime," & vbCrLf
            sql = sql & " As_On_Date datetime," & vbCrLf
            sql = sql & " Loan_No Bigint," & vbCrLf
            sql = sql & " member_Id Bigint," & vbCrLf
            sql = sql & " Column_Id Int," & vbCrLf
            sql = sql & " Balance_Amount Float," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Letter_Date,As_On_Date,Loan_no)" & vbCrLf
            sql = sql & ")" & vbCrLf
            ob.Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Sub SqlFund_Account_balance(ByVal cn As SqlConnection, Optional ByVal Tblname As String = "Fund_Account_balance")
        Try
            Dim tbl As String
            Dim sql As String
            tbl = Tblname
            If Len(tbl) = 0 Then
                tbl = "Fund_Account_balance"
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & " (" & vbCrLf
            sql = sql & " Company_id int ," & vbCrLf
            sql = sql & " Account_id Bigint," & vbCrLf
            sql = sql & " Opening_balance Float default 0," & vbCrLf
            sql = sql & " Credit_Amount Float default 0," & vbCrLf
            sql = sql & " Debit_Amount Float default 0," & vbCrLf
            sql = sql & " Balance_Amount Float default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Account_id)"
            sql = sql & ")" & vbCrLf
            ob.Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Sub SqlFund_tarij_Report(ByVal cn As SqlConnection, Optional ByVal Tblname As String = "Fund_Tarij_Report")
        Try
            Dim tbl As String
            Dim sql As String
            tbl = Tblname
            If Len(tbl) = 0 Then
                tbl = "Fund_tarij_report"
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & " (" & vbCrLf
            sql = sql & " Company_id int ," & vbCrLf
            sql = sql & " Account_id Bigint," & vbCrLf
            sql = sql & " Opening_balance Float default 0," & vbCrLf
            sql = sql & " Credit_Amount Float default 0," & vbCrLf
            sql = sql & " Debit_Amount Float default 0," & vbCrLf
            sql = sql & " Balance_Amount Float default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Account_id)"
            sql = sql & ")" & vbCrLf
            ob.Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Sub SqlFinal_tarij_Report(ByVal cn As SqlConnection, Optional ByVal Tblname As String = "Final_Tarij_Report")
        Try
            Dim tbl As String
            Dim sql As String
            tbl = Tblname
            If Len(tbl) = 0 Then
                tbl = "Final_tarij_report"
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & " (" & vbCrLf
            sql = sql & " Company_id int ," & vbCrLf
            sql = sql & " Account_id Bigint," & vbCrLf
            sql = sql & " Opening_balance Float default 0," & vbCrLf
            sql = sql & " Credit_Amount Float default 0," & vbCrLf
            sql = sql & " Debit_Amount Float default 0," & vbCrLf
            sql = sql & " Balance_Amount Float default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)default ''" & vbCrLf
            sql = sql & ")" & vbCrLf
            ob.Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Sub SqlFund_Party_balance(ByVal cn As SqlConnection, Optional ByVal Tblname As String = "Fund_Party_balance")
        Try
            Dim tbl As String
            Dim sql As String
            tbl = Tblname
            If Len(tbl) = 0 Then
                tbl = "Fund_Party_balance"
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & " (" & vbCrLf
            sql = sql & " Company_id int ," & vbCrLf
            sql = sql & " Account_id Bigint," & vbCrLf
            sql = sql & " Party_id Bigint," & vbCrLf
            sql = sql & " Opening_balance Float default 0," & vbCrLf
            sql = sql & " Credit_Amount Float default 0," & vbCrLf
            sql = sql & " Debit_Amount Float default 0," & vbCrLf
            sql = sql & " Balance_Amount Float default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Account_id,Party_Id)"
            sql = sql & ")" & vbCrLf
            ob.Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Sub SqlFund_Party_balance_Report(ByVal cn As SqlConnection, Optional ByVal Tblname As String = "Fund_Party_balance_Report")
        Try
            Dim tbl As String
            Dim sql As String
            tbl = Tblname
            If Len(tbl) = 0 Then
                tbl = "Fund_Party_balance_Report"
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & " (" & vbCrLf
            sql = sql & " Company_id int ," & vbCrLf
            sql = sql & " Account_id Bigint," & vbCrLf
            sql = sql & " Party_id Bigint," & vbCrLf
            sql = sql & " Opening_Amount Float default 0," & vbCrLf
            sql = sql & " Credit_Amount Float default 0," & vbCrLf
            sql = sql & " Debit_Amount Float default 0," & vbCrLf
            sql = sql & " Balance_Amount Float default 0" & vbCrLf
            sql = sql & ")" & vbCrLf
            ob.Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Sub SqlFinal_Party_balance_Report(ByVal cn As SqlConnection, Optional ByVal Tblname As String = "Final_Party_balance_Report")
        Try
            Dim tbl As String
            Dim sql As String
            tbl = Tblname
            If Len(tbl) = 0 Then
                tbl = "Final_Party_balance_Report"
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & " (" & vbCrLf
            sql = sql & " Company_id int ," & vbCrLf
            sql = sql & " Account_id Bigint," & vbCrLf
            sql = sql & " Party_id Bigint," & vbCrLf
            sql = sql & " Opening_Amount Float default 0," & vbCrLf
            sql = sql & " Credit_Amount Float default 0," & vbCrLf
            sql = sql & " Debit_Amount Float default 0," & vbCrLf
            sql = sql & " Balance_Amount Float default 0" & vbCrLf
            sql = sql & ")" & vbCrLf
            ob.Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Sub SqlAccountLedger(ByVal cn As SqlConnection, Optional ByVal Tblname As String = "Member_Ledger")
        Try
            Dim tbl As String
            Dim sql As String
            tbl = Tblname
            If Len(tbl) = 0 Then
                tbl = "Member_Ledger"
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & " (" & vbCrLf
            sql = sql & " Company_id int ," & vbCrLf
            sql = sql & " Sr_no int," & vbCrLf
            sql = sql & " member_Id Bigint," & vbCrLf
            sql = sql & " Certi_no bigInt," & vbCrLf
            sql = sql & " Doc_Date datetime," & vbCrLf
            sql = sql & " Doc_No int," & vbCrLf
            sql = sql & " Tharav_Date datetime," & vbCrLf
            sql = sql & " Tharav_no nvarchar(20)," & vbCrLf
            sql = sql & " Share_from bigint," & vbCrLf
            sql = sql & " Share_To bigint," & vbCrLf
            sql = sql & " Qty Float," & vbCrLf
            sql = sql & " Rate Float," & vbCrLf
            sql = sql & " Amount Float," & vbCrLf
            sql = sql & " Application_Date datetime ," & vbCrLf
            sql = sql & " nominee nvarchar(500)," & vbCrLf
            sql = sql & " Remark nvarchar(500)," & vbCrLf
            sql = sql & " Doc_Type nvarchar(500)" & vbCrLf
            sql = sql & ")" & vbCrLf
            ob.Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Sub SqlJoint_Trial_Balance(ByVal cn As SqlConnection, Optional ByVal Tblname As String = "Joint_Trial_Balance")
        Try
            Dim tbl As String
            Dim sql As String
            tbl = Tblname
            If Len(tbl) = 0 Then
                tbl = "Joint_Trial_Balance"
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & " (" & vbCrLf
            sql = sql & " Company_id int ," & vbCrLf
            sql = sql & " Account_id Bigint," & vbCrLf
            sql = sql & " Bhandar_Id bigInt," & vbCrLf
            sql = sql & " Bhandar_Cr Float default 0," & vbCrLf
            sql = sql & " Bhandar_Dr Float default 0," & vbCrLf
            sql = sql & " HO_Cr Float default 0," & vbCrLf
            sql = sql & " HO_Dr Float default 0 " & vbCrLf
            sql = sql & ")" & vbCrLf
            ob.Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Sub SqlFund_Account_Ledger(ByVal cn As SqlConnection, Optional ByVal Tblname As String = "Fund_Account_Ledger")
        Try
            Dim tbl As String
            Dim sql As String
            tbl = Tblname
            If Len(tbl) = 0 Then
                tbl = "Fund_Account_Ledger"
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & " (" & vbCrLf
            sql = sql & " Company_id int ," & vbCrLf
            sql = sql & " Account_id Bigint," & vbCrLf
            sql = sql & " Book_id Int," & vbCrLf
            sql = sql & " Doc_Date datetime," & vbCrLf
            sql = sql & " Doc_type int," & vbCrLf
            sql = sql & " Doc_No int," & vbCrLf
            sql = sql & " Sr_no int," & vbCrLf
            sql = sql & " Party_id Bigint," & vbCrLf
            sql = sql & " Remarks Nvarchar(4000)default ''," & vbCrLf
            sql = sql & " Credit_Amt Float default 0," & vbCrLf
            sql = sql & " Debit_amt Float default 0" & vbCrLf
            sql = sql & ")" & vbCrLf
            ob.Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Sub SqlFinal_Account_Ledger(ByVal cn As SqlConnection, Optional ByVal Tblname As String = "Final_Account_Ledger")
        Try
            Dim tbl As String
            Dim sql As String
            tbl = Tblname
            If Len(tbl) = 0 Then
                tbl = "Final_Account_Ledger"
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & " (" & vbCrLf
            sql = sql & " Company_id int ," & vbCrLf
            sql = sql & " Account_id Bigint," & vbCrLf
            sql = sql & " Book_id Int," & vbCrLf
            sql = sql & " Doc_Date datetime," & vbCrLf
            sql = sql & " Doc_type int," & vbCrLf
            sql = sql & " Doc_No int," & vbCrLf
            sql = sql & " Sr_no int," & vbCrLf
            sql = sql & " Party_id Bigint," & vbCrLf
            sql = sql & " Remarks Nvarchar(4000)default ''," & vbCrLf
            sql = sql & " Credit_Amt Float default 0," & vbCrLf
            sql = sql & " Debit_amt Float default 0" & vbCrLf
            sql = sql & ")" & vbCrLf
            ob.Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Sub SqlFinal_Account_Ledger_Int(ByVal cn As SqlConnection, Optional ByVal Tblname As String = "Final_Account_Ledger_Int")
        Try
            Dim tbl As String
            Dim sql As String
            tbl = Tblname
            If Len(tbl) = 0 Then
                tbl = "Final_Account_Ledger_Int"
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & " (" & vbCrLf
            sql = sql & " Company_id int ," & vbCrLf
            sql = sql & " Account_id Bigint," & vbCrLf
            sql = sql & " Column_id Int," & vbCrLf
            sql = sql & " Doc_Date datetime," & vbCrLf
            sql = sql & " Doc_type int," & vbCrLf
            sql = sql & " Doc_No int," & vbCrLf
            sql = sql & " Remarks Nvarchar(4000)default ''," & vbCrLf
            sql = sql & " Credit_Amt Float default 0," & vbCrLf
            sql = sql & " Debit_amt Float default 0," & vbCrLf
            sql = sql & " Rec_Int Float default 0," & vbCrLf
            sql = sql & " Pay_Int Float default 0," & vbCrLf
            sql = sql & " Days int default 0" & vbCrLf
            sql = sql & ")" & vbCrLf
            ob.Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Sub SqlFinal_Interest_data(ByVal cn As SqlConnection, Optional ByVal Tblname As String = "Final_Interest_data")
        Try
            Dim tbl As String
            Dim sql As String
            tbl = Tblname
            If Len(tbl) = 0 Then
                tbl = "Final_Interest_data"
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & " (" & vbCrLf
            sql = sql & " Company_id int ," & vbCrLf
            sql = sql & " Doc_Date datetime," & vbCrLf
            sql = sql & " Account_id Bigint," & vbCrLf
            sql = sql & " Column_id Int," & vbCrLf
            sql = sql & " Doc_type int," & vbCrLf
            sql = sql & " Doc_No int," & vbCrLf
            sql = sql & " pay_amt Float default 0," & vbCrLf
            sql = sql & " rec_amt Float default 0," & vbCrLf
            sql = sql & " Pay_Int Float default 0," & vbCrLf
            sql = sql & " Rec_Int Float default 0," & vbCrLf
            sql = sql & " rec_bal Float default 0," & vbCrLf
            sql = sql & " pay_bal Float default 0," & vbCrLf
            sql = sql & " rec_prod Float default 0," & vbCrLf
            sql = sql & " pay_prod Float default 0," & vbCrLf
            sql = sql & " Days int default 0" & vbCrLf
            sql = sql & ")" & vbCrLf
            ob.Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Sub SqlBank_Summary(ByVal cn As SqlConnection, Optional ByVal Tblname As String = "Bank_Summary")
        Try
            Dim tbl As String
            Dim sql As String
            tbl = Tblname
            If Len(tbl) = 0 Then
                tbl = "Bank_Summary"
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & " (" & vbCrLf
            sql = sql & " Company_id int ," & vbCrLf
            sql = sql & " Account_id Bigint," & vbCrLf
            sql = sql & " Open_Amt Float Default 0," & vbCrLf
            sql = sql & " Credit_Amt Float default 0," & vbCrLf
            sql = sql & " Debit_amt Float default 0" & vbCrLf
            sql = sql & ")" & vbCrLf
            ob.Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Sub SqlFund_Party_Ledger(ByVal cn As SqlConnection, Optional ByVal Tblname As String = "Fund_Party_Ledger")
        Try
            Dim tbl As String
            Dim sql As String
            tbl = Tblname
            If Len(tbl) = 0 Then
                tbl = "Fund_Party_Ledger"
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & " (" & vbCrLf
            sql = sql & " Company_id int ," & vbCrLf
            sql = sql & " Account_id Bigint," & vbCrLf
            sql = sql & " Book_id Int," & vbCrLf
            sql = sql & " Doc_Date datetime," & vbCrLf
            sql = sql & " Doc_type int," & vbCrLf
            sql = sql & " Doc_No int," & vbCrLf
            sql = sql & " Sr_no int," & vbCrLf
            sql = sql & " Party_id Bigint," & vbCrLf
            sql = sql & " Remarks Nvarchar(4000)default ''," & vbCrLf
            sql = sql & " Credit_Amt Float default 0," & vbCrLf
            sql = sql & " Debit_amt Float default 0," & vbCrLf
            sql = sql & " Bill_No Nvarchar(50)default ''," & vbCrLf
            sql = sql & " Bill_Date Datetime" & vbCrLf
            sql = sql & ")" & vbCrLf
            ob.Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Sub SqlFinal_Party_Ledger(ByVal cn As SqlConnection, Optional ByVal Tblname As String = "Final_Party_Ledger")
        Try
            Dim tbl As String
            Dim sql As String
            tbl = Tblname
            If Len(tbl) = 0 Then
                tbl = "Final_Party_Ledger"
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & " (" & vbCrLf
            sql = sql & " Company_id int ," & vbCrLf
            sql = sql & " Account_id Bigint," & vbCrLf
            sql = sql & " Book_id Int," & vbCrLf
            sql = sql & " Doc_Date datetime," & vbCrLf
            sql = sql & " Doc_type int," & vbCrLf
            sql = sql & " Doc_No int," & vbCrLf
            sql = sql & " Sr_no int," & vbCrLf
            sql = sql & " Party_id Bigint," & vbCrLf
            sql = sql & " Remarks Nvarchar(4000)default ''," & vbCrLf
            sql = sql & " Credit_Amt Float default 0," & vbCrLf
            sql = sql & " Debit_amt Float default 0," & vbCrLf
            sql = sql & " Bill_No Nvarchar(50)default ''," & vbCrLf
            sql = sql & " Bill_Date Datetime" & vbCrLf
            sql = sql & ")" & vbCrLf
            ob.Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Sub SqlMember_Data(ByVal cn As SqlConnection, Optional ByVal Tblname As String = "Member_Data")
        Try
            Dim tbl As String
            Dim sql As String
            tbl = Tblname
            If Len(tbl) = 0 Then
                tbl = "Member_Data"
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & " (" & vbCrLf
            sql = sql & " Company_id int ," & vbCrLf
            sql = sql & " member_Id Bigint," & vbCrLf
            sql = sql & " Certi_no bigInt," & vbCrLf
            sql = sql & " Open_qnty Float," & vbCrLf
            sql = sql & " Open_Amt Float," & vbCrLf
            sql = sql & " Issue_Qnty Float," & vbCrLf
            sql = sql & " Issue_Amt Float," & vbCrLf
            sql = sql & " Receipt_Qnty Float," & vbCrLf
            sql = sql & " Receipt_Amt Float," & vbCrLf
            sql = sql & " Balance_Qnty Float," & vbCrLf
            sql = sql & " Balance_Amt Float," & vbCrLf
            sql = sql & " Memb_Date Datetime"
            sql = sql & " Primary Key (Company_Id,member_Id,Certi_no)" & vbCrLf
            sql = sql & ")" & vbCrLf
            ob.Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Sub CreateDSN(ByVal sDSN As String, ByVal sDatabase As String)
        Try
            Dim iReturn As Integer
            Dim Attr As String
            Dim machName As String = Trim(servername)          'Server Name.
            Dim catelog As String = Trim(sDSN)

            Attr = "SERVER=" & machName & "" & Chr(0)
            Attr = Attr & "DSN=" & catelog & Chr(0)
            Attr = Attr & "DESCRIPTION=DSN For " & sDatabase & Chr(0)
            Attr = Attr & "DATABASE=" & dbname & Chr(0)
            If DbAuth = "WIN" Then
                Attr = Attr & "TRUSTED_CONNECTION=YES" & Chr(0)
            Else
                Attr = Attr & "TRUSTED_CONNECTION=No" & Chr(0)
            End If

            iReturn = SQLConfigDataSource(0, 1, "SQL Server", Attr)
            If iReturn Then
                'MsgBox("DSN setup complete successfully.", MsgBoxStyle.OkOnly + MsgBoxStyle.Information)
            Else
                'MsgBox("DSN setup can not complete successfully.")
            End If
            Exit Sub

        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try



    End Sub
    Public Sub DeleteDsn(ByVal dsn As String)
        Try
            Dim nret As Long
            Dim Sdriver As String
            Dim SAttribute As String
            Sdriver = "SQL SERVER"
            SAttribute = "DSN=" & dsn & Chr(0)
            nret = SQLConfigDataSource(VBAPINULL, ODBC_Remove_Dsn, Sdriver, SAttribute)
            nret = SQLConfigDataSource(VBAPINULL, ODBC_ADD_Dsn, Sdriver, SAttribute)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Function ChartoAsc(ByVal f_Text As String) As String
        Dim mAsc_str As String
        Dim I As Integer

        If IsNumeric(f_Text) Then Str(f_Text)

        mAsc_str = ""

        For I = 1 To Len(f_Text)

            mAsc_str = mAsc_str + Chr(Asc(Mid(f_Text, I, 1)) + (90 + I * 2))
        Next
        ChartoAsc = mAsc_str
    End Function
    Public Function AsctoChar(ByVal f_Text As String) As String
        Dim stry As String = ""
        Try

            Dim mChar_str As String
            Dim I As Integer


            If IsDBNull(f_Text) Then
                AsctoChar = ""
                Exit Function
            End If

            mChar_str = ""
            For I = 1 To Len(f_Text)
                mChar_str = mChar_str + Chr(Asc(Mid(f_Text, I, 1)) - (90 + I * 2))
            Next
            AsctoChar = mChar_str
            stry = mChar_str
            Exit Function
        Catch ex As Exception

        End Try
        Return stry
    End Function
    Public Function IfNullThen(ByVal f_Value As Object, ByVal f_RetValue As Object) As Object
        Dim mRetVal As Object = ""
        Try
            If IsDBNull(f_Value) Then
                mRetVal = f_RetValue
            Else
                mRetVal = f_Value
            End If
        Catch ex As Exception
            MsgBox("Error : " + ex.Message.ToString, MsgBoxStyle.Exclamation, "System")
        End Try
        IfNullThen = mRetVal
    End Function
    Public Function checkdigit(ByVal str As String) As Boolean
        Dim isd As Boolean
        Dim i As Integer
        For i = 1 To Len(str)
            Dim s As String
            s = Asc(Mid(str, i, 1))
            If (Asc(Mid(str, i, 1)) >= 97 And Asc(Mid(str, i, 1)) <= 122) Or (Asc(Mid(str, i, 1)) >= 65 And Asc(Mid(str, i, 1)) <= 90) Then
                isd = True
                GoTo P
            Else


            End If
        Next
P:
        Return isd
    End Function
    Public Function Execute(ByVal str As String, ByVal cn As SqlConnection) As Boolean
        Dim sd As Boolean
        Try
            If cn.State = ConnectionState.Closed Then
                cn.Open()
            End If
            Dim cmd As New SqlCommand
            cmd.CommandText = str
            cmd.Connection = cn
            cmd.ExecuteNonQuery()
            sd = True
            If cn.State = ConnectionState.Open Then
                cn.Close()
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return sd
    End Function
    Public Function checkdate(ByVal str As String) As Boolean
        Try
            If str = "  /  /" Or str = "  -  -" Or str = "  ,  ," Then
                checkdate = True
            Else
                checkdate = False
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    
    Public Function checkTime(ByVal str As String) As Boolean
        Try
            If str = "  :" Then
                checkTime = True
            Else
                checkTime = False
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function checkMonthYear(ByVal str As String) As Boolean
        Try
            If str = "  /" Or str = "  -" Or str = "  ," Then
                checkMonthYear = True
            Else
                checkMonthYear = False
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function TotalDays(ByVal month As String, ByVal year As String) As Integer
        Try
            Select Case month
                Case 2
                    If (year Mod 4 = 0 And year Mod 100 <> 0) Or year Mod 400 = 0 Then
                        TotalDays = 29
                    Else
                        TotalDays = 28
                    End If
                Case 1, 3, 5, 7, 8, 10, 12
                    TotalDays = 31
                Case 4, 6, 9, 11
                    TotalDays = 30
            End Select

        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function validdate(ByVal sender As Object, ByVal dat As String, Optional ByVal chkdaterange As Boolean = False) As Boolean
        Dim valid As Boolean = True
        Try
            Dim dt As Date
            If Date.TryParseExact(sender.text.ToString, "dd/MM/yyyy", System.Globalization.CultureInfo.CurrentCulture, Globalization.DateTimeStyles.None, dt) = False Then
                valid = False
                MsgBox("Invalid Date", MsgBoxStyle.Critical, Application.ProductName)
                sender.focus()
            Else
                If chkdaterange = True Then
                    Dim drt As Date = dat
                    If drt >= gFinYearBegin And drt <= gFinYearEnd Then

                    Else
                        MsgBox("Date Falls Out Side Current Financial Year ", MsgBoxStyle.Critical, Application.ProductName)
                        sender.focus()
                    End If
                End If
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return valid
    End Function
    Public Function validMonthYear(ByVal sender As Object, ByVal dat As String) As Boolean
        Dim valid As Boolean = True
        Try
            Dim dt As Date
            If Date.TryParseExact(sender.text.ToString, "MM/yyyy", System.Globalization.CultureInfo.CurrentCulture, Globalization.DateTimeStyles.None, dt) = False Then
                valid = False
                MsgBox("Invalid Month Year", MsgBoxStyle.Critical, Application.ProductName)
                sender.focus()
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return valid
    End Function
    Public Function returncombo(ByVal sender As Object, ByVal sql As String, ByVal cn As SqlConnection) As ComboBox
        Dim combo As New ComboBox
        combo = sender
        Dim str As String
        str = sender.text
        Dim dt As New DataTable
        combo.Items.Clear()
        dt = ob.Returntable(sql, ob.getconnection())
        If dt.Rows.Count > 0 Then
            Dim i As Integer
            For i = 0 To dt.Rows.Count - 1
                combo.Items.Add(dt.Rows(i).Item(0).ToString)
            Next
        End If

        If combo.Items.Count > 0 Then
            If Len(str) = 0 Then
                combo.SelectedIndex = 0
            Else
                combo.ValueMember = str
            End If


        End If
        Return combo
    End Function
    Public Function readini(ByVal filename As String, ByVal checkvar As String) As String
        readini = ""
        Dim sql As String = ""
        'Dim free_area As Integer
        If FileIO.FileSystem.FileExists(filename) = True Then
            FileOpen(1, filename, OpenMode.Input, OpenAccess.Read, OpenShare.Default)
            Do While Not EOF(1)
                Input(1, sql)
                Dim ss As String
                ss = sql
                ss = Len(Trim(LTrim(RTrim(LCase(Mid(sql, 1, InStr(sql, "=", CompareMethod.Text) - 1))))))
                If Trim(LTrim(RTrim(LCase(Mid(sql, 1, InStr(sql, "=", CompareMethod.Text) - 1))))) = LCase(checkvar) Then
                    readini = Trim(Mid(sql, Val(ss) + 2, Len(sql)))
                    FileClose(1)
                    GoTo p
                Else
                    readini = ""
                End If

            Loop
            FileClose(1)
        End If
p:
        Return readini
    End Function
    Public Function Getconn() As String
        Dim sql As String = ""
        Try
            If DbAuth = "WIN" Then
                sql = "Integrated Security=True;Initial Catalog=" & dbname & ";Data Source=" & servername & " ; Connect Timeout=5000; MAX Pool Size = 5000; "
            Else
                sql = "Password=advsys;Data Source=" & servername & ";Initial Catalog=" & dbname & ";Integrated Security=False;Persist Security Info=False;User ID=advsys;Max Pool Size=5000;Connect Timeout=5000"
            End If

        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return sql
    End Function
    Public Function Getconn(ByVal backdbname As String) As String
        Dim sql As String = ""
        Try
            If DbAuth = "WIN" Then
                sql = "Integrated Security=True;Initial Catalog=" & backdbname & ";Data Source=" & servername & " ; Connect Timeout=0; MAX Pool Size = 5000; "
            Else
                sql = "Password=advsys;Data Source=" & servername & ";Initial Catalog=" & backdbname & ";Integrated Security=False;Persist Security Info=False;User ID=advsys;Max Pool Size=5000;Connect Timeout=0"
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return sql
    End Function
    Public Function comfocousName(ByVal sender As ComboBox, ByVal ss As String, ByVal cn As SqlConnection) As ComboBox

        Dim dt1 As New DataTable
        Dim combo As New ComboBox
        Dim ss1 As String = ""
        Try
            combo = sender
            ss1 = combo.Text
            dt1 = Returntable(ss, cn)
            Dim r As Integer = 0
            combo.Items.Clear()
            Do While r < dt1.Rows.Count
                combo.Items.Add(dt1.Rows(r).Item(0))
                'combo.Items.Add(dt1.Rows(r).Item(0) & "-" & dt1.Rows(r).Item(1))
                r = r + 1
            Loop
            If ss1 = "" Then
                If combo.Items.Count > 0 Then
                    combo.Text = combo.Items(0).ToString
                End If
            Else
                combo.Text = ss1
            End If


        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return combo
    End Function
    Public Function FindOneString(ByVal str As String, ByVal cn As SqlConnection) As String
        Dim Onestr As String = ""
        Try
            If cn.State = ConnectionState.Closed Then
                cn.Open()
            End If
            Dim adpt As New SqlDataAdapter(str, cn)
            Dim ds As New DataSet
            Dim dt As DataTable
            adpt.Fill(ds, "ppp")
            dt = ds.Tables(0)
            If dt.Rows.Count > 0 Then
                Onestr = IIf(IsDBNull(dt.Rows(0).Item(0)), "", dt.Rows(0).Item(0))
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Onestr
    End Function
    Public Function FindBoolean(ByVal str As String, ByVal cn As SqlConnection) As Boolean
        Dim OneBln As Boolean = False
        Try
            If cn.State = ConnectionState.Closed Then
                cn.Open()
            End If
            Dim adpt As New SqlDataAdapter(str, cn)
            Dim ds As New DataSet
            Dim dt As DataTable
            adpt.Fill(ds, "ppp")
            dt = ds.Tables(0)
            If dt.Rows.Count > 0 Then
                OneBln = IIf(IsDBNull(dt.Rows(0).Item(0)), False, dt.Rows(0).Item(0))
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return OneBln
    End Function
    Public Function FindOneinteger(ByVal str As String, ByVal cn As SqlConnection) As Integer
        Dim Onestr As Integer
        Try
            Dim adpt As New SqlDataAdapter(str, cn)
            Dim ds As New DataSet
            Dim dt As DataTable
            adpt.Fill(ds, "ppp")
            dt = ds.Tables(0)
            If dt.Rows.Count > 0 Then
                Onestr = Val(IIf(IsDBNull(dt.Rows(0).Item(0)), 0, dt.Rows(0).Item(0)))
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Onestr
    End Function
    Public Function Returntable(ByVal str As String, ByVal cn As SqlConnection) As DataTable
        Dim Onestr As DataTable = Nothing
        Try
            Dim adpt As New SqlDataAdapter(str, cn)
            Dim ds As New DataSet
            adpt.Fill(ds, "ppp")
            Onestr = ds.Tables(0)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Onestr
    End Function
    Public Function Returntable(ByVal str As String, ByVal cn As SqlConnection, ByVal tblname As String) As DataTable
        Dim Onestr As DataTable = Nothing
        Try
            Dim adpt As New SqlDataAdapter(str, cn)
            Dim ds As New DataSet
            adpt.Fill(ds, tblname)
            Onestr = ds.Tables(tblname)

        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Onestr
    End Function
    Public Function SqlVLOanOPeningBalanceSummary(ByVal cn As SqlClient.SqlConnection) As Boolean

        Try
            Dim ssql As String
            ssql = "Create View VLOanOPeningBalanceSummary " & vbCrLf
            ssql = ssql & " as " & vbCrLf
            ssql = ssql & " SELECT LOB.Company_Id, LOB.Year_id, LOB.Loan_no, LOB.Doc_Date, LOB.Member_Id, LOB.Account_Ext, LOB.Tharav_No, LOB.Tharav_Date, LOB.File_No, LOB.Period, "
            ssql = ssql & " LOB.Percentage, LOB.Due_Date, LOB.Over_Due, LOB.Over_Due_Panelty, LOB.Column_Id, LOB.Amount, LOB.Advance_Installment, LOB.Jamin_1_Id, "
            ssql = ssql & " LOB.Jamin_2_Id, LOB.Jamin_3_Id, LOB.Detail, LOB.Loan_Opening, LOB.Over_Due_Interest_Opening, LOB.Over_Due_Penalty_Opening, LOB.Paid_Amount, "
            ssql = ssql & " LOB.Submit_Doccument, MM.Member_Name, VM.Village_Name, Cm.Column_Name,MM.Village_id"
            ssql = ssql & " FROM dbo.MEMBER_MASTER AS MM LEFT OUTER JOIN"
            ssql = ssql & " dbo.VILLAGE_MASTER AS VM ON MM.Company_Id = VM.Company_Id AND MM.Village_id = VM.Village_Id LEFT OUTER JOIN"
            ssql = ssql & " dbo.LOAN_OPENING_BALANCE AS LOB ON MM.Company_Id = LOB.Company_Id AND MM.Member_Id = LOB.Member_Id LEFT OUTER JOIN"
            ssql = ssql & " dbo.COLUMN_MASTER AS Cm ON LOB.Company_Id = Cm.Company_Id AND LOB.Column_Id = Cm.Column_Id"
            SqlVLOanOPeningBalanceSummary = ob.Execute(ssql, ob.getconnection)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    'Enum RoundOffConstants
    '    slNearest
    '    slNearestByAdding
    '    slNearestBySubtracting
    'End Enum
    Public Sub SetFinYear(ByVal sCompany As String, ByVal sFinancialYear As String, ByVal dtdate As Date, ByVal dtEnddate As Date, ByVal dtLastReserveDate As Date)

        'If bSetINDB Then
        '    '        sSQL = "UPDATE " & gCompanyMaster & " SET current_fin_year = #" & Format(dtDate, "mm/dd/yyyy") & "# WHERE company_id = " & clsVariables.CompnyId
        '    '       gdbSys.Execute sSQL
        'End If

        gFinYearBegin = dtdate
        gFinYearEnd = dtEnddate
        gLastReserveDate = dtLastReserveDate
        gCurrFinYear = dtdate
        gWorkingYear = sFinancialYear
        gCompany = Trim(sCompany)

        Exit Sub

    End Sub
    Public Sub LoadFinYear()
        Try
            Dim dty As New DataTable
            Dim ss As String
            ss = "select * from Year_master where Company_id=" & clsVariables.CompnyId
            ss = ss & " and Year_id=" & aq(clsVariables.WorkingYear)
            dty = ob.Returntable(ss, ob.getconnection)
            If dty.Rows.Count > 0 Then
                gFinYearBegin = dty.Rows(0).Item("Co_Start_Date")
                gFinYearEnd = dty.Rows(0).Item("Co_End_Date")
                gWorkingYear = clsVariables.WorkingYear
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    'Public Function RoundOff(ByVal Amount As Double, ByVal RoundOffByAmount As Double, ByVal RoundOffTo As RoundOffConstants) As Double
    '    'Dim gintAction As Object
    '    Dim dblResult As Double
    '    Try

    '        RoundOff = 0
    '        dblResult = Amount / RoundOffByAmount
    '        If VarType(dblResult) = vbInteger Then
    '            dblResult = 0
    '        End If

    '        Select Case RoundOffTo
    '            Case RoundOffConstants.slNearest     '''' Nearest
    '                If dblResult <> 0 Then
    '                    RoundOff = Val(Format(Amount / RoundOffByAmount, "#")) * RoundOffByAmount
    '                Else
    '                    RoundOff = dblResult
    '                End If

    '            Case RoundOffConstants.slNearestByAdding    '''' Next
    '                If dblResult <> 0 Then
    '                    RoundOff = (Int(Amount / RoundOffByAmount) + 1) * RoundOffByAmount
    '                Else
    '                    RoundOff = dblResult
    '                End If

    '            Case RoundOffConstants.slNearestBySubtracting    '''' Previous
    '                If dblResult <> 0 Then
    '                    RoundOff = Int(Amount / RoundOffByAmount) * RoundOffByAmount
    '                Else
    '                    RoundOff = dblResult
    '                End If

    '        End Select
    '    Catch ex As Exception
    '        MsgBox(ex.Message.ToString)
    '    End Try
    'End Function
    Public Sub checktable()
        Try
            'clsVariables.ScurrentSysDateFromate = Microsoft.Win32.Registry.GetValue("Hkey_Current_User\Control Panel\International", "sShortDate", "")
            'Microsoft.Win32.Registry.SetValue("Hkey_Current_User\Control Panel\International", "sShortDate", clsVariables.sReqSysDateFormate)
            Try
                FileOpen(1, Application.StartupPath & "\Mandali_ERP.ini", OpenMode.Input)
                Input(1, rptlocation)
                Input(1, servername)
                Input(1, dbname)
                Input(1, ImagePath)
                Input(1, ImageAlign)
                Input(1, sysname)
                Input(1, RptApp)
                Input(1, BackDbname)
                Input(1, DbAuth)
                FileClose(1)
            Catch ex As Exception

            End Try
            Dim cn As New SqlConnection
            cn.ConnectionString = Getconn()
            cn.Open()
            'If clsVariables.UserName = "p" Then

            If ExeTbl("COMPANY", cn) = False Then
                sqlcompany(cn)
            End If
            If ExeTbl("Year_Master", cn) = False Then
                sqlYearmst(cn)
            End If
            If ExeTbl("Working_Year_Master", cn) = False Then
                sqlWorking_Year_Master(cn)
            End If
            If ExeTbl("LOGINMST", cn) = False Then
                sqllogin(cn)
            End If



            If CheckField("Vadtar_Account_ID", "DEPARTMENT_MASTER", cn) = False Then
                Execute("Alter Table DEPARTMENT_MASTER Add Vadtar_Account_ID int ", cn)
            End If

            If CheckField("Department_id", "LoginMst", cn) = False Then
                Execute("Alter Table Loginmst Add Department_Id int ", cn)
            End If

            If CheckField("Kvn_year", "MAl_Avak_Main", cn) = False Then
                Execute("Alter Table MAl_Avak_Main Add Kvn_year nvarchar(9) ", cn)
            End If

            If CheckField("Mal_Avak_year", "KVN_ITEM_DETAIL", cn) = False Then
                Execute("Alter Table  KVN_ITEM_DETAIL Add Mal_Avak_year nvarchar(9) ", cn)
            End If

            If CheckField("Mal_Avak_year", "KVN_DETAIL", cn) = False Then
                Execute("Alter Table  KVN_DETAIL Add Mal_Avak_year nvarchar(9) ", cn)
            End If

            If CheckField("Kvn_year", "MAl_Avak_Main", cn) = False Then
                Execute("Alter Table MAl_Avak_Main Add Kvn_year nvarchar(9) ", cn)
            End If

            If CheckField("Vadtar_Main", "KVN_Main", cn) = False Then
                Execute("Alter Table KVN_Main Add Vadtar_Main Float Default 0 ", cn)
            End If


            If CheckField("Vadtar_Main", "Sales_Main", cn) = False Then
                Execute("Alter Table Sales_Main Add Vadtar_Main Float Default 0 ", cn)
            End If

            If ExeTbl("VILLAGE_MASTER", cn) = False Then
                sqlVillageMst(cn)
            End If



            If ExeTbl("Member_MASTER", cn) = False Then
                sqlMemberMaster(cn)
            End If





            If ExeTbl("Description_Master", cn) = False Then
                sqlDescription_Master(cn)
            End If
            If ExeTbl("Voucher_Group_Master", cn) = False Then
                sqlVoucher_Group_Master(cn)
            End If
            If ExeTbl("Voucher_Master", cn) = False Then
                sqlVoucher_Master(cn)
            End If
            If ExeTbl("Account_Group_Master", cn) = False Then
                sqlAccount_Group_Master(cn)
            End If
            If ExeTbl("Book_Group_Master", cn) = False Then
                sqlBook_Group_Master(cn)
            End If
            If ExeTbl("Book_Master", cn) = False Then
                sqlBook_Master(cn)
            End If
            If CheckField("Account_id", "Book_Master", cn) = False Then
                Execute("Alter Table Book_Master add Account_Id Bigint", cn)
            End If
            If ExeTbl("Account_Master", cn) = False Then
                sqlAccount_Master(cn)
            End If
            If CheckField("Trading_group_id", "Account_master", cn) = False Then
                Execute("Alter Table Account_master add Trading_group_id int", cn)
            End If
            If ExeTbl("Party_Master", cn) = False Then
                sqlParty_Master(cn)
            End If
            If ExeTbl("Department_Master", cn) = False Then
                sqlDepartment_Master(cn)
            End If





            If ExeTbl("User_Department_Master", cn) = False Then
                sqlUser_Department_Master(cn)
            End If
            If ExeTbl("Employee_Department_Master", cn) = False Then
                sqlEmployee_Department_Master(cn)
            End If
            If ExeTbl("Member_master", cn) = False Then
                sqlMember_master(cn)
            End If
            If ExeTbl("Inward_Data", cn) = False Then
                sqlInward_Data(cn)
            End If
            If ExeTbl("Issue_main", cn) = False Then
                sqlIssue_Main(cn)
            End If
            If ExeTbl("Issue_Detail", cn) = False Then
                sqlIssue_Detail(cn)
            End If
            If ExeTbl("Receipt_main", cn) = False Then
                sqlReceipt_Main(cn)
            End If
            If ExeTbl("Receipt_Detail", cn) = False Then
                sqlReceipt_Detail(cn)
            End If
            If ExeTbl("Transfer_Main", cn) = False Then
                sqlTransfer_Main(cn)
            End If
            If ExeTbl("Transfer_Detail", cn) = False Then
                sqlTransfer_Detail(cn)
            End If
            If ExeTbl("Report_Master", cn) = False Then
                sqlReport_Master(cn)
            End If
            If ExeTbl("Member_Opening_Balance", cn) = False Then
                sqlMember_Opening_Balance(cn)
            End If
            If ExeTbl("member_Ledger", cn) = False Then
                SqlAccountLedger(cn)
            End If
            If ExeTbl("Dividend_Data", cn) = False Then
                sqlDividend_Data(cn)
            End If
            If ExeTbl("Dividend_Payment_Data", cn) = False Then
                sqlDividend_Payment_Data(cn)
            End If
            If ExeTbl("Dividend_Payment_Main", cn) = False Then
                sqlDividend_Payment_main(cn)
            End If
            If ExeTbl("Dividend_Payment_Detail", cn) = False Then
                sqlDividend_Payment_Detail(cn)
            End If
            If ExeTbl("Member_Data", cn) = False Then
                SqlMember_Data(cn)
            End If
            If CheckField("SurName", "Member_master", cn) = False Then
                Execute("Alter Table Member_Master add SurName Nvarchar(20) default ''", cn)
            End If
            If CheckField("Caste", "Member_master", cn) = False Then
                Execute("Alter Table Member_Master add Caste Nvarchar(50) default ''", cn)
            End If
            If CheckField("Sub_Caste", "Member_master", cn) = False Then
                Execute("Alter Table Member_Master add Sub_Caste Nvarchar(50) default ''", cn)
            End If
            If ExeTbl("Daily_Transfer_Main", cn) = False Then
                sqlDaily_Transfer_Main(cn)
            End If
            If ExeTbl("Daily_Transfer_Detail", cn) = False Then
                sqlDaily_Transfer_Detail(cn)
            End If

            If ExeTbl("Batch_Formula_Data", cn) = False Then
                sqlDaily_Batch_Formula_Entry(cn)
            End If

            If ExeTbl("Batch_Main", cn) = False Then
                sqlDaily_Batch_Main(cn)
            End If



            If ExeTbl("Batch_Detail", cn) = False Then
                sqlDaily_Batch_Detail(cn)
            End If


            If ExeTbl("Final_tarij_Report", cn) = False Then
                SqlFund_tarij_Report(cn, "Final_tarij_Report")
            End If
            If ExeTbl("Joint_Trial_Balance", cn) = False Then
                SqlJoint_Trial_Balance(cn)
            End If
            If ExeTbl("Final_Rojmal_Data", cn) = False Then
                sqlFinal_Rojmal_Data(cn)
            End If
            If ExeTbl("Final_Account_Opening_Balance", cn) = False Then
                sqlFund_Account_Opening_Balance(cn, "Final_Account_Opening_Balance")
            End If
            If ExeTbl("Final_Party_balance", cn) = False Then
                SqlFund_Party_balance(cn, "Final_Party_balance")
            End If
            If ExeTbl("Final_Journal_Detail", cn) = False Then
                sqlJournal_Detail(cn, "Final_Journal_Detail")
            End If
            If ExeTbl("Final_Journal_main", cn) = False Then
                sqlJournal_main(cn, "Final_Journal_Main")
            End If
            If ExeTbl("Final_Account_Ledger", cn) = False Then
                SqlFinal_Account_Ledger(cn)
            End If
            If ExeTbl("Final_Account_Ledger_Int", cn) = False Then
                SqlFinal_Account_Ledger_Int(cn)
            End If
            If ExeTbl("Final_Interest_data", cn) = False Then
                SqlFinal_Interest_data(cn)
            End If
            If ExeTbl("Final_Party_Ledger", cn) = False Then
                SqlFinal_Party_Ledger(cn)
            End If
            If ExeTbl("Final_Party_Opening_Balance", cn) = False Then
                sqlFund_Party_Opening_Balance(cn, "Final_Party_Opening_Balance")
            End If
            If ExeTbl("Final_Party_balance_Report", cn) = False Then
                SqlFinal_Party_balance_Report(cn)
            End If
            If ExeTbl("TB_Detail", cn) = False Then
                sqlTB_Detail(cn)
            End If
            If ExeTbl("TB_Main", cn) = False Then
                sqlTB_Main(cn)
            End If


            If ExeTbl("Bank_Main", cn) = False Then
                sqlBank_Main(cn)
            End If
            If ExeTbl("Bank_Detail", cn) = False Then
                sqlBank_Detail(cn)
            End If
            If ExeTbl("BankR_Main", cn) = False Then
                sqlBank_Main(cn, "BankR_Main")
            End If
            If ExeTbl("BankR_Detail", cn) = False Then
                sqlBank_Detail(cn, "BankR_Detail")
            End If
            If ExeTbl("Rojmel", cn) = False Then
                sqlRojmel(cn)
            End If
            If ExeTbl("New_Rojmel", cn) = False Then
                sqlNew_Rojmel(cn)
            End If
            If ExeTbl("Bank_Summary", cn) = False Then
                SqlBank_Summary(cn)
            End If
            If ExeTbl("ACCESS_SECURITY", cn) = False Then
                sqlACCESS_SECURITY(cn)
            End If
            If ExeTbl("Form_info", cn) = False Then
                sqlForm_Info(cn)
            End If
            If ExeTbl("Branch_Master", cn) = False Then
                sqlBranch_Master(cn)
            End If
            If ob.ExeTbl("Voucher_master", cn) = True Then
                If ob.CheckField("Branch_Id", "Voucher_master", cn) = False Then
                    ob.Execute("Alter Table Voucher_master Add Branch_id int", cn)
                End If
            End If
            If ob.ExeTbl("Voucher_master", cn) = True Then
                If ob.CheckField("Department_Id", "Voucher_master", cn) = False Then
                    ob.Execute("Alter Table Voucher_master Add Department_id int", cn)
                End If
            End If
            If ob.ExeTbl("Voucher_master", cn) = True Then
                If ob.CheckField("Book_Id", "Voucher_master", cn) = False Then
                    ob.Execute("Alter Table Voucher_master Add Book_id int", cn)
                End If
            End If
            If ExeTbl("Member_Type_Master", cn) = False Then
                sqlMember_Type_Master(cn)
            End If
            If ob.ExeTbl("Member_master", cn) = True Then
                If ob.CheckField("Member_Type", "Member_master", cn) = False Then
                    ob.Execute("Alter Table Member_master Add Member_Type int", cn)
                End If
            End If
            If ob.ExeTbl("Final_Party_Balance", cn) = True Then
                If ob.CheckField("Member_id", "Final_Party_Balance", cn) = False Then
                    ob.Execute("Alter Table Final_Party_Balance Add Member_id int", cn)
                End If
            End If
            If ob.ExeTbl("Final_Journal_Detail", cn) = True Then
                If ob.CheckField("Member_id", "Final_Journal_Detail", cn) = False Then
                    ob.Execute("Alter Table Final_Journal_Detail Add Member_id int", cn)
                End If
            End If
            If ob.ExeTbl("FINAL_PARTY_OPENING_BALANCE", cn) = True Then
                If ob.CheckField("Member_id", "FINAL_PARTY_OPENING_BALANCE", cn) = False Then
                    ob.Execute("Alter Table FINAL_PARTY_OPENING_BALANCE Add Member_id int", cn)
                End If
            End If
            If ob.ExeTbl("Final_Rojmal_Data", cn) = True Then
                If ob.CheckField("Member_id", "Final_Rojmal_Data", cn) = False Then
                    ob.Execute("Alter Table Final_Rojmal_Data Add Member_id int", cn)
                End If
            End If
            If ob.ExeTbl("Bank_Detail", cn) = True Then
                If ob.CheckField("Member_id", "Bank_Detail", cn) = False Then
                    ob.Execute("Alter Table Bank_Detail Add Member_id int", cn)
                End If
            End If
            If ExeTbl("Mal_Avak_Main", cn) = False Then
                sqlMal_Avak_Main(cn)
            End If
            If ExeTbl("Mal_Avak_Detail", cn) = False Then
                sqlMal_Avak_Detail(cn)
            End If
            If ExeTbl("Product_Master", cn) = False Then
                sqlProduct_Master(cn)
            End If
            If ExeTbl("Quality_Master", cn) = False Then
                sqlQuality_Master(cn)
            End If
            If ExeTbl("Item_Master", cn) = False Then
                sqlItem_Master(cn)
            End If
            If ExeTbl("KVN_MAIN", cn) = False Then
                sqlKVN_Main(cn)
            End If
            If ExeTbl("KVN_Detail", cn) = False Then
                sqlKVN_Detail(cn)
            End If
            If ExeTbl("KVN_Item_Detail", cn) = False Then
                sqlKVN_Item_Detail(cn)
            End If
            If ExeTbl("Sales_Main", cn) = False Then
                sqlSales_Main(cn)
            End If
            If ExeTbl("Sales_Detail", cn) = False Then
                sqlSales_Detail(cn)
            End If
            If ExeTbl("Item_Opening_Balance", cn) = False Then
                sqlItem_Opening_Balance(cn)
            End If
            If ExeTbl("Addjustment_main", cn) = False Then
                sqlAddjustment_main(cn)
            End If
            If ExeTbl("Addjustment_Detail", cn) = False Then
                sqlAddjustment_Detail(cn)
            End If
            If ob.ExeTbl("Final_Party_Ledger", cn) = True Then
                If ob.CheckField("Member_id", "Final_Party_Ledger", cn) = False Then
                    ob.Execute("Alter Table Final_Party_Ledger Add Member_id int", cn)
                End If
            End If
            If ExeTbl("Vibhag_Master", cn) = False Then
                sqlVibhag_Master(cn)
            End If
            If ob.ExeTbl("Village_Master", cn) = True Then
                If ob.CheckField("Vibhag_id", "Village_master", cn) = False Then
                    ob.Execute("Alter Table Village_master Add Vibhag_id int", cn)
                End If
            End If
            If ob.ExeTbl("MAL_AVAK_MAIN", cn) = True Then
                If ob.CheckField("Party_Id", "MAL_AVAK_MAIN", cn) = False Then
                    ob.Execute("Alter Table MAL_AVAK_MAIN Add Party_Id int", cn)
                End If
            End If
            If ob.ExeTbl("MAL_AVAK_MAIN", cn) = True Then
                If ob.CheckField("Member_Id", "MAL_AVAK_MAIN", cn) = False Then
                    ob.Execute("Alter Table MAL_AVAK_MAIN Add Member_Id int", cn)
                End If
            End If
            If ob.ExeTbl("Member_Master", cn) = True Then
                If ob.CheckField("Vat_No", "Member_Master", cn) = False Then
                    ob.Execute("Alter Table Member_Master Add Vat_No nvarchar(50) default ''", cn)
                End If
            End If
            If ob.ExeTbl("Village_Master", cn) = True Then
                If ob.CheckField("Eng_Village_name", "Village_Master", cn) = False Then
                    ob.Execute("Alter Table Village_Master Add Eng_Village_name nvarchar(50) default ''", cn)
                End If
            End If
            If ob.ExeTbl("Branch_Master", cn) = True Then
                If ob.CheckField("Address", "Branch_Master", cn) = False Then
                    ob.Execute("Alter Table Branch_Master Add Address nvarchar(4000) default ''", cn)
                End If
            End If
            If ob.ExeTbl("Branch_Master", cn) = True Then
                If ob.CheckField("TIN_NO", "Branch_Master", cn) = False Then
                    ob.Execute("Alter Table Branch_Master Add TIN_NO nvarchar(50) default ''", cn)
                End If
            End If
            If ob.ExeTbl("Branch_Master", cn) = True Then
                If ob.CheckField("GST_NO", "Branch_Master", cn) = False Then
                    ob.Execute("Alter Table Branch_Master Add GST_NO nvarchar(50) default ''", cn)
                End If
            End If
            If ob.ExeTbl("Branch_Master", cn) = True Then
                If ob.CheckField("PHONE_NO", "Branch_Master", cn) = False Then
                    ob.Execute("Alter Table Branch_Master Add PHONE_NO nvarchar(50) default ''", cn)
                End If
            End If
            If ob.ExeTbl("Branch_Master", cn) = True Then
                If ob.CheckField("MOBILE_NO", "Branch_Master", cn) = False Then
                    ob.Execute("Alter Table Branch_Master Add MOBILE_NO nvarchar(50) default ''", cn)
                End If
            End If
            If ob.ExeTbl("Voucher_Master", cn) = True Then
                If ob.CheckField("Bill_Type", "Voucher_Master", cn) = False Then
                    ob.Execute("Alter Table Voucher_Master Add Bill_Type nvarchar(50) default ''", cn)
                End If
            End If
            If ob.ExeTbl("LoginMst", cn) = True Then
                If ob.CheckField("User_id", "LoginMst", cn) = False Then
                    ob.Execute("Alter Table LoginMst Add User_id nvarchar(50) default ''", cn)
                End If
            End If
            If ob.ExeTbl("User_Department_master", cn) = True Then
                If ob.CheckField("User_id", "User_Department_master", cn) = False Then
                    ob.Execute("Alter Table User_Department_master Add User_id nvarchar(50) default ''", cn)
                End If
            End If
            'If ob.ExeTbl("tmpUser_Department_master", cn) = False Then
            '    UserDeptMst.sqlUser_Department_Master(cn)
            'End If
            If ob.ExeTbl("Book_master", cn) = True Then
                If ob.CheckField("Department_id", "Book_master", cn) = False Then
                    ob.Execute("Alter Table Book_master Add department_id int ", cn)
                End If
            End If
            If ob.ExeTbl("LOginMst", cn) = True Then
                If ob.CheckField("IsAdmin", "LOginMst", cn) = False Then
                    ob.Execute("Alter Table LOginMst Add IsAdmin bit default 0 ", cn)
                End If
            End If
            If ob.ExeTbl("Sales_main", cn) = True Then
                If ob.CheckField("Freight_Main", "Sales_main", cn) = False Then
                    ob.Execute("Alter Table Sales_main Add Freight_Main float default 0 ", cn)
                End If
            End If
            If ob.ExeTbl("KVN_MAIN", cn) = True Then
                If ob.CheckField("Party_Id", "KVN_main", cn) = False Then
                    ob.Execute("Alter Table KVN_main Add Party_Id int  ", cn)
                End If
            End If
            If ob.ExeTbl("Company", cn) = True Then
                If ob.CheckField("Vat_Account_id", "Company", cn) = False Then
                    ob.Execute("Alter Table Company Add Vat_Account_id int  ", cn)
                End If
            End If
            If ob.ExeTbl("Company", cn) = True Then
                If ob.CheckField("Add_Vat_Account_id", "Company", cn) = False Then
                    ob.Execute("Alter Table Company Add Add_Vat_Account_id int  ", cn)
                End If
            End If
            If ob.ExeTbl("Company", cn) = True Then
                If ob.CheckField("Oth_Account_id", "Company", cn) = False Then
                    ob.Execute("Alter Table Company Add Oth_Account_id int  ", cn)
                End If
            End If
            If ob.ExeTbl("Company", cn) = True Then
                If ob.CheckField("Freight_Account_id", "Company", cn) = False Then
                    ob.Execute("Alter Table Company Add Freight_Account_id int  ", cn)
                End If
            End If

            If ob.ExeTbl("Department_master", cn) = True Then
                If ob.CheckField("Vat_Account_id", "Department_master", cn) = False Then
                    ob.Execute("Alter Table Department_master Add Vat_Account_id int  ", cn)
                End If
            End If
            If ob.ExeTbl("Department_master", cn) = True Then
                If ob.CheckField("Add_Vat_Account_id", "Department_master", cn) = False Then
                    ob.Execute("Alter Table Department_master Add Add_Vat_Account_id int  ", cn)
                End If
            End If
            If ob.ExeTbl("Department_master", cn) = True Then
                If ob.CheckField("Oth_Account_id", "Department_master", cn) = False Then
                    ob.Execute("Alter Table Department_master Add Oth_Account_id int  ", cn)
                End If
            End If
            If ob.ExeTbl("Department_master", cn) = True Then
                If ob.CheckField("Freight_Account_id", "Department_master", cn) = False Then
                    ob.Execute("Alter Table Department_master Add Freight_Account_id int  ", cn)
                End If
            End If
            If ob.ExeTbl("Bank_Detail", cn) = True Then
                If ob.CheckField("Num_To_Word", "Bank_Detail", cn) = False Then
                    ob.Execute("Alter Table Bank_Detail Add Num_To_Word Nvarchar(3000) default ''  ", cn)
                End If
            End If
            If ob.ExeTbl("Bank_Main", cn) = True Then
                If ob.CheckField("Num_To_Word", "Bank_Main", cn) = False Then
                    ob.Execute("Alter Table Bank_Main Add Num_To_Word Nvarchar(3000) default ''  ", cn)
                End If
            End If
            If ob.ExeTbl("BankR_detail", cn) = True Then
                If ob.CheckField("Num_To_Word", "BankR_detail", cn) = False Then
                    ob.Execute("Alter Table BankR_detail Add Num_To_Word Nvarchar(3000) default ''  ", cn)
                End If
            End If
            If ob.ExeTbl("Final_Rojmal_data", cn) = True Then
                If ob.CheckField("Num_To_Word", "Final_Rojmal_data", cn) = False Then
                    ob.Execute("Alter Table Final_Rojmal_data Add Num_To_Word Nvarchar(3000) default ''  ", cn)
                End If
            End If
            If ob.ExeTbl("Sales_Main", cn) = True Then
                If ob.CheckField("Num_To_Word", "Sales_Main", cn) = False Then
                    ob.Execute("Alter Table Sales_Main Add Num_To_Word Nvarchar(3000) default ''  ", cn)
                End If
            End If
            If ob.ExeTbl("Sales_Detail", cn) = True Then
                If ob.CheckField("Item_Detail", "Sales_Detail", cn) = False Then
                    ob.Execute("Alter Table Sales_Detail Add Item_Detail Nvarchar(100) default ''  ", cn)
                End If
            End If
            If ob.ExeTbl("Quality_master", cn) = True Then
                If ob.CheckField("Department_Id", "Quality_master", cn) = False Then
                    ob.Execute("Alter Table Quality_master Add Department_Id int ", cn)
                End If
            End If
            If ob.ExeTbl("Member_master", cn) = True Then
                If ob.CheckField("Department_Id", "Member_master", cn) = False Then
                    ob.Execute("Alter Table Member_master Add Department_Id int ", cn)
                End If
            End If
            If ob.ExeTbl("Account_master", cn) = True Then
                If ob.CheckField("Department_Id", "Account_master", cn) = False Then
                    ob.Execute("Alter Table Account_master Add Department_Id int ", cn)
                End If
            End If
            If ob.ExeTbl("KVN_MAIN", cn) = True Then
                If ob.CheckField("Freight_Main", "KVN_MAIN", cn) = False Then
                    ob.Execute("Alter Table KVN_MAIN Add Freight_Main float default 0 ", cn)
                End If
            End If
            If ob.ExeTbl("Tank_master", cn) = False Then
                ob.sqlTank_Master(cn)
            End If
            If ob.ExeTbl("Dip_master", cn) = False Then
                ob.sqlDip_Master(cn)
            End If
            If ob.ExeTbl("Pump_master", cn) = False Then
                ob.sqlPump_Master(cn)
            End If
            If ExeTbl("Pump_Opening_Balance", cn) = False Then
                sqlPump_Opening_Balance(cn)
            End If
            If ExeTbl("Tank_Opening_Balance", cn) = False Then
                sqlTank_Opening_Balance(cn)
            End If
            If ExeTbl("Pump_Reading_Data", cn) = False Then
                sqlPump_Reading_Data(cn)
            End If
            If ExeTbl("Tank_Reading_Data", cn) = False Then
                sqlTank_Reading_Data(cn)
            End If
            Dim ssql As String
            If ExeTbl(gClosing_Stock_Main, cn) = False Then

                ssql = "Create table " & gClosing_Stock_Main
                ssql = ssql & "("
                ssql = ssql & "Company_Id int ," & vbCrLf
                ssql = ssql & "Year_Id varchar(9)," & vbCrLf
                ssql = ssql & "Doc_Type int ," & vbCrLf
                ssql = ssql & "Doc_no int ," & vbCrLf
                ssql = ssql & "Doc_Date datetime ," & vbCrLf
                ssql = ssql & "Particulars varchar(500)default ''," & vbCrLf
                ssql = ssql & "Add_Date datetime ," & vbCrLf
                ssql = ssql & "Add_User  varchar(50) default ''," & vbCrLf
                ssql = ssql & "Edit_Date datetime ," & vbCrLf
                ssql = ssql & "Edit_User  varchar(50) default ''," & vbCrLf
                ssql = ssql & "Edit_User_Name  varchar(50) default ''," & vbCrLf
                ssql = ssql & "ip_Address varchar(50) default ''," & vbCrLf
                ssql = ssql & "Mach_Name varchar(50) default ''," & vbCrLf
                ssql = ssql & "Revision int default 0" & vbCrLf
                ssql = ssql & "Primary Key(Company_Id,Year_Id,Doc_Type,DOc_no))"
                ob.Execute(ssql, cn)
            End If
            If ExeTbl(gClosing_Stock_Detail, cn) = False Then

                ssql = "Create table " & gClosing_Stock_Detail
                ssql = ssql & "("
                ssql = ssql & "Company_Id int ," & vbCrLf
                ssql = ssql & "Year_Id varchar(9)," & vbCrLf
                ssql = ssql & "Doc_Type int ," & vbCrLf
                ssql = ssql & "Doc_no int ," & vbCrLf
                ssql = ssql & "Sr_no int ," & vbCrLf
                ssql = ssql & "Account_id int," & vbCrLf
                ssql = ssql & "Particulars varchar(500)default ''," & vbCrLf
                ssql = ssql & "Receipt_Amt decimal(18,2) default 0 ," & vbCrLf
                ssql = ssql & "Payment_Amt decimal(18,2) default 0 ," & vbCrLf
                ssql = ssql & "C_D varchar(2)," & vbCrLf
                ssql = ssql & "Add_Date datetime ," & vbCrLf
                ssql = ssql & "Add_User  varchar(50) default ''," & vbCrLf
                ssql = ssql & "Edit_Date datetime ," & vbCrLf
                ssql = ssql & "Edit_User  varchar(50) default ''," & vbCrLf
                ssql = ssql & "Edit_User_Name  varchar(50) default ''," & vbCrLf
                ssql = ssql & "ip_Address varchar(50) default ''," & vbCrLf
                ssql = ssql & "Mach_Name varchar(50) default ''," & vbCrLf
                ssql = ssql & "Revision int default 0" & vbCrLf
                ssql = ssql & "Primary Key(Company_Id,Year_Id,Doc_Type,DOc_no,Sr_no))"
                ob.Execute(ssql, cn)
            End If
            If ExeTbl(gAdd_Ded_Master, cn) = False Then

                ssql = "Create table " & UCase(gAdd_Ded_Master)
                ssql = ssql & "("
                ssql = ssql & "[Company_Id] int ," & vbCrLf
                ssql = ssql & "[Add_Ded_id] varchar(10)," & vbCrLf
                ssql = ssql & "[Add_Ded_Name] [varchar](100) default ''," & vbCrLf
                ssql = ssql & "[A_D] [varchar](1) default ''," & vbCrLf
                ssql = ssql & "[Add_Date] [datetime]," & vbCrLf
                ssql = ssql & "[Add_User] [varchar](50) default ''," & vbCrLf
                ssql = ssql & "[Edit_Date] [datetime] ," & vbCrLf
                ssql = ssql & "[Edit_User] [varchar](50)," & vbCrLf
                ssql = ssql & "Edit_User_Name  varchar(50) default ''," & vbCrLf
                ssql = ssql & "[Status] [bit] default 0," & vbCrLf
                ssql = ssql & "[Revision] [int] default 0," & vbCrLf
                ssql = ssql & "[Ip_Address] [varchar](50) default ''," & vbCrLf
                ssql = ssql & "[Mach_Name] [varchar](50) default ''" & vbCrLf
                ssql = ssql & "Primary Key(Company_id,Add_Ded_id))"
                ob.Execute(ssql, cn)
            End If
            If ExeTbl(gPT_Master, cn) = False Then

                ssql = "Create table " & UCase(gPT_Master)
                ssql = ssql & "("
                ssql = ssql & "[Company_Id] int ," & vbCrLf
                ssql = ssql & "[PT_Id] int," & vbCrLf
                ssql = ssql & "[From_Amount] decimal(18,2) default 0," & vbCrLf
                ssql = ssql & "[To_Amount] decimal(18,2) default 0," & vbCrLf
                ssql = ssql & "[Rate] decimal(18,2) default 0," & vbCrLf
                ssql = ssql & "[Add_Date] [datetime]," & vbCrLf
                ssql = ssql & "[Add_User] [varchar](50) default ''," & vbCrLf
                ssql = ssql & "[Edit_Date] [datetime] ," & vbCrLf
                ssql = ssql & "[Edit_User] [varchar](50)," & vbCrLf
                ssql = ssql & "[Status] [bit] default 0," & vbCrLf
                ssql = ssql & "[Revision] [int] default 0," & vbCrLf
                ssql = ssql & "Edit_User_Name  varchar(50) default ''," & vbCrLf
                ssql = ssql & "[Ip_Address] [varchar](50) default ''," & vbCrLf
                ssql = ssql & "[Mach_Name] [varchar](50) default ''" & vbCrLf
                ssql = ssql & "Primary Key(Company_id,PT_Id))"
                ob.Execute(ssql, cn)
            End If


            Execute("Alter table Description_Master alter Column Description_Name  nvarchar(500)", cn)

            If ob.ExeTbl("Issue_main", cn) = True Then
                If ob.CheckField("Debit_Account_Id", "Issue_main", cn) = False Then
                    ob.Execute("Alter Table Issue_main Add Debit_Account_Id int  default 0  ", cn)
                End If
            End If
            If ob.ExeTbl("Receipt_Main", cn) = True Then
                If ob.CheckField("Credit_Account_Id", "Issue_main", cn) = False Then
                    ob.Execute("Alter Table Issue_main Add Credit_Account_Id int  default 0  ", cn)
                End If
            End If
            If ob.ExeTbl("Department_master", cn) = True Then
                If ob.CheckField("Account_Effect", "Department_master", cn) = False Then
                    ob.Execute("Alter Table Department_master Add Account_Effect Bit default 0  ", cn)
                    ob.Execute("Update Department_Master set Account_Effect=0", cn)
                End If
            End If

            If ob.ExeTbl("Dividend_Payment_Main", cn) = True Then
                If ob.CheckField("Credit_Account_Id", "Dividend_Payment_Main", cn) = False Then
                    ob.Execute("Alter Table Dividend_Payment_Main Add Credit_Account_Id int default 0  ", cn)
                End If
                If ob.CheckField("Debit_Account_Id", "Dividend_Payment_Main", cn) = False Then
                    ob.Execute("Alter Table Dividend_Payment_Main Add Debit_Account_Id int default 0  ", cn)
                End If
            End If
            If ob.ExeTbl("Rent_Sales_Data", cn) = False Then
                ssql = "Create Table Rent_Sales_DAta"
                ssql = ssql & "(" & vbCrLf
                ssql = ssql & "Company_Id Int," & vbCrLf
                ssql = ssql & "Year_id varchar(9)," & vbCrLf
                ssql = ssql & "Doc_Type int," & vbCrLf
                ssql = ssql & "Doc_No int," & vbCrLf
                ssql = ssql & "Doc_Date datetime," & vbCrLf
                ssql = ssql & "Account_Id int," & vbCrLf
                ssql = ssql & "member_id Int," & vbCrLf
                ssql = ssql & "Remarks varchar(500)," & vbCrLf
                ssql = ssql & "Amount decimal(18,2) default 0," & vbCrLf
                ssql = ssql & "Ser_tax_per decimal(18,2) default 0," & vbCrLf
                ssql = ssql & "Ser_tax_Amt decimal(18,2) default 0," & vbCrLf
                ssql = ssql & "Edu_Sess_per decimal(18,2) default 0," & vbCrLf
                ssql = ssql & "Edu_Sess_Amt decimal(18,2) default 0," & vbCrLf
                ssql = ssql & "H_Edu_Sess_per decimal(18,2) default 0," & vbCrLf
                ssql = ssql & "H_Edu_Sess_Amt decimal(18,2) default 0," & vbCrLf
                ssql = ssql & "Tds_Per decimal(18,2) default 0," & vbCrLf
                ssql = ssql & "Tds_Amt decimal(18,2) default 0," & vbCrLf
                ssql = ssql & "Net_Amt decimal(18,2) default 0," & vbCrLf
                ssql = ssql & "Rent_Ac_Id int default 0," & vbCrLf
                ssql = ssql & "Ser_tax_Ac_Id int default 0," & vbCrLf
                ssql = ssql & "Edu_Sess_Ac_Id int default 0," & vbCrLf
                ssql = ssql & "H_Edu_Sess_Ac_Id int default 0," & vbCrLf
                ssql = ssql & "Tds_Ac_Id int default 0," & vbCrLf
                ssql = ssql & "Add_Date datetime ,"
                ssql = ssql & "Add_User varchar(20),"
                ssql = ssql & "Edit_Date datetime,"
                ssql = ssql & "Edit_User_Name varchar(20),"
                ssql = ssql & "Ip_Address varchar(50),"
                ssql = ssql & "mach_Name varchar(50),"
                ssql = ssql & "Revision int default 0"
                ssql = ssql & "Primary Key (Company_Id,year_Id,Doc_Type,Doc_no))"
                ob.Execute(ssql, cn)
            End If
            If ob.ExeTbl("Final_Interest_Data", cn) = True Then
                If ob.CheckField("Bill_Date", "Final_Interest_Data", cn) = False Then
                    ssql = "Alter Table Final_Interest_Data"
                    ssql = ssql & " add Bill_Date datetime"
                    ob.Execute(ssql, cn)
                End If
            End If
            If ob.ExeTbl("FINAL_ACCOUNT_LEDGER_INT", cn) = True Then
                If ob.CheckField("rec_prod", "FINAL_ACCOUNT_LEDGER_INT", cn) = False Then
                    ssql = "Alter Table FINAL_ACCOUNT_LEDGER_INT"
                    ssql = ssql & " add rec_prod decimal(18,2) default 0"
                    ob.Execute(ssql, cn)
                End If
                If ob.CheckField("Pay_prod", "FINAL_ACCOUNT_LEDGER_INT", cn) = False Then
                    ssql = "Alter Table FINAL_ACCOUNT_LEDGER_INT"
                    ssql = ssql & " add Pay_prod decimal(18,2) default 0"
                    ob.Execute(ssql, cn)
                End If
                If ob.CheckField("Bill_Date", "FINAL_ACCOUNT_LEDGER_INT", cn) = False Then
                    ssql = "Alter Table FINAL_ACCOUNT_LEDGER_INT"
                    ssql = ssql & " add Bill_Date datetime"
                    ob.Execute(ssql, cn)
                End If
            End If
            If ob.ExeTbl("Leave_Master", cn) = False Then
                sqlLeave_Master(cn)
            End If
            If ob.ExeTbl("Transaction_Data", cn) = False Then
                sqlTransaction_Data(cn, "Transaction_Data")
            End If
            If ob.ExeTbl("Leave_Data_Old", cn) = False Then
                sqlLeave_Data_Old(cn)
            End If
            If ob.ExeTbl("Leave_Data", cn) = False Then
                sqlLeave_Data(cn)
            End If
            If ob.ExeTbl("Paid_Data", cn) = False Then
                sqlPaid_Data(cn)
            End If
            If ob.ExeTbl("Da_Data", cn) = False Then
                sqlDa_Data(cn)
            End If
            If ob.ExeTbl("Da_Master", cn) = False Then
                sqlDA_Master(cn)
            End If
            If ob.ExeTbl("Parameter_Master", cn) = False Then
                sqlParameter_Master(cn)
            End If
            If ob.ExeTbl("Payroll_Register", cn) = False Then
                sqlPayroll_Register(cn)
            End If
            If ob.ExeTbl("Leave_Wages_Report", cn) = False Then
                sqlLeave_Wages_Report(cn)
            End If
            If ob.ExeTbl("Emp_Last_Salary", cn) = False Then
                sqlEmp_Last_Salary(cn)
            End If
            If ob.ExeTbl("Leave_Ledger", cn) = False Then
                sqlLeave_Ledger(cn)
            End If
            If ob.ExeTbl("Leave_Opening_Balance", cn) = False Then
                sqlLeave_Opening_Balance(cn)
            End If
            If ob.ExeTbl("Bonus_Report", cn) = False Then
                sqlBonus_Report(cn)
            End If
            If ob.ExeTbl("Storage_Master", cn) = False Then
                sqlStorage_Master(cn)
            End If
            If ob.ExeTbl("Storage_Item_Opening_Balance", cn) = False Then
                sqlStorage_Item_Opening_Balance(cn)
            End If
            If ob.ExeTbl("Storage_In_Main", cn) = False Then
                sqlStorage_In_Main(cn)
            End If
            If ob.ExeTbl("Storage_In_Detail", cn) = False Then
                sqlStorage_In_Detail(cn)
            End If
            If ob.ExeTbl("Storage_out_Main", cn) = False Then
                sqlStorage_Out_Main(cn, "Storage_out_Main")
            End If
            If ob.ExeTbl("Storage_Out_Detail", cn) = False Then
                sqlStorage_Out_Detail(cn, "Storage_Out_Detail")
            End If
            If ob.ExeTbl("STORAGE_ITEM_STOCK_REPORT", cn) = False Then
                ssql = "Create Table STORAGE_ITEM_STOCK_REPORT"
                ssql = ssql & "("
                ssql = ssql & "Company_id int ," & vbCrLf
                ssql = ssql & "Ip_Address nvarchar(100) ," & vbCrLf
                ssql = ssql & "Doc_Type int default 0," & vbCrLf
                ssql = ssql & "Doc_no int default 0," & vbCrLf
                ssql = ssql & "Doc_Date datetime ," & vbCrLf
                ssql = ssql & "Sr_no int default 0," & vbCrLf
                ssql = ssql & "Storage_id int default 0," & vbCrLf
                ssql = ssql & "Item_id int default 0," & vbCrLf
                ssql = ssql & "open_Qty decimal(18,3) default 0 ," & vbCrLf
                ssql = ssql & "In_Qty decimal(18,3) default 0 ," & vbCrLf
                ssql = ssql & "out_Qty decimal(18,3) default 0 ," & vbCrLf
                ssql = ssql & "Adj_Qty decimal(18,3) default 0 ," & vbCrLf
                ssql = ssql & "Bal_Qty decimal(18,3) default 0 ," & vbCrLf
                ssql = ssql & "Remarks nvarchar(500)default ''," & vbCrLf
                ssql = ssql & "Member_Id int default 0," & vbCrLf
                ssql = ssql & "Add_Date datetime "
                ssql = ssql & ")"
                ob.Execute(ssql, cn)
            End If
            If ob.ExeTbl("Batch_Main", cn) = True Then
                If ob.CheckField("Revision", "Batch_Main", cn) = False Then
                    ob.Execute("Alter Table Batch_Main Add Revision int default 0", cn)
                End If
            End If
            If ob.ExeTbl("Batch_Detail", cn) = True Then
                If ob.CheckField("Revision", "Batch_Detail", cn) = False Then
                    ob.Execute("Alter Table Batch_Detail Add Revision int default 0", cn)
                End If
            End If
            If ob.ExeTbl("BATCH_FORMULA_DATA", cn) = True Then
                If ob.CheckField("Revision", "BATCH_FORMULA_DATA", cn) = False Then
                    ob.Execute("Alter Table BATCH_FORMULA_DATA Add Revision int default 0", cn)
                End If
            End If
            If ob.ExeTbl("BATCH_FORMULA_DATA", cn) = True Then
                If ob.CheckField("Edit_Date", "BATCH_FORMULA_DATA", cn) = False Then
                    ob.Execute("Alter Table BATCH_FORMULA_DATA Add Edit_Date Datetime", cn)
                End If
            End If
            If ob.ExeTbl("Dividend_Payment_Main", cn) = True Then
                If ob.CheckField("Credit_Member_Id", "Dividend_Payment_Main", cn) = False Then
                    ob.Execute("Alter Table Dividend_Payment_Main Add Credit_Member_Id int default 0  ", cn)
                    ob.Execute("Alter Table Dividend_Payment_Main Add Credit_Member_Id int default 0  ", ob.getconnection(ob.Getconn(BackDbname)))
                End If
            End If
            If ob.ExeTbl("Year_Master", cn) = True Then
                If ob.CheckField("Div_Account_Id", "Year_master", cn) = False Then
                    ob.Execute("Alter Table Year_master Add Div_Account_Id int default 0  ", cn)
                    ob.Execute("Alter Table Year_master Add Div_Account_Id int default 0  ", ob.getconnection(ob.Getconn(BackDbname)))
                End If
            End If
            If ob.ExeTbl("Item_Master", cn) = True Then
                If ob.CheckField("Rep_Status", "Item_Master", cn) = False Then
                    ob.Execute("Alter Table Item_Master Add Rep_Status bit default 0  ", cn)
                    ob.Execute("Alter Table Item_Master Add Rep_Status Bit default 0  ", ob.getconnection(ob.Getconn(BackDbname)))
                    ssql = "Update Item_master set Rep_Status=0"
                    ob.Execute(ssql, cn)
                End If
            End If
            ssql = "USE " & dbname & ";" & vbCrLf
            ssql = ssql & "ALTER DATABASE " & dbname & vbCrLf
            ssql = ssql & "SET RECOVERY SIMPLE;" & vbCrLf
            ssql = ssql & "DBCC SHRINKFILE (" & dbname & "_log, 1);" & vbCrLf
            ob.Execute(ssql, cn)

            CreateBackupdb()
            cn.Close()
            CreateDSN("Assdsn", dbname)


        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Sub CreateBackupdb()
        Try
            Dim cn As SqlConnection
            cn = getconnection(Getconn(BackDbname))
            Dim ssql As String
            ssql = "SELECT name FROM sysobjects WHERE        (xtype = 'u') "
            Dim i As Integer
            Dim dty As New DataTable
            dty = ob.Returntable(ssql, ob.getconnection)
            For i = 0 To dty.Rows.Count - 1
                If ExeTbl(dty.Rows(i).Item("name"), cn) = False Then
                    ssql = "Select Top 0 * into " & dty.Rows(i).Item("name") & "   from " & dbname & ".dbo." & dty.Rows(i).Item("Name")
                    Execute(ssql, cn)
                End If
            Next
            dty.Clear()
            dty.Dispose()


            If ExeTbl("Batch_Formula_Data", cn) = False Then
                sqlDaily_Batch_Formula_Entry(cn)
            End If

            If ExeTbl("Batch_Main", cn) = False Then
                sqlDaily_Batch_Main(cn)
            End If

            If ExeTbl("Batch_Detail", cn) = False Then
                sqlDaily_Batch_Detail(cn)
            End If

            If ob.ExeTbl("DIVIDEND_PAYMENT_MAIN", cn) = True Then
                If ob.CheckField("Year_Id", "DIVIDEND_PAYMENT_MAIN", cn) = False Then
                    ob.Execute("Alter table DIVIDEND_PAYMENT_MAIN add Year_id Nvarchar(9) default ''", cn)
                End If
            End If

            If ob.ExeTbl("DIVIDEND_PAYMENT_DETAIL", cn) = True Then
                If ob.CheckField("Year_Id", "DIVIDEND_PAYMENT_DETAIL", cn) = False Then
                    ob.Execute("Alter table DIVIDEND_PAYMENT_DETAIL add Year_id Nvarchar(9) default ''", cn)
                End If
            End If

            If ob.ExeTbl("MEMBER_MASTER", cn) = True Then
                If ob.CheckField("Third_Name", "MEMBER_MASTER", cn) = False Then
                    ob.Execute("Alter table MEMBER_MASTER add Third_Name Nvarchar(300) default ''", cn)
                End If
            End If

            'member
            If ob.ExeTbl("MEMBER_OPENING_BALANCE", cn) = True Then
                If ob.CheckField("Year_id", "MEMBER_OPENING_BALANCE", cn) = False Then
                    ob.Execute("Alter table MEMBER_OPENING_BALANCE add Year_id Nvarchar(9) default ''", cn)
                End If
            End If

            If ob.ExeTbl("MEMBER_DATA", cn) = True Then
                If ob.CheckField("Year_id", "MEMBER_DATA", cn) = False Then
                    ob.Execute("Alter table MEMBER_DATA add Year_id Nvarchar(9) default ''", cn)
                End If
            End If

            If ob.ExeTbl("Voucher_master", cn) = True Then
                If ob.CheckField("Department_Id", "Voucher_master", cn) = False Then
                    ob.Execute("Alter Table Voucher_master Add Department_id int", cn)
                End If
            End If
            If ob.ExeTbl("Voucher_master", cn) = True Then
                If ob.CheckField("Book_Id", "Voucher_master", cn) = False Then
                    ob.Execute("Alter Table Voucher_master Add Book_id int", cn)
                End If
            End If

            If ob.ExeTbl("Member_master", cn) = True Then
                If ob.CheckField("Member_Type", "Member_master", cn) = False Then
                    ob.Execute("Alter Table Member_master Add Member_Type int", cn)
                End If
            End If
            If ob.ExeTbl("Final_Party_Balance", cn) = True Then
                If ob.CheckField("Member_id", "Final_Party_Balance", cn) = False Then
                    ob.Execute("Alter Table Final_Party_Balance Add Member_id int", cn)
                End If
            End If
            If ob.ExeTbl("Final_Journal_Detail", cn) = True Then
                If ob.CheckField("Member_id", "Final_Journal_Detail", cn) = False Then
                    ob.Execute("Alter Table Final_Journal_Detail Add Member_id int", cn)
                End If
            End If
            If ob.ExeTbl("FINAL_PARTY_OPENING_BALANCE", cn) = True Then
                If ob.CheckField("Member_id", "FINAL_PARTY_OPENING_BALANCE", cn) = False Then
                    ob.Execute("Alter Table FINAL_PARTY_OPENING_BALANCE Add Member_id int", cn)
                End If
            End If
            If ob.ExeTbl("Final_Rojmal_Data", cn) = True Then
                If ob.CheckField("Member_id", "Final_Rojmal_Data", cn) = False Then
                    ob.Execute("Alter Table Final_Rojmal_Data Add Member_id int", cn)
                End If
            End If
            If ob.ExeTbl("Bank_Detail", cn) = True Then
                If ob.CheckField("Member_id", "Bank_Detail", cn) = False Then
                    ob.Execute("Alter Table Bank_Detail Add Member_id int", cn)
                End If
            End If

            If ob.ExeTbl("Member_Master", cn) = True Then
                If ob.CheckField("Vat_No", "Member_Master", cn) = False Then
                    ob.Execute("Alter Table Member_Master Add Vat_No nvarchar(50) default ''", cn)
                End If
            End If

            If ob.ExeTbl("Village_Master", cn) = True Then
                If ob.CheckField("Eng_Village_name", "Village_Master", cn) = False Then
                    ob.Execute("Alter Table Village_Master Add Eng_Village_name nvarchar(50) default ''", cn)
                End If
            End If

            If ob.ExeTbl("Branch_Master", cn) = True Then
                If ob.CheckField("Address", "Branch_Master", cn) = False Then
                    ob.Execute("Alter Table Branch_Master Add Address nvarchar(4000) default ''", cn)
                End If
            End If

            If ob.ExeTbl("Branch_Master", cn) = True Then
                If ob.CheckField("TIN_NO", "Branch_Master", cn) = False Then
                    ob.Execute("Alter Table Branch_Master Add TIN_NO nvarchar(50) default ''", cn)
                End If
            End If
            If ob.ExeTbl("Branch_Master", cn) = True Then
                If ob.CheckField("GST_NO", "Branch_Master", cn) = False Then
                    ob.Execute("Alter Table Branch_Master Add GST_NO nvarchar(50) default ''", cn)
                End If
            End If
            If ob.ExeTbl("Branch_Master", cn) = True Then
                If ob.CheckField("PHONE_NO", "Branch_Master", cn) = False Then
                    ob.Execute("Alter Table Branch_Master Add PHONE_NO nvarchar(50) default ''", cn)
                End If
            End If
            If ob.ExeTbl("Branch_Master", cn) = True Then
                If ob.CheckField("MOBILE_NO", "Branch_Master", cn) = False Then
                    ob.Execute("Alter Table Branch_Master Add MOBILE_NO nvarchar(50) default ''", cn)
                End If
            End If
            If ob.ExeTbl("Voucher_Master", cn) = True Then
                If ob.CheckField("Bill_Type", "Voucher_Master", cn) = False Then
                    ob.Execute("Alter Table Voucher_Master Add Bill_Type nvarchar(50) default ''", cn)
                End If
            End If
            If ob.ExeTbl("Sales_main", cn) = True Then
                If ob.CheckField("Freight_Main", "Sales_main", cn) = False Then
                    ob.Execute("Alter Table Sales_main Add Freight_Main float default 0 ", cn)
                End If
            End If
            If ob.ExeTbl("Department_master", cn) = True Then
                If ob.CheckField("Vat_Account_id", "Department_master", cn) = False Then
                    ob.Execute("Alter Table Department_master Add Vat_Account_id int  ", cn)
                End If
            End If
            If ob.ExeTbl("Department_master", cn) = True Then
                If ob.CheckField("Add_Vat_Account_id", "Department_master", cn) = False Then
                    ob.Execute("Alter Table Department_master Add Add_Vat_Account_id int  ", cn)
                End If
            End If
            If ob.ExeTbl("Department_master", cn) = True Then
                If ob.CheckField("Oth_Account_id", "Department_master", cn) = False Then
                    ob.Execute("Alter Table Department_master Add Oth_Account_id int  ", cn)
                End If
            End If
            If ob.ExeTbl("Department_master", cn) = True Then
                If ob.CheckField("Freight_Account_id", "Department_master", cn) = False Then
                    ob.Execute("Alter Table Department_master Add Freight_Account_id int  ", cn)
                End If
            End If
            If ob.ExeTbl("Bank_Detail", cn) = True Then
                If ob.CheckField("Num_To_Word", "Bank_Detail", cn) = False Then
                    ob.Execute("Alter Table Bank_Detail Add Num_To_Word Nvarchar(3000) default ''  ", cn)
                End If
            End If
            If ob.ExeTbl("Bank_Main", cn) = True Then
                If ob.CheckField("Num_To_Word", "Bank_Main", cn) = False Then
                    ob.Execute("Alter Table Bank_Main Add Num_To_Word Nvarchar(3000) default ''  ", cn)
                End If
            End If
            If ob.ExeTbl("BankR_detail", cn) = True Then
                If ob.CheckField("Num_To_Word", "BankR_detail", cn) = False Then
                    ob.Execute("Alter Table BankR_detail Add Num_To_Word Nvarchar(3000) default ''  ", cn)
                End If
            End If
            If ob.ExeTbl("Final_Rojmal_data", cn) = True Then
                If ob.CheckField("Num_To_Word", "Final_Rojmal_data", cn) = False Then
                    ob.Execute("Alter Table Final_Rojmal_data Add Num_To_Word Nvarchar(3000) default ''  ", cn)
                End If
            End If
            If ob.ExeTbl("Sales_Main", cn) = True Then
                If ob.CheckField("Num_To_Word", "Sales_Main", cn) = False Then
                    ob.Execute("Alter Table Sales_Main Add Num_To_Word Nvarchar(3000) default ''  ", cn)
                End If
            End If
            If ob.ExeTbl("Sales_Detail", cn) = True Then
                If ob.CheckField("Item_Detail", "Sales_Detail", cn) = False Then
                    ob.Execute("Alter Table Sales_Detail Add Item_Detail Nvarchar(100) default ''  ", cn)
                End If
            End If
            If ob.ExeTbl("Quality_master", cn) = True Then
                If ob.CheckField("Department_Id", "Quality_master", cn) = False Then
                    ob.Execute("Alter Table Quality_master Add Department_Id int ", cn)
                End If
            End If
            If ob.ExeTbl("Member_master", cn) = True Then
                If ob.CheckField("Department_Id", "Member_master", cn) = False Then
                    ob.Execute("Alter Table Member_master Add Department_Id int ", cn)
                End If
            End If
            If ob.ExeTbl("Account_master", cn) = True Then
                If ob.CheckField("Department_Id", "Account_master", cn) = False Then
                    ob.Execute("Alter Table Account_master Add Department_Id int ", cn)
                End If
            End If
            If ob.ExeTbl("KVN_MAIN", cn) = True Then
                If ob.CheckField("Freight_Main", "KVN_MAIN", cn) = False Then
                    ob.Execute("Alter Table KVN_MAIN Add Freight_Main float default 0 ", cn)
                End If
            End If
            If ob.ExeTbl("Issue_main", cn) = True Then
                If ob.CheckField("Debit_Account_Id", "Issue_main", cn) = False Then
                    ob.Execute("Alter Table Issue_main Add Debit_Account_Id int  default 0  ", cn)
                End If
            End If
            If ob.ExeTbl("Issue_main", cn) = True Then
                If ob.CheckField("Credit_Account_Id", "Issue_main", cn) = False Then
                    ob.Execute("Alter Table Issue_main Add Credit_Account_Id int  default 0  ", cn)
                End If
            End If

            If ob.ExeTbl("Department_master", cn) = True Then
                If ob.CheckField("Account_Effect", "Department_master", cn) = False Then
                    ob.Execute("Alter Table Department_master Add Account_Effect Bit default 0  ", cn)
                    ob.Execute("Update Department_Master set Account_Effect=0", cn)
                End If
            End If

            If ob.ExeTbl("Dividend_Payment_Main", cn) = True Then
                If ob.CheckField("Credit_Account_Id", "Dividend_Payment_Main", cn) = False Then
                    ob.Execute("Alter Table Dividend_Payment_Main Add Credit_Account_Id int default 0  ", cn)
                End If
                If ob.CheckField("Debit_Account_Id", "Dividend_Payment_Main", cn) = False Then
                    ob.Execute("Alter Table Dividend_Payment_Main Add Debit_Account_Id int default 0  ", cn)
                End If
            End If
            If ob.ExeTbl("Addjustment_Main", cn) = True Then
                If ob.CheckField("Edit_User_Name", "Addjustment_Main", cn) = False Then
                    ob.Execute("Alter Table Addjustment_Main Add eDIT_uSER_nAME NVARCHAR(50)", cn)
                End If
            End If
            If ob.ExeTbl("Addjustment_Detail", cn) = True Then
                If ob.CheckField("Edit_User_Name", "Addjustment_Detail", cn) = False Then
                    ob.Execute("Alter Table Addjustment_Detail Add Edit_User_Name NVARCHAR(50)", cn)
                End If
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Function sqlAgent_Interest_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Agent_Interest_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Agent_Interest_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_ID nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Member_Id Bigint," & vbCrLf
            sql = sql & " Account_Ext nvarchar(1)," & vbCrLf
            sql = sql & " Column_id int," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Commission_Amount Float," & vbCrLf
            sql = sql & " Bachat_Amount Float" & vbCrLf
            'sql = sql & " Primary Key (Company_Id,Doc_no,sr_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlDividend_Payment_Detail(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Dividend_Payment_DEtail") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Dividend_Payment_DEtail"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Sr_no int," & vbCrLf
            sql = sql & " Year_ID nvarchar(9)," & vbCrLf
            sql = sql & " Share_Qnty float," & vbCrLf
            sql = sql & " Share_1_Qnty float," & vbCrLf
            sql = sql & " Dividend_Rate float," & vbCrLf
            sql = sql & " Dividend_Amt Float," & vbCrLf
            sql = sql & " Dividend_Amt_1 Float," & vbCrLf
            sql = sql & " Net_Dividend Float," & vbCrLf
            sql = sql & " Savings_Transfer Bit," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_no,sr_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlDividend_Payment_main(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Dividend_Payment_main") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Dividend_Payment_main"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " member_Id bigint," & vbCrLf
            sql = sql & " Remarks nvarchar(500)," & vbCrLf
            sql = sql & " Doc_Amt float," & vbCrLf
            sql = sql & " Savings_Transfer Bit," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlDividend_Payment_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Dividend_Payment_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Dividend_Payment_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " member_Id bigint," & vbCrLf
            sql = sql & " Remarks nvarchar(500)," & vbCrLf
            sql = sql & " Share_Qnty float," & vbCrLf
            sql = sql & " Share_Amt float," & vbCrLf
            sql = sql & " Doc_Amt Float," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlDividend_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Dividend_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Dividend_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " member_id bigint," & vbCrLf
            sql = sql & " Share_Qnty float," & vbCrLf
            sql = sql & " Share_Amt float," & vbCrLf
            sql = sql & " Rate float," & vbCrLf
            sql = sql & " Div_Amt float," & vbCrLf
            sql = sql & " Pay_Date DAtetime," & vbCrLf
            sql = sql & " Share_1_Qnty float," & vbCrLf
            sql = sql & " DIV_Amt1 Float," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Member_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlGold_Return_Detail(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Gold_Return_Detail") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Gold_Return_Detail"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Loan_no Bigint," & vbCrLf
            sql = sql & " Sr_No Int," & vbCrLf
            sql = sql & " Item_Id int," & vbCrLf
            sql = sql & " Quantity float," & vbCrLf
            sql = sql & " Gross_Weight Float," & vbCrLf
            sql = sql & " Net_Weight Float," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_ID,Doc_Type,Doc_no,Sr_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlMember_Opening_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Member_Opening_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Member_Opening_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Certi_No Bigint," & vbCrLf
            sql = sql & " Open_Qnty Float," & vbCrLf
            sql = sql & " Open_Amt Float," & vbCrLf
            sql = sql & " Memb_Date datetime," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Member_Id,Certi_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlGold_Return_main(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Gold_Return_main") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Gold_Return_main"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Loan_no Bigint," & vbCrLf
            sql = sql & " Remarks nvarchar(200)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Doc_type,Doc_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlExpense_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Expense_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Expense_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Loan_no Bigint," & vbCrLf
            sql = sql & " Member_Id BigInt," & vbCrLf
            sql = sql & " Account_Ext nvarchar(1)," & vbCrLf
            sql = sql & " Expense_Id int," & vbCrLf
            sql = sql & " Expence_Amount Float," & vbCrLf
            sql = sql & " Remarks nvarchar(200)," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Notice_Id int," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Doc_type,Doc_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlLoan_Opening_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Loan_Opening_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Loan_Opening_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Loan_no Bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Member_Id BigInt," & vbCrLf
            sql = sql & " Account_Ext nvarchar(1)," & vbCrLf
            sql = sql & " Tharav_No nvarchar(20)," & vbCrLf
            sql = sql & " Tharav_Date Datetime," & vbCrLf
            sql = sql & " File_No nvarchar(20)," & vbCrLf
            sql = sql & " Period Float," & vbCrLf
            sql = sql & " Percentage Float ," & vbCrLf
            sql = sql & " Due_Date Datetime," & vbCrLf
            sql = sql & " Over_Due Float ," & vbCrLf
            sql = sql & " Over_Due_Panelty Float," & vbCrLf
            sql = sql & " Column_Id int ," & vbCrLf
            sql = sql & " Amount Float," & vbCrLf
            sql = sql & " Advance_Installment Float," & vbCrLf
            sql = sql & " Jamin_1_Id BigInt," & vbCrLf
            sql = sql & " Jamin_2_Id BigInt," & vbCrLf
            sql = sql & " Jamin_3_Id BigInt," & vbCrLf
            sql = sql & " Detail Nvarchar(2000)," & vbCrLf
            sql = sql & " Loan_Opening Float," & vbCrLf
            sql = sql & " Over_Due_Interest_Opening Float," & vbCrLf
            sql = sql & " Over_Due_Penalty_Opening Float," & vbCrLf
            sql = sql & " Paid_Amount Float ," & vbCrLf
            sql = sql & " Submit_Doccument nvarchar(1)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Loan_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlSaving_Member_Opening_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Saving_Member_Opening_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Saving_Member_Opening_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Member_Id BigInt," & vbCrLf
            sql = sql & " Account_Ext nvarchar(1)," & vbCrLf
            sql = sql & " Column_Id int ," & vbCrLf
            sql = sql & " dr_opening Float," & vbCrLf
            sql = sql & " cr_opening Float," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Member_Id,Account_Ext,Column_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlFund_Account_Opening_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Fund_Account_Opening_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Fund_Account_Opening_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Account_Id BigInt," & vbCrLf
            sql = sql & " dr_opening Float default 0," & vbCrLf
            sql = sql & " cr_opening Float default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Account_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlSuppli_Account_Opening_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Suppli_Account_Opening_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Suppli_Account_Opening_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Account_Id BigInt," & vbCrLf
            sql = sql & " dr_opening Float default 0," & vbCrLf
            sql = sql & " cr_opening Float default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Account_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlFund_Party_Opening_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Fund_Party_Opening_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Fund_Party_Opening_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Account_Id BigInt," & vbCrLf
            sql = sql & " Party_Id BigInt," & vbCrLf
            sql = sql & " dr_opening Float default 0," & vbCrLf
            sql = sql & " cr_opening Float default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Account_Id,Party_id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlSaving_Interest_data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Saving_Interest_data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Saving_Interest_data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Date datetime," & vbCrLf
            sql = sql & " Member_Id BigInt," & vbCrLf
            sql = sql & " Account_Ext nvarchar(1)," & vbCrLf
            sql = sql & " Column_Id int ," & vbCrLf
            sql = sql & " Doc_no bigint," & vbCrLf
            sql = sql & " amount Float," & vbCrLf
            sql = sql & " Posting_Date Datetime," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            'sql = sql & " Primary Key (Company_Id,Year_id,Member_Id,Account_Ext,Column_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlSaving_Member_Ledger(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Saving_Member_Ledger") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Saving_Member_Ledger"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Member_Id BigInt," & vbCrLf
            sql = sql & " Account_Ext nvarchar(1)," & vbCrLf
            sql = sql & " Column_Id int ," & vbCrLf
            sql = sql & " Doc_Date datetime," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_no bigint," & vbCrLf
            sql = sql & " Remarks nvarchar(500)," & vbCrLf
            sql = sql & " Credit_Amt Float default 0," & vbCrLf
            sql = sql & " Debit_amt Float default 0" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlSaving_Running_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Saving_Running_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Saving_Running_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Member_Id BigInt," & vbCrLf
            sql = sql & " Account_Ext nvarchar(1)," & vbCrLf
            sql = sql & " Column_Id int ," & vbCrLf
            sql = sql & " Opening_balance Float default 0," & vbCrLf
            sql = sql & " Credit_Amount Float default 0," & vbCrLf
            sql = sql & " Debit_Amount Float default 0," & vbCrLf
            sql = sql & " Balance_Amount Float default 0" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlLoan_Due_Ledger(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Loan_Due_Ledger") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Loan_Due_Ledger"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Loan_no Bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Member_Id BigInt," & vbCrLf
            sql = sql & " Account_Ext nvarchar(1)," & vbCrLf
            sql = sql & " Period Float," & vbCrLf
            sql = sql & " Percentage Float ," & vbCrLf
            sql = sql & " Due_Date Datetime," & vbCrLf
            sql = sql & " Column_Id int ," & vbCrLf
            sql = sql & " Jamin_1_Id BigInt," & vbCrLf
            sql = sql & " Jamin_2_Id BigInt," & vbCrLf
            sql = sql & " Jamin_3_Id BigInt," & vbCrLf
            sql = sql & " Loan_Amount Float," & vbCrLf
            sql = sql & " Interest_Amount Float ," & vbCrLf
            sql = sql & " Penalty_Amount Float," & vbCrLf
            sql = sql & " Over_Due_Interest Float," & vbCrLf
            sql = sql & " Over_due_Penalty Float," & vbCrLf
            sql = sql & " Total_Interest Float," & vbCrLf
            sql = sql & " Balance_Amount Float," & vbCrLf
            sql = sql & " Advance_OverDue Float ," & vbCrLf
            sql = sql & " Last_Receipt_Date Datetime," & vbCrLf
            sql = sql & " Primary Key (Company_Id,Loan_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlLoan_Over_Due_Report(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Loan_Over_Due_Report") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Loan_Over_Due_Report"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Loan_no Bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Member_Id BigInt," & vbCrLf
            sql = sql & " Account_Ext nvarchar(1)," & vbCrLf
            sql = sql & " Period Float," & vbCrLf
            sql = sql & " Percentage Float ," & vbCrLf
            sql = sql & " Due_Date Datetime," & vbCrLf
            sql = sql & " Column_Id int ," & vbCrLf
            sql = sql & " Jamin_1_Id BigInt," & vbCrLf
            sql = sql & " Jamin_2_Id BigInt," & vbCrLf
            sql = sql & " Jamin_3_Id BigInt," & vbCrLf
            sql = sql & " Loan_Amount Float," & vbCrLf
            sql = sql & " Paid_Amount Float ," & vbCrLf
            sql = sql & " Received_Amounts Float," & vbCrLf
            sql = sql & " Received_Interest Float," & vbCrLf
            sql = sql & " Balance_Amount Float," & vbCrLf
            sql = sql & " Balance_Interest Float," & vbCrLf
            sql = sql & " Primary Key (Company_Id,Loan_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlInterest_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Interest_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Interest_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Interest_Date Datetime," & vbCrLf
            sql = sql & " Loan_no Bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Interest_From Datetime," & vbCrLf
            sql = sql & " Interest_To Datetime," & vbCrLf
            sql = sql & " Interest_Days Float," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Member_Id BigInt," & vbCrLf
            sql = sql & " Account_Ext nvarchar(1)," & vbCrLf
            sql = sql & " Loan_Amount Float," & vbCrLf
            sql = sql & " Interest_Amount Float," & vbCrLf
            sql = sql & " Penalty_Amount Float," & vbCrLf
            sql = sql & " Over_Due_Interest Float," & vbCrLf
            sql = sql & " Over_Due_Penalty Float," & vbCrLf
            sql = sql & " Total_Interest Float," & vbCrLf
            sql = sql & " Balance_Amount Float ," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Interest_Date,Loan_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlCC_Ledger(ByVal cn As SqlConnection, Optional ByVal tblname As String = "CC_Ledger") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "CC_Ledger"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Loan_no Bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No Bigint ," & vbCrLf
            sql = sql & " Pay_Amt Float," & vbCrLf
            sql = sql & " Rec_Amt Float," & vbCrLf
            sql = sql & " Pay_Int Float," & vbCrLf
            sql = sql & " Pan_Int Float," & vbCrLf
            sql = sql & " Rec_Int Float," & vbCrLf
            sql = sql & " Rec_ODInt Float," & vbCrLf
            sql = sql & " Pay_ODInt Float," & vbCrLf
            sql = sql & " Rec_Bal Float," & vbCrLf
            sql = sql & " Pay_Bal Float," & vbCrLf
            sql = sql & " Rec_Prod Float," & vbCrLf
            sql = sql & " Pay_Prod Float," & vbCrLf
            sql = sql & " ROD_Prod Float," & vbCrLf
            sql = sql & " POD_Prod Float," & vbCrLf
            sql = sql & " Days Float," & vbCrLf
            sql = sql & " ODDays Float," & vbCrLf
            sql = sql & " POD_Int Float," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Loan_no,Doc_type,Doc_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlPassing_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Passing_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Passing_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Loan_no Bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " member_id BigInt," & vbCrLf
            sql = sql & " Account_Ext nchar(1)," & vbCrLf
            sql = sql & " Tharav_no nvarchar(20)," & vbCrLf
            sql = sql & " Tharav_Date Datetime," & vbCrLf
            sql = sql & " File_no nvarchar(20)," & vbCrLf
            sql = sql & " Period float," & vbCrLf
            sql = sql & " Percentage float," & vbCrLf
            sql = sql & " Due_Date datetime," & vbCrLf
            sql = sql & " Column_Id int ," & vbCrLf
            sql = sql & " Amount float ," & vbCrLf
            sql = sql & " Jamin_1_Id bigint," & vbCrLf
            sql = sql & " Jamin_2_Id bigint," & vbCrLf
            sql = sql & " Jamin_3_Id bigint," & vbCrLf
            sql = sql & " Submit_Doccument nchar(1)," & vbCrLf
            sql = sql & " Remarks nvarchar(200)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Loan_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlLoan_Ledger(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Loan_Ledger") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Loan_Ledger"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Loan_no Bigint," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_DAte datetime," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No Bigint," & vbCrLf
            sql = sql & " Payment_Amount Float default 0," & vbCrLf
            sql = sql & " Expence_Amount Float default 0," & vbCrLf
            sql = sql & " Interest_Amount Float default 0," & vbCrLf
            sql = sql & " Over_Due_Interest float default 0," & vbCrLf
            sql = sql & " Installment_Amount float default 0," & vbCrLf
            sql = sql & " Received_Interest Float default 0," & vbCrLf
            sql = sql & " Received_Penalty Float default 0," & vbCrLf
            sql = sql & " Received_Over_Due_Interest float default 0," & vbCrLf
            sql = sql & " Received_Over_Due_Penalty Float default 0," & vbCrLf
            sql = sql & " Received_Amount Float default 0," & vbCrLf
            sql = sql & " Remarks Nvarchar(500)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Loan_no,Year_Id,Doc_Type,Doc_Date,Doc_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function

    Public Function sqlLoan_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Loan_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Loan_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Loan_no Bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " member_id BigInt," & vbCrLf
            sql = sql & " Account_Ext nchar(1)," & vbCrLf
            sql = sql & " Tharav_no nvarchar(20)," & vbCrLf
            sql = sql & " Tharav_Date Datetime," & vbCrLf
            sql = sql & " File_no nvarchar(20)," & vbCrLf
            sql = sql & " Period float," & vbCrLf
            sql = sql & " Percentage float," & vbCrLf
            sql = sql & " Due_Date datetime," & vbCrLf
            sql = sql & " Column_Id int ," & vbCrLf
            sql = sql & " Jamin_1_Id bigint," & vbCrLf
            sql = sql & " Jamin_2_Id bigint," & vbCrLf
            sql = sql & " Jamin_3_Id bigint," & vbCrLf
            sql = sql & " Submit_Doccument nchar(1)," & vbCrLf
            sql = sql & " Remarks nvarchar(200)," & vbCrLf
            sql = sql & " Loan_Amount float ," & vbCrLf
            sql = sql & " Paid_Amount float ," & vbCrLf
            sql = sql & " Advance_Installment float ," & vbCrLf
            sql = sql & " Balance_Amount float ," & vbCrLf
            sql = sql & " Over_Due_Interest_Balance float ," & vbCrLf
            sql = sql & " Over_Due_Penalty_Balance float ," & vbCrLf
            sql = sql & " Installment_Amount float ," & vbCrLf
            sql = sql & " Received_Interest float ," & vbCrLf
            sql = sql & " Received_Penalty float ," & vbCrLf
            sql = sql & " Received_Over_Due_Interest float ," & vbCrLf
            sql = sql & " Received_Over_Due_Penalty float ," & vbCrLf
            sql = sql & " Received_Old_Over_Due_Interest float ," & vbCrLf
            sql = sql & " Received_Old_Over_Due_Penalty float ," & vbCrLf
            sql = sql & " Received_Amount float ," & vbCrLf
            sql = sql & " Renew_Date Datetime ," & vbCrLf
            sql = sql & " Stop_Payment Bit ," & vbCrLf
            sql = sql & " Stop_Date DAtetime ," & vbCrLf
            sql = sql & " Loan_Claimed Bit ," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Loan_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlPayment_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Payment_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Payment_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " doc_no int," & vbCrLf
            sql = sql & " Loan_no Bigint," & vbCrLf
            sql = sql & " member_id BigInt," & vbCrLf
            sql = sql & " Account_Ext nchar(1)," & vbCrLf
            sql = sql & " Tharav_no nvarchar(20)," & vbCrLf
            sql = sql & " Tharav_Date Datetime," & vbCrLf
            sql = sql & " File_no nvarchar(20)," & vbCrLf
            sql = sql & " Period float," & vbCrLf
            sql = sql & " Percentage float," & vbCrLf
            sql = sql & " Due_Date datetime," & vbCrLf
            sql = sql & " Column_Id int ," & vbCrLf
            sql = sql & " Jamin_1_Id bigint," & vbCrLf
            sql = sql & " Jamin_2_Id bigint," & vbCrLf
            sql = sql & " Jamin_3_Id bigint," & vbCrLf
            sql = sql & " Submit_Doccument nchar(1)," & vbCrLf
            sql = sql & " Remarks nvarchar(200)," & vbCrLf
            sql = sql & " Amount float ," & vbCrLf
            sql = sql & " Payment_Amount float," & vbCrLf
            sql = sql & " Advance_Installment float," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Loan_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlClaim_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Claim_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Claim_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Loan_no Bigint," & vbCrLf
            sql = sql & " Remarks nvarchar(200)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Loan_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlReceipt_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Receipt_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Receipt_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Loan_No bigint," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Renewal_Date datetime," & vbCrLf
            sql = sql & " Final Bit," & vbCrLf
            sql = sql & " Installment_Amount float," & vbCrLf
            sql = sql & " Received_Interest float," & vbCrLf
            sql = sql & " Received_Penalty float," & vbCrLf
            sql = sql & " Received_Over_Due_Interest float," & vbCrLf
            sql = sql & " Received_Over_Due_Penalty float," & vbCrLf
            sql = sql & " Old_Over_Due_Interest float," & vbCrLf
            sql = sql & " Old_Over_Due_Penalty float," & vbCrLf
            sql = sql & " Received_Amount float," & vbCrLf
            sql = sql & " Actual_Interest float," & vbCrLf
            sql = sql & " Actual_Penalty float," & vbCrLf
            sql = sql & " Actual_Over_Due_Interest float," & vbCrLf
            sql = sql & " Actual_Over_Due_Penalty float," & vbCrLf
            sql = sql & " C_B_J nvarchar(1)," & vbCrLf
            sql = sql & " Cheque_No nvarchar(100)," & vbCrLf
            sql = sql & " Advance_OverDue float," & vbCrLf
            sql = sql & " Laps_Interest float," & vbCrLf
            sql = sql & " Laps_Penalty float," & vbCrLf
            sql = sql & " Laps_Over_Due_Interest float," & vbCrLf
            sql = sql & " Laps_Over_Due_Penalty float," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Doc_Type,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlTransaction_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Transaction_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Transaction_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Month_year Datetime," & vbCrLf
            sql = sql & " Add_Ded_Id nvarchar(10)," & vbCrLf
            sql = sql & " Employee_Id bigint," & vbCrLf
            sql = sql & " Amount Float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " Ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)"
            sql = sql & " Primary Key (Company_Id,Month_year,Add_Ded_Id,Employee_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlLeave_Data_Old(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Leave_Data_Old") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Leave_Data_Old"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Month_year Datetime," & vbCrLf
            sql = sql & " Add_Ded_Id nvarchar(10)," & vbCrLf
            sql = sql & " Employee_Id bigint," & vbCrLf
            sql = sql & " Leave_A Float default 0," & vbCrLf
            sql = sql & " Leave_D Float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " Ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)"
            sql = sql & " Primary Key (Company_Id,Month_year,Add_Ded_Id,Employee_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlPaid_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Paid_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Paid_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Month_year Datetime," & vbCrLf
            sql = sql & " Employee_Id bigint," & vbCrLf
            sql = sql & " Add_Ded_Id nvarchar(10)," & vbCrLf
            sql = sql & " Working_Days Float default 0," & vbCrLf
            sql = sql & " Amount Float default 0," & vbCrLf
            sql = sql & " Pf_Amt Float default 0," & vbCrLf
            sql = sql & " Fpf_Amt Float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " Ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)"
            sql = sql & " Primary Key (Company_Id,Month_year,Add_Ded_Id,Employee_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlParameter_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Parameter_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Parameter_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Month_year Datetime," & vbCrLf
            sql = sql & " Month_Days Float default 0," & vbCrLf
            sql = sql & " Working_Days Float default 0," & vbCrLf
            sql = sql & " Total_Pf Float default 0," & vbCrLf
            sql = sql & " Pf_Percentage Float default 0," & vbCrLf
            sql = sql & " Fpf_Percentage Float default 0," & vbCrLf
            sql = sql & " ESIC_Percentage Float default 0," & vbCrLf
            sql = sql & " ESIC_Limit Float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Month_year)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlDa_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "da_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "da_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Month_year Datetime," & vbCrLf
            sql = sql & " RATE Float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " Ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Month_year)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlLeave_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Leave_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Leave_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Employee_Id bigint," & vbCrLf
            sql = sql & " Leave_Id Nvarchar(10)," & vbCrLf
            sql = sql & " Present_Hrs Float default 0," & vbCrLf
            sql = sql & " OT_Hrs Float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " Ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)"
            sql = sql & " Primary Key (Company_Id,Doc_Date,Leave_Id,Employee_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlFixd_Receipt_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Fixd_Receipt_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Fixd_Receipt_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Period Float default 0," & vbCrLf
            sql = sql & " Percentage Float default 0," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Amount Float default 0," & vbCrLf
            sql = sql & " Due_Date Datetime," & vbCrLf
            sql = sql & " Due_Amt Float default 0," & vbCrLf
            sql = sql & " Remarks Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Last_Interest_Date datetime," & vbCrLf
            sql = sql & " Trn_App bit default 0," & vbCrLf
            sql = sql & " Trn_App_User_Name nvarchar(20)default ''," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlRojmel(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Rojmel") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Rojmel"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Account_Id Bigint," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Sr_No int," & vbCrLf
            sql = sql & " Party_id Bigint," & vbCrLf
            sql = sql & " Remarks Nvarchar(400) default ''," & vbCrLf
            sql = sql & " Credit_Amt Float default 0," & vbCrLf
            sql = sql & " JK_Credit_Amt Float default 0," & vbCrLf
            sql = sql & " Debit_amt Float default 0," & vbCrLf
            sql = sql & " JK_Debit_amt Float default 0," & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlNew_Rojmel(ByVal cn As SqlConnection, Optional ByVal tblname As String = "New_Rojmel") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "New_Rojmel"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Sr_No int," & vbCrLf
            sql = sql & " Db_Doc_No Nvarchar(30)default ''," & vbCrLf
            sql = sql & " Debit_Details Nvarchar(4000)default ''," & vbCrLf
            sql = sql & " Cash_Debit Float default 0," & vbCrLf
            sql = sql & " JK_Debit Float default 0," & vbCrLf
            sql = sql & " Debit_Total Float default 0," & vbCrLf
            sql = sql & " Debit_B_U bit default 0," & vbCrLf
            sql = sql & " Cr_Doc_No Nvarchar(30)default ''," & vbCrLf
            sql = sql & " Credit_Details Nvarchar(4000)default ''," & vbCrLf
            sql = sql & " Cash_Credit Float default 0," & vbCrLf
            sql = sql & " JK_Credit Float default 0," & vbCrLf
            sql = sql & " Credit_Total Float default 0," & vbCrLf
            sql = sql & " Credit_B_U bit default 0" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlRojmal_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Rojmal_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Rojmal_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Book_Id int," & vbCrLf
            sql = sql & " Account_Id Bigint," & vbCrLf
            sql = sql & " Party_id Bigint," & vbCrLf
            sql = sql & " Due_Date Datetime," & vbCrLf
            sql = sql & " Due_Amt Float default 0," & vbCrLf
            sql = sql & " Remarks Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Receipt_Amt Float default 0," & vbCrLf
            sql = sql & " Payment_Amt Float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Doc_type,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlFinal_Rojmal_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Final_Rojmal_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Final_Rojmal_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Book_Id int," & vbCrLf
            sql = sql & " Account_Id Bigint," & vbCrLf
            sql = sql & " Party_id Bigint," & vbCrLf
            'sql = sql & " Due_Date Datetime," & vbCrLf
            'sql = sql & " Due_Amt Float default 0," & vbCrLf
            sql = sql & " Remarks Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Receipt_Amt Float default 0," & vbCrLf
            sql = sql & " Payment_Amt Float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Doc_type,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlSuppli_Rojmal_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Suppli_Rojmal_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Suppli_Rojmal_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Book_Id int," & vbCrLf
            sql = sql & " Account_Id Bigint," & vbCrLf
            sql = sql & " Remarks Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Receipt_Amt Float default 0," & vbCrLf
            sql = sql & " Payment_Amt Float default 0," & vbCrLf
            sql = sql & " Party_id Bigint," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Doc_type,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlJournal_main(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Journal_main") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Journal_main"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Remarks Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Doc_type,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlTB_Main(ByVal cn As SqlConnection, Optional ByVal tblname As String = "TB_Main") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "TB_Main"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            'sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Remarks Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Doc_No)" & vbCrLf
            'sql = sql & " Primary Key (Company_Id,Year_Id,Doc_type,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlOpening_Stock_Main(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Opening_Stock_Main") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Opening_Stock_Main"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            'sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Account_id bigint," & vbCrLf
            sql = sql & " Remarks Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Doc_No)" & vbCrLf
            'sql = sql & " Primary Key (Company_Id,Year_Id,Doc_type,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlClosing_Stock_Main(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Closing_Stock_Main") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Closing_Stock_Main"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            'sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Account_id bigint," & vbCrLf
            sql = sql & " Remarks Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Doc_No)" & vbCrLf
            'sql = sql & " Primary Key (Company_Id,Year_Id,Doc_type,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlBank_Main(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Bank_Main") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Bank_Main"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Book_id int," & vbCrLf
            sql = sql & " Net_Amt Float default 0," & vbCrLf
            sql = sql & " Cheque_No nvarchar(20)default ''," & vbCrLf
            sql = sql & " Remarks Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            'sql = sql & " Primary Key (Company_Id,Year_Id,Doc_No)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Doc_type,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlBank_Detail(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Bank_Detail") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Bank_Detail"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Sr_No bigint," & vbCrLf
            sql = sql & " Account_id bigint," & vbCrLf
            sql = sql & " Party_id bigint," & vbCrLf
            sql = sql & " Remarks Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Receipt_Amt Float default 0," & vbCrLf
            sql = sql & " Payment_Amt Float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            'sql = sql & " Primary Key (Company_Id,Year_Id,Doc_No,sr_no)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Doc_type,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlOpening_Stock_Detail(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Opening_Stock_Detail") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Opening_Stock_Detail"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            'sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Sr_no int," & vbCrLf
            sql = sql & " Account_id bigint ," & vbCrLf
            sql = sql & " Payment_Amt float default 0," & vbCrLf
            sql = sql & " Bhandar_Id int,"
            'sql = sql & " Bill_No Bigint," & vbCrLf
            'sql = sql & " Bill_Date Datetime," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Doc_No,sr_no)" & vbCrLf
            'sql = sql & " Primary Key (Company_Id,Year_Id,Doc_type,Doc_No,sr_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlClosing_Stock_Detail(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Closing_Stock_Detail") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Closing_Stock_Detail"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            'sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Sr_no int," & vbCrLf
            sql = sql & " Account_id bigint ," & vbCrLf
            sql = sql & " Receipt_Amt float default 0," & vbCrLf
            sql = sql & " Payment_Amt float default 0," & vbCrLf
            sql = sql & " Bhandar_Id int,"
            sql = sql & " C_D Nvarchar(1) default '',"
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Doc_No,sr_no)" & vbCrLf
            'sql = sql & " Primary Key (Company_Id,Year_Id,Doc_type,Doc_No,sr_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlTB_Detail(ByVal cn As SqlConnection, Optional ByVal tblname As String = "TB_Detail") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "TB_Detail"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            'sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Sr_no int," & vbCrLf
            sql = sql & " Account_id bigint ," & vbCrLf
            sql = sql & " Bhandar_id int ," & vbCrLf
            'sql = sql & " Remarks Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Receipt_Amt float default 0," & vbCrLf
            sql = sql & " Payment_Amt float default 0," & vbCrLf
            sql = sql & " C_D nvarchar(1) default '',"
            'sql = sql & " Bill_No Bigint," & vbCrLf
            'sql = sql & " Bill_Date Datetime," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Doc_No,sr_no)" & vbCrLf
            'sql = sql & " Primary Key (Company_Id,Year_Id,Doc_type,Doc_No,sr_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlJournal_Detail(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Journal_Detail") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Journal_Detail"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Sr_no int," & vbCrLf
            sql = sql & " Account_id bigint ," & vbCrLf
            sql = sql & " Party_id bigint ," & vbCrLf
            sql = sql & " Remarks Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Receipt_Amt float default 0," & vbCrLf
            sql = sql & " Payment_Amt float default 0," & vbCrLf
            sql = sql & " C_D nvarchar(1) default '',"
            sql = sql & " Bill_No Bigint," & vbCrLf
            sql = sql & " Bill_Date Datetime," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Doc_type,Doc_No,sr_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlPurchase_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Purchase_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Purchase_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Bill_No nvarchar(20)default ''," & vbCrLf
            sql = sql & " Bill_Date Datetime," & vbCrLf
            sql = sql & " Book_id int ," & vbCrLf
            sql = sql & " Account_id bigint ," & vbCrLf
            sql = sql & " Party_id bigint ," & vbCrLf
            sql = sql & " Column_id int ," & vbCrLf
            sql = sql & " Sub_Column_Id int," & vbCrLf
            sql = sql & " Remarks Nvarchar(500) default ''," & vbCrLf
            sql = sql & " tax_stru_id int," & vbCrLf
            sql = sql & " Doc_Amt float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Doc_type,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlInvestment_Receipt_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Investment_Receipt_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Investment_Receipt_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Period Float default 0," & vbCrLf
            sql = sql & " Percentage Float default 0," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Amount Float default 0," & vbCrLf
            sql = sql & " Due_Date Datetime," & vbCrLf
            sql = sql & " Due_Amt Float default 0," & vbCrLf
            sql = sql & " Remarks Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Last_Interest_Date datetime," & vbCrLf
            sql = sql & " Receipt_No Nvarchar(20) default ''," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlKamDhenu_Receipt_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "KamDhenu_Receipt_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "KamDhenu_Receipt_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Period Float default 0," & vbCrLf
            sql = sql & " Percentage Float default 0," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Amount Float default 0," & vbCrLf
            sql = sql & " Due_Date Datetime," & vbCrLf
            'sql = sql & " Due_Amt Float default 0," & vbCrLf
            sql = sql & " Remarks Nvarchar(500) default ''," & vbCrLf
            'sql = sql & " Last_Interest_Date datetime," & vbCrLf
            'sql = sql & " Trn_App bit default 0," & vbCrLf
            'sql = sql & " Trn_App_User_Name nvarchar(20)default ''," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlFixd_Interest_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Fixd_Interest_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Fixd_Interest_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Fixd_No bigint," & vbCrLf
            sql = sql & " Interest_date Datetime," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Interest_From Datetime," & vbCrLf
            sql = sql & " Interest_To DAtetime," & vbCrLf
            sql = sql & " Interest_Days bigint," & vbCrLf
            sql = sql & " Fixd_Amt Float default 0," & vbCrLf
            sql = sql & " Interest_Amt Float default 0," & vbCrLf
            sql = sql & " Interest_Paid Bit Default 0," & vbCrLf
            sql = sql & " Reserve_Pay_No Bigint ," & vbCrLf
            sql = sql & " Reserve_Pay_Date Datetime," & vbCrLf
            sql = sql & " Pay_No bigint," & vbCrLf
            sql = sql & " Pay_Date Datetime," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Fixd_No,Interest_date)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlInvestment_Interest_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Investment_Interest_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Investment_Interest_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Fixd_No bigint," & vbCrLf
            sql = sql & " Interest_date Datetime," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Interest_From Datetime," & vbCrLf
            sql = sql & " Interest_To DAtetime," & vbCrLf
            sql = sql & " Interest_Days bigint," & vbCrLf
            sql = sql & " Fixd_Amt Float default 0," & vbCrLf
            sql = sql & " Interest_Amt Float default 0," & vbCrLf
            sql = sql & " Interest_Paid Bit Default 0," & vbCrLf
            sql = sql & " Reserve_Pay_No Bigint ," & vbCrLf
            sql = sql & " Reserve_Pay_Date Datetime," & vbCrLf
            sql = sql & " Pay_No bigint," & vbCrLf
            sql = sql & " Pay_Date Datetime," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Fixd_No,Interest_date)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlKamDhenu_Interest_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "KamDhenu_Interest_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "KamDhenu_Interest_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Fixd_No bigint," & vbCrLf
            sql = sql & " Interest_date Datetime," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Interest_From Datetime," & vbCrLf
            sql = sql & " Interest_To DAtetime," & vbCrLf
            sql = sql & " Interest_Days bigint," & vbCrLf
            sql = sql & " Fixd_Amt Float default 0," & vbCrLf
            sql = sql & " Interest_Amt Float default 0," & vbCrLf
            sql = sql & " Interest_Paid Bit Default 0," & vbCrLf
            sql = sql & " Reserve_Pay_No Bigint ," & vbCrLf
            sql = sql & " Reserve_Pay_Date Datetime," & vbCrLf
            sql = sql & " Pay_No bigint," & vbCrLf
            sql = sql & " Pay_Date Datetime," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Fixd_No,Interest_date)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlFixd_Interest_Opening_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Fixd_Interest_Opening_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Fixd_Interest_Opening_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Interest_date Datetime," & vbCrLf
            sql = sql & " Fixd_No bigint," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Interest_From Datetime," & vbCrLf
            sql = sql & " Interest_To DAtetime," & vbCrLf
            sql = sql & " Interest_Days bigint," & vbCrLf
            sql = sql & " Fixd_Amt Float default 0," & vbCrLf
            sql = sql & " Interest_Amt Float default 0," & vbCrLf
            sql = sql & " Interest_Paid Bit Default 0," & vbCrLf
            sql = sql & " Reserve_Pay_No Bigint ," & vbCrLf
            sql = sql & " Reserve_Pay_Date Datetime," & vbCrLf
            sql = sql & " Pay_No bigint," & vbCrLf
            sql = sql & " Pay_Date Datetime," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Fixd_No,Interest_date)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlInvestment_Interest_Opening_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Investment_Interest_Opening_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Investment_Interest_Opening_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Interest_date Datetime," & vbCrLf
            sql = sql & " Fixd_No bigint," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Interest_From Datetime," & vbCrLf
            sql = sql & " Interest_To DAtetime," & vbCrLf
            sql = sql & " Interest_Days bigint," & vbCrLf
            sql = sql & " Fixd_Amt Float default 0," & vbCrLf
            sql = sql & " Interest_Amt Float default 0," & vbCrLf
            sql = sql & " Interest_Paid Bit Default 0," & vbCrLf
            sql = sql & " Reserve_Pay_No Bigint ," & vbCrLf
            sql = sql & " Reserve_Pay_Date Datetime," & vbCrLf
            sql = sql & " Pay_No bigint," & vbCrLf
            sql = sql & " Pay_Date Datetime," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Fixd_No,Interest_date)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlKamDhenu_Interest_Opening_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "KamDhenu_Interest_Opening_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "KamDhenu_Interest_Opening_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Interest_date Datetime," & vbCrLf
            sql = sql & " Fixd_No bigint," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Interest_From Datetime," & vbCrLf
            sql = sql & " Interest_To DAtetime," & vbCrLf
            sql = sql & " Interest_Days bigint," & vbCrLf
            sql = sql & " Fixd_Amt Float default 0," & vbCrLf
            sql = sql & " Interest_Amt Float default 0," & vbCrLf
            sql = sql & " Interest_Paid Bit Default 0," & vbCrLf
            sql = sql & " Reserve_Pay_No Bigint ," & vbCrLf
            sql = sql & " Reserve_Pay_Date Datetime," & vbCrLf
            sql = sql & " Pay_No bigint," & vbCrLf
            sql = sql & " Pay_Date Datetime," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Fixd_No,Interest_date)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlFixd_Interest_Date_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Fixd_Interest_Date_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Fixd_Interest_Date_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " From_Date DAtetime," & vbCrLf
            sql = sql & " To_Date Datetime," & vbCrLf
            sql = sql & " Period Float default 0," & vbCrLf
            sql = sql & " Percentage Float Default 0," & vbCrLf
            sql = sql & " From_Days Bigint," & vbCrLf
            sql = sql & " To_Days Bigint," & vbCrLf
            sql = sql & " Renewal Bit default 0," & vbCrLf
            sql = sql & " Pre_Mature_Interest Float default 0," & vbCrLf
            sql = sql & " Current_Interest Float default 0," & vbCrLf
            sql = sql & " After_Maturity_Interest Float Default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Column_id,from_Date,To_DAte,Period,Percentage,from_Days,To_Days,Renewal)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function sqlInvestment_Interest_Date_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Investment_Interest_Date_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Investment_Interest_Date_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " From_Date DAtetime," & vbCrLf
            sql = sql & " To_Date Datetime," & vbCrLf
            sql = sql & " Period Float default 0," & vbCrLf
            sql = sql & " Percentage Float Default 0," & vbCrLf
            sql = sql & " From_Days Bigint," & vbCrLf
            sql = sql & " To_Days Bigint," & vbCrLf
            sql = sql & " Renewal Bit default 0," & vbCrLf
            sql = sql & " Pre_Mature_Interest Float default 0," & vbCrLf
            sql = sql & " Current_Interest Float default 0," & vbCrLf
            sql = sql & " After_Maturity_Interest Float Default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Column_id,from_Date,To_DAte,Period,Percentage,from_Days,To_Days,Renewal)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function sqlKamDhenu_Interest_Date_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "KamDhenu_Interest_Date_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "KamDhenu_Interest_Date_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " From_Date DAtetime," & vbCrLf
            sql = sql & " To_Date Datetime," & vbCrLf
            sql = sql & " Period Float default 0," & vbCrLf
            sql = sql & " Percentage Float Default 0," & vbCrLf
            sql = sql & " From_Days Bigint," & vbCrLf
            sql = sql & " To_Days Bigint," & vbCrLf
            sql = sql & " Renewal Bit default 0," & vbCrLf
            sql = sql & " Pre_Mature_Interest Float default 0," & vbCrLf
            sql = sql & " Current_Interest Float default 0," & vbCrLf
            sql = sql & " After_Maturity_Interest Float Default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Column_id,from_Date,To_DAte,Period,Percentage,from_Days,To_Days,Renewal)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function sqlTmp_Fixd_Interest_Date_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Tmp_Fixd_Interest_Date_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Tmp_Fixd_Interest_Date_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Sr_no int," & vbCrLf
            sql = sql & " From_Date DAtetime," & vbCrLf
            sql = sql & " To_Date Datetime," & vbCrLf
            sql = sql & " Period Float default 0," & vbCrLf
            sql = sql & " Percentage Float Default 0," & vbCrLf
            sql = sql & " From_Days Bigint," & vbCrLf
            sql = sql & " To_Days Bigint," & vbCrLf
            sql = sql & " Renewal Bit default 0," & vbCrLf
            sql = sql & " Pre_Mature_Interest Float default 0," & vbCrLf
            sql = sql & " Current_Interest Float default 0," & vbCrLf
            sql = sql & " After_Maturity_Interest Float Default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " Year_id nvarchar(9)" & vbCrLf
            'sql = sql & " Primary Key (Company_Id,Column_id,from_Date,To_DAte,Period,Percentage,from_Days,To_Days,Renewal)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlTmp_Fixd_Reserve_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Tmp_Fixd_Reserve_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Tmp_Fixd_Reserve_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table .dbo." & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " doc_no int," & vbCrLf
            sql = sql & " Doc_date DAtetime," & vbCrLf
            sql = sql & " interest_date DAtetime," & vbCrLf
            sql = sql & " Sr_no int," & vbCrLf
            sql = sql & " Member_Id int," & vbCrLf
            sql = sql & " member_Ext nvarchar(1)," & vbCrLf
            sql = sql & " Fixd_No int," & vbCrLf
            sql = sql & " interest_amt Float default 0," & vbCrLf
            sql = sql & " Period int," & vbCrLf
            sql = sql & " Fixd_Amt Float default 0," & vbCrLf
            sql = sql & " Due_Date datetime," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " Year_id nvarchar(9)" & vbCrLf
            'sql = sql & " Primary Key (Company_Id,Column_id,from_Date,To_DAte,Period,Percentage,from_Days,To_Days,Renewal)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlFixd_Interest_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Fixd_Interest_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Fixd_Interest_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Fixd_no bigint," & vbCrLf
            sql = sql & " Interest_date Datetime," & vbCrLf
            sql = sql & " Member_id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Interest_From Datetime," & vbCrLf
            sql = sql & " Interest_To DAtetime," & vbCrLf
            sql = sql & " Interest_Days Float default 0," & vbCrLf
            sql = sql & " Fixd_Amt Float default 0," & vbCrLf
            sql = sql & " Interest_Amt Float default 0," & vbCrLf
            sql = sql & " Old_Interest Float Default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Fixd_no,Interest_Date)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function

    Public Function sqlTmp_Pak_Loan_Interest_Date_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Tmp_Fixd_Interest_Date_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Tmp_Pak_Loan_Interest_Date_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Sr_no int," & vbCrLf
            sql = sql & " From_Date DAtetime," & vbCrLf
            sql = sql & " To_Date Datetime," & vbCrLf
            sql = sql & " From_Pass_Amt Float," & vbCrLf
            sql = sql & " To_Pass_Amt Float," & vbCrLf
            sql = sql & " Interest_Rate Float default 0," & vbCrLf
            sql = sql & " Over_Due_Interest_Rate Float Default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            'sql = sql & " Primary Key (Company_Id,Column_id,from_Date,To_DAte,Period,Percentage,from_Days,To_Days,Renewal)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlTmp_MLoan_Interest_Date_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Tmp_Mloan_Interest_Date_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Tmp_Pak_Loan_Interest_Date_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Sr_no int," & vbCrLf
            sql = sql & " From_Date DAtetime," & vbCrLf
            sql = sql & " To_Date Datetime," & vbCrLf
            sql = sql & " From_Amount Float default 0," & vbCrLf
            sql = sql & " To_Amount Float default 0," & vbCrLf
            sql = sql & " Interest_Rate Float default 0," & vbCrLf
            sql = sql & " Over_Due_Interest_Rate Float Default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            'sql = sql & " Primary Key (Company_Id,Column_id,from_Date,To_DAte,Period,Percentage,from_Days,To_Days,Renewal)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlInvestment_Interest_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Investment_Interest_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Investment_Interest_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Fixd_no bigint," & vbCrLf
            sql = sql & " Interest_date Datetime," & vbCrLf
            sql = sql & " Member_id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Interest_From Datetime," & vbCrLf
            sql = sql & " Interest_To DAtetime," & vbCrLf
            sql = sql & " Interest_Days Float default 0," & vbCrLf
            sql = sql & " Fixd_Amt Float default 0," & vbCrLf
            sql = sql & " Interest_Amt Float default 0," & vbCrLf
            sql = sql & " Old_Interest Float Default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Fixd_no,Interest_Date)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlKamDhenu_Interest_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "KamDhenu_Interest_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "KamDhenu_Interest_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Fixd_no bigint," & vbCrLf
            sql = sql & " Interest_date Datetime," & vbCrLf
            sql = sql & " Member_id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Interest_From Datetime," & vbCrLf
            sql = sql & " Interest_To DAtetime," & vbCrLf
            sql = sql & " Interest_Days Float default 0," & vbCrLf
            sql = sql & " Fixd_Amt Float default 0," & vbCrLf
            sql = sql & " Interest_Amt Float default 0," & vbCrLf
            sql = sql & " Interest_Transfered Float Default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Fixd_no,Interest_Date)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlTmp_Fixd_Interest_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Tmp_Fixd_Interest_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Tmp_Fixd_Interest_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Fixd_no bigint," & vbCrLf
            sql = sql & " Interest_date Datetime," & vbCrLf
            sql = sql & " Member_id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Interest_From Datetime," & vbCrLf
            sql = sql & " Interest_To DAtetime," & vbCrLf
            sql = sql & " Interest_Days Float default 0," & vbCrLf
            sql = sql & " Fixd_Amt Float default 0," & vbCrLf
            sql = sql & " Interest_Amt Float default 0," & vbCrLf
            sql = sql & " Old_Interest Float Default 0," & vbCrLf
            'sql = sql & " Primary Key (Company_Id,Fixd_no,Interest_Date)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlFixd_Stop_payment_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Fixd_Stop_payment_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Fixd_Stop_payment_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Remarks Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlFixd_RESERVE_PAYMENT_DATA(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Fixd_RESERVE_PAYMENT_DATA") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Fixd_RESERVE_PAYMENT_DATA"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Interest_Date Datetime," & vbCrLf
            sql = sql & " Last_Interest_Date datetime," & vbCrLf
            sql = sql & " Fixd_No Bigint," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Interest_Reserve Float default 0," & vbCrLf
            sql = sql & " Interest_Amt Float default 0," & vbCrLf
            sql = sql & " Total_Amt Float default 0," & vbCrLf
            sql = sql & " Renew Bit default 0," & vbCrLf
            sql = sql & " Trn_App bit default 0," & vbCrLf
            sql = sql & " Trn_App_User_Name nvarchar(20)default ''," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlInvestment_RESERVE_PAYMENT_DATA(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Investment_RESERVE_PAYMENT_DATA") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Investment_RESERVE_PAYMENT_DATA"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Interest_Date Datetime," & vbCrLf
            sql = sql & " Last_Interest_Date datetime," & vbCrLf
            sql = sql & " Fixd_No Bigint," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Interest_Reserve Float default 0," & vbCrLf
            sql = sql & " Interest_Amt Float default 0," & vbCrLf
            sql = sql & " Total_Amt Float default 0," & vbCrLf
            sql = sql & " Renew Bit default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlKamDhenu_RESERVE_PAYMENT_DATA(ByVal cn As SqlConnection, Optional ByVal tblname As String = "KamDhenu_RESERVE_PAYMENT_DATA") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "KamDhenu_RESERVE_PAYMENT_DATA"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            'sql = sql & " Interest_Date Datetime," & vbCrLf
            'sql = sql & " Last_Interest_Date datetime," & vbCrLf
            sql = sql & " Fixd_No Bigint," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            'sql = sql & " Interest_Reserve Float default 0," & vbCrLf
            sql = sql & " Interest_Amt Float default 0," & vbCrLf
            'sql = sql & " Total_Amt Float default 0," & vbCrLf
            'sql = sql & " Renew Bit default 0," & vbCrLf
            'sql = sql & " Trn_App bit default 0," & vbCrLf
            'sql = sql & " Trn_App_User_Name nvarchar(20)default ''," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlFixd_Payment_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Fixd_Payment_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Fixd_Payment_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Fixd_No Bigint," & vbCrLf
            sql = sql & " Last_Interest_Date datetime," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Amount Float default 0," & vbCrLf
            sql = sql & " Fixd_Amt Float default 0," & vbCrLf
            sql = sql & " Interest_Reserve Float default 0," & vbCrLf
            sql = sql & " Interest_Amt Float default 0," & vbCrLf
            sql = sql & " Total_Amt Float default 0," & vbCrLf
            sql = sql & " Trn_App bit default 0," & vbCrLf
            sql = sql & " Trn_App_User_Name nvarchar(20)default ''," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlInvestment_Payment_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Investment_Payment_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Investment_Payment_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Fixd_No Bigint," & vbCrLf
            sql = sql & " Last_Interest_Date datetime," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Amount Float default 0," & vbCrLf
            sql = sql & " Fixd_Amt Float default 0," & vbCrLf
            sql = sql & " Interest_Reserve Float default 0," & vbCrLf
            sql = sql & " Interest_Amt Float default 0," & vbCrLf
            sql = sql & " Total_Amt Float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlKamDhenu_Payment_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "KamDhenu_Payment_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "KamDhenu_Payment_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Fixd_No Bigint," & vbCrLf
            'sql = sql & " Last_Interest_Date datetime," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Amount Float default 0," & vbCrLf
            sql = sql & " Fixd_Amt Float default 0," & vbCrLf
            'sql = sql & " Interest_Reserve Float default 0," & vbCrLf
            sql = sql & " Interest_Amt Float default 0," & vbCrLf
            sql = sql & " Total_Amt Float default 0," & vbCrLf
            'sql = sql & " Trn_App bit default 0," & vbCrLf
            'sql = sql & " Trn_App_User_Name nvarchar(20)default ''," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlFixd_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Fixd_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Fixd_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Period Float default 0," & vbCrLf
            sql = sql & " Percentage Float default 0," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Amount Float default 0," & vbCrLf
            sql = sql & " Due_Date Datetime," & vbCrLf
            sql = sql & " Due_Amt Float default 0," & vbCrLf
            sql = sql & " Fixd_Complete Bit default 0," & vbCrLf
            sql = sql & " Pay_No  bigint default 0," & vbCrLf
            sql = sql & " Renew Bit default 0," & vbCrLf
            sql = sql & " Pay_Interest_Reserve Float Default 0," & vbCrLf
            sql = sql & " Pay_Interest_Amt Float Default 0," & vbCrLf
            sql = sql & " Pay_Amt Float default 0," & vbCrLf
            sql = sql & " Last_Int_Paid_Date DAtetime," & vbCrLf
            sql = sql & " Total_Interest Float default 0," & vbCrLf
            sql = sql & " Interest_Paid Float default 0," & vbCrLf
            sql = sql & " Interest_Balance Float Default 0," & vbCrLf
            sql = sql & " Remarks Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlInvestment_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Investment_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Investment_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Period Float default 0," & vbCrLf
            sql = sql & " Percentage Float default 0," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Amount Float default 0," & vbCrLf
            sql = sql & " Due_Date Datetime," & vbCrLf
            sql = sql & " Due_Amt Float default 0," & vbCrLf
            sql = sql & " Fixd_Complete Bit default 0," & vbCrLf
            sql = sql & " Pay_No  bigint default 0," & vbCrLf
            sql = sql & " Renew Bit default 0," & vbCrLf
            sql = sql & " Pay_Interest_Reserve Float Default 0," & vbCrLf
            sql = sql & " Pay_Interest_Amt Float Default 0," & vbCrLf
            sql = sql & " Pay_Amt Float default 0," & vbCrLf
            sql = sql & " Last_Int_Paid_Date DAtetime," & vbCrLf
            sql = sql & " Total_Interest Float default 0," & vbCrLf
            sql = sql & " Interest_Paid Float default 0," & vbCrLf
            sql = sql & " Interest_Balance Float Default 0," & vbCrLf
            sql = sql & " Remarks Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Receipt_No Nvarchar(50) default ''," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlKamDhenu_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "KamDhenu_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "KamDhenu_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Period Float default 0," & vbCrLf
            sql = sql & " Percentage Float default 0," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Amount Float default 0," & vbCrLf
            sql = sql & " Due_Date Datetime," & vbCrLf
            'sql = sql & " Due_Amt Float default 0," & vbCrLf
            sql = sql & " Fixd_Complete Bit default 0," & vbCrLf
            sql = sql & " Pay_No  bigint default 0," & vbCrLf
            'sql = sql & " Renew Bit default 0," & vbCrLf
            'sql = sql & " Pay_Interest_Reserve Float Default 0," & vbCrLf
            sql = sql & " Pay_Interest_Amt Float Default 0," & vbCrLf
            sql = sql & " Pay_Amt Float default 0," & vbCrLf
            'sql = sql & " Last_Int_Paid_Date DAtetime," & vbCrLf
            sql = sql & " Total_Interest Float default 0," & vbCrLf
            sql = sql & " Interest_Paid Float default 0," & vbCrLf
            sql = sql & " Interest_Balance Float Default 0," & vbCrLf
            sql = sql & " Remarks Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlInvestment_Ledger(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Investment_Ledger") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Investment_Ledger"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Fixd_No Bigint ," & vbCrLf
            sql = sql & " doc_type int," & vbCrLf
            sql = sql & " doc_no Bigint," & vbCrLf
            sql = sql & " doc_date Datetime," & vbCrLf
            sql = sql & " Remarks Nvarchar(500)," & vbCrLf
            sql = sql & " Receipt_Amt Float default 0," & vbCrLf
            sql = sql & " Payment_Amt Float Default 0," & vbCrLf
            sql = sql & " Int_Receipt_Amt Float default 0," & vbCrLf
            sql = sql & " Int_Payment_Amt Float default 0" & vbCrLf
            'sql = sql & " Primary Key (Company_Id,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlFixd_Ledger(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Fixd_Ledger") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Fixd_Ledger"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Fixd_No Bigint ," & vbCrLf
            sql = sql & " doc_type int," & vbCrLf
            sql = sql & " doc_no Bigint," & vbCrLf
            sql = sql & " doc_date Datetime," & vbCrLf
            sql = sql & " Remarks Nvarchar(500)," & vbCrLf
            sql = sql & " Receipt_Amt Float default 0," & vbCrLf
            sql = sql & " Payment_Amt Float Default 0," & vbCrLf
            sql = sql & " Int_Receipt_Amt Float default 0," & vbCrLf
            sql = sql & " Int_Payment_Amt Float default 0" & vbCrLf
            'sql = sql & " Primary Key (Company_Id,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlKamDhenu_Ledger(ByVal cn As SqlConnection, Optional ByVal tblname As String = "KamDhenu_Ledger") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "KamDhenu_Ledger"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Fixd_No Bigint ," & vbCrLf
            sql = sql & " doc_type int," & vbCrLf
            sql = sql & " doc_no Bigint," & vbCrLf
            sql = sql & " doc_date Datetime," & vbCrLf
            sql = sql & " Remarks Nvarchar(500)," & vbCrLf
            sql = sql & " Receipt_Amt Float default 0," & vbCrLf
            sql = sql & " Payment_Amt Float Default 0," & vbCrLf
            sql = sql & " Int_Receipt_Amt Float default 0," & vbCrLf
            sql = sql & " Int_Payment_Amt Float default 0" & vbCrLf
            'sql = sql & " Primary Key (Company_Id,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlFixd_Due_Report(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Fixd_Due_Report") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Fixd_Due_Report"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " doc_no Bigint," & vbCrLf
            sql = sql & " doc_date Datetime," & vbCrLf
            sql = sql & " Member_Id Bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Period Float Default 0 ," & vbCrLf
            sql = sql & " Percentage Float default 0," & vbCrLf
            sql = sql & " Column_id int," & vbCrLf
            sql = sql & " Amount Float default 0," & vbCrLf
            sql = sql & " Due_Date DAtetime," & vbCrLf
            sql = sql & " Interest_Balance Float default 0" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlColumn_Summary(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Column_Summary") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Column_Summary"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Column_id int," & vbCrLf
            sql = sql & " Opening_Amount Float default 0," & vbCrLf
            sql = sql & " Received_Amount Float Default 0," & vbCrLf
            sql = sql & " Payment_Amount Float default 0," & vbCrLf
            sql = sql & " Balance_Amount Float Default 0" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlLoanColumn_Summary(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Loan_Column_Summary") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Loan_Column_Summary"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Column_id int," & vbCrLf
            sql = sql & " Opening_Amount Float default 0," & vbCrLf
            sql = sql & " Received_Amount Float Default 0," & vbCrLf
            sql = sql & " Payment_Amount Float default 0," & vbCrLf
            sql = sql & " Balance_Amount Float Default 0," & vbCrLf
            sql = sql & " Received_Interest float default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)default ''" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlFixd_Balance_Report(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Fixd_Balance_Report") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Fixd_Balance_Report"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " doc_no Bigint," & vbCrLf
            sql = sql & " Amount Float default 0," & vbCrLf
            sql = sql & " Int_Amt Float Default 0" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlInvestment_Balance_Report(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Investment_Balance_Report") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Investment_Balance_Report"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " doc_no Bigint," & vbCrLf
            sql = sql & " Amount Float default 0," & vbCrLf
            sql = sql & " Int_Amt Float Default 0" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlkamDhenu_Balance_Report(ByVal cn As SqlConnection, Optional ByVal tblname As String = "kamDhenu_Balance_Report") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "kamDhenu_Balance_Report"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " doc_no Bigint," & vbCrLf
            sql = sql & " Amount Float default 0," & vbCrLf
            sql = sql & " Int_Amt Float Default 0" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlFixd_Opening_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Fixd_Opening_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Fixd_Opening_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Period Float default 0," & vbCrLf
            sql = sql & " Percentage Float default 0," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Amount Float default 0," & vbCrLf
            sql = sql & " Due_Date Datetime," & vbCrLf
            sql = sql & " Due_Amt Float default 0," & vbCrLf
            sql = sql & " Last_Int_Paid_Date DAtetime," & vbCrLf
            sql = sql & " Total_Interest Float default 0," & vbCrLf
            sql = sql & " Interest_Paid Float default 0," & vbCrLf
            sql = sql & " Interest_Balance Float Default 0," & vbCrLf
            sql = sql & " Remarks Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlInvestment_Opening_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Investment_Opening_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Investment_Opening_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Period Float default 0," & vbCrLf
            sql = sql & " Percentage Float default 0," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Amount Float default 0," & vbCrLf
            sql = sql & " Due_Date Datetime," & vbCrLf
            sql = sql & " Due_Amt Float default 0," & vbCrLf
            sql = sql & " Last_Int_Paid_Date DAtetime," & vbCrLf
            sql = sql & " Total_Interest Float default 0," & vbCrLf
            sql = sql & " Interest_Paid Float default 0," & vbCrLf
            sql = sql & " Interest_Balance Float Default 0," & vbCrLf
            sql = sql & " Remarks Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Receipt_No Nvarchar(20) default ''," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlKamDhenu_Opening_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "KamDhenu_Opening_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "KamDhenu_Opening_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_No bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext Nvarchar(1)," & vbCrLf
            sql = sql & " Period Float default 0," & vbCrLf
            sql = sql & " Percentage Float default 0," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Amount Float default 0," & vbCrLf
            sql = sql & " Due_Date Datetime," & vbCrLf
            'sql = sql & " Due_Amt Float default 0," & vbCrLf
            'sql = sql & " Last_Int_Paid_Date DAtetime," & vbCrLf
            sql = sql & " Total_Interest Float default 0," & vbCrLf
            sql = sql & " Interest_Paid Float default 0," & vbCrLf
            sql = sql & " Interest_Balance Float Default 0," & vbCrLf
            sql = sql & " Remarks Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlGold_Stock_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Gold_Stock_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Gold_Stock_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Loan_no Bigint," & vbCrLf
            'sql = sql & " Sr_no int," & vbCrLf
            sql = sql & " Item_Id int," & vbCrLf
            sql = sql & " Open_Qnty Float," & vbCrLf
            sql = sql & " Open_Gross Float," & vbCrLf
            sql = sql & " Open_Net Float," & vbCrLf
            sql = sql & " In_Qnty Float," & vbCrLf
            sql = sql & " In_Gross Float," & vbCrLf
            sql = sql & " In_Net Float," & vbCrLf
            sql = sql & " Out_Qnty Float," & vbCrLf
            sql = sql & " Out_Gross Float," & vbCrLf
            sql = sql & " Out_Net Float," & vbCrLf
            sql = sql & " Bal_Qnty Float," & vbCrLf
            sql = sql & " Bal_Gross Float," & vbCrLf
            sql = sql & " Bal_Net Float," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Loan_no,Item_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlGold_Opening_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Gold_Opening_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Gold_Opening_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id nvarchar(9) ," & vbCrLf
            sql = sql & " Loan_no Bigint," & vbCrLf
            sql = sql & " Item_Id int," & vbCrLf
            sql = sql & " Quantity Float default 0," & vbCrLf
            sql = sql & " Gross_Weight Float default 0," & vbCrLf
            sql = sql & " Net_Weight Float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Loan_no,Item_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlStop_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Stop_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Stop_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Loan_no Bigint," & vbCrLf
            sql = sql & " Stop_Date Datetime," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Loan_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlPayment_Data_Detail(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Payment_Data_Detail") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Payment_Data_Detail"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " doc_no int," & vbCrLf
            sql = sql & " Loan_no Bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Sr_No Int," & vbCrLf
            sql = sql & " Certificate_No nvarchar(10)," & vbCrLf
            sql = sql & " Certificate_Date Datetime," & vbCrLf
            sql = sql & " Certificate_Due_Date Datetime," & vbCrLf
            sql = sql & " File_no nvarchar(20)," & vbCrLf
            sql = sql & " Certificate_Amount float," & vbCrLf
            sql = sql & " Remarks nvarchar(200)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Loan_no,Sr_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlPassing_Data_Detail(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Passing_Data_Detail") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Passing_Data_Detail"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Loan_no Bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Sr_No Int," & vbCrLf
            sql = sql & " Certificate_No nvarchar(10)," & vbCrLf
            sql = sql & " Certificate_Date Datetime," & vbCrLf
            sql = sql & " Certificate_Due_Date Datetime," & vbCrLf
            sql = sql & " File_no nvarchar(20)," & vbCrLf
            sql = sql & " Certificate_Amount float," & vbCrLf
            sql = sql & " Remarks nvarchar(200)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Loan_no,Sr_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlLoan_Balance_Detail(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Loan_Balance_Detail") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Loan_Balance_Detail"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Loan_no Bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Sr_No Int," & vbCrLf
            sql = sql & " Certificate_No nvarchar(10)," & vbCrLf
            sql = sql & " Certificate_Date Datetime," & vbCrLf
            sql = sql & " Certificate_Due_Date Datetime," & vbCrLf
            sql = sql & " File_no nvarchar(20)," & vbCrLf
            sql = sql & " Certificate_Amount float," & vbCrLf
            sql = sql & " Remarks nvarchar(200)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Loan_no,Sr_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlPassing_Data_Item_Detail(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Passing_Data_Item_Detail") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Passing_Data_Item_Detail"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Loan_no Bigint," & vbCrLf
            sql = sql & " Doc_Date Datetime," & vbCrLf
            sql = sql & " Sr_No Int," & vbCrLf
            sql = sql & " Item_Id int," & vbCrLf
            sql = sql & " Quantity float," & vbCrLf
            sql = sql & " Gross_Weight Float," & vbCrLf
            sql = sql & " Net_Weight Float," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Loan_no,Sr_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlAccount_Group_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Account_Group_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Account_Group_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Group_Id int," & vbCrLf
            sql = sql & " group_name nvarchar(100)," & vbCrLf
            sql = sql & " Eng_Group_Name nvarchar(100)," & vbCrLf
            sql = sql & " final_report_type nvarchar(50)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Group_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlMember_master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Member_master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Member_master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Member_Id int," & vbCrLf
            sql = sql & " Deposite_member_Ext char(1)," & vbCrLf
            sql = sql & " Member_Id nvarchar(100)," & vbCrLf
            sql = sql & " Eng_Member_Id nvarchar(100)," & vbCrLf
            sql = sql & " Second_Name nvarchar(100)," & vbCrLf
            sql = sql & " Third_Name nvarchar(100)," & vbCrLf
            sql = sql & " Address nvarchar(250)," & vbCrLf
            sql = sql & " Village_id int," & vbCrLf
            sql = sql & " Phone_No nvarchar(50)," & vbCrLf
            sql = sql & " Mobile_No nvarchar(50)," & vbCrLf
            sql = sql & " Nominal nvarchar(50)," & vbCrLf
            sql = sql & " Remark Nvarchar(500)," & vbCrLf
            sql = sql & " Agent_YN bit ," & vbCrLf
            sql = sql & " AC_Closed bit ," & vbCrLf
            sql = sql & " Account_Open_Date datetime," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Member_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlInward_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Inward_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Inward_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Doc_Date datetime," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Nominee nvarchar(50)," & vbCrLf
            sql = sql & " Remark nvarchar(500)," & vbCrLf
            sql = sql & " Share_Amt Float," & vbCrLf
            sql = sql & " Addmission_Fee Float," & vbCrLf
            sql = sql & " Net_Amt Float," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Doc_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlIssue_Main(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Issue_Main") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Issue_Main"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Doc_Date datetime," & vbCrLf
            sql = sql & " Tharav_no nvarchar(20)," & vbCrLf
            sql = sql & " Tharav_date datetime," & vbCrLf
            sql = sql & " Remark nvarchar(500)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Doc_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlTransfer_Main(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Transfer_Main") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Transfer_Main"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Doc_Date datetime," & vbCrLf
            sql = sql & " Tharav_no nvarchar(20)," & vbCrLf
            sql = sql & " Tharav_date datetime," & vbCrLf
            sql = sql & " Remark nvarchar(500)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Doc_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlDaily_Transfer_Main(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Daily_Transfer_Main") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Daily_Transfer_Main"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Doc_Date datetime," & vbCrLf
            sql = sql & " Member_Id Bigint," & vbCrLf
            sql = sql & " Account_Ext nvarchar(1)," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Remark nvarchar(500)," & vbCrLf
            sql = sql & " Doc_Amt Float," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Trn_App Bit Default 0," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Doc_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlDaily_Transfer_Detail(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Daily_Transfer_Detail") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Daily_Transfer_Detail"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Sr_no int," & vbCrLf
            sql = sql & " Member_Id Bigint," & vbCrLf
            sql = sql & " Account_Ext nvarchar(1)," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Amount Float," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Trn_App Bit Default 0," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Doc_no,Sr_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlDaily_Batch_Formula_Entry(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Batch_Formula_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Batch_Formula_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Item_Id int," & vbCrLf
            sql = sql & " Remarks nvarchar(250)," & vbCrLf
            sql = sql & " Sr_no int," & vbCrLf
            sql = sql & " Product_Id int," & vbCrLf
            sql = sql & " Weight Float," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Add_User varchar(50)," & vbCrLf
            sql = sql & " Edit_User varchar(50)," & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_no,Sr_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlDaily_Batch_Main(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Batch_Main") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Batch_Main"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Ip_address nvarchar(20), " & vbCrLf
            sql = sql & " Year_Id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Doc_Date datetime," & vbCrLf
            sql = sql & " Formula_no int," & vbCrLf
            sql = sql & " Bags int," & vbCrLf
            sql = sql & " Total_Gypsam_Safai_Weight Float," & vbCrLf
            sql = sql & " Item_Id int," & vbCrLf
            sql = sql & " Weight Float," & vbCrLf
            sql = sql & " Total_Weight Float," & vbCrLf
            sql = sql & " Remarks  nvarchar(250)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Add_User varchar(50)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_User varchar(50)," & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_ID,Doc_type,Doc_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlDaily_Batch_Detail(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Batch_Detail") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Batch_Detail"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Ip_address nvarchar(20)," & vbCrLf
            sql = sql & " Year_Id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Sr_no int," & vbCrLf
            sql = sql & " Gypsam_Safai_Weight Float," & vbCrLf
            sql = sql & " Product_Id int," & vbCrLf
            sql = sql & " Weight Float," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Add_User varchar(50)," & vbCrLf
            sql = sql & " Edit_User varchar(50)," & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_ID,Doc_type,Doc_no,Sr_no) " & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlTransfer_Detail(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Transfer_Detail") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Transfer_Detail"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Sr_no int ," & vbCrLf
            sql = sql & " Doc_Date datetime," & vbCrLf
            sql = sql & " Tharav_no nvarchar(20)," & vbCrLf
            sql = sql & " Tharav_date datetime," & vbCrLf
            sql = sql & " Remark nvarchar(500)," & vbCrLf
            sql = sql & " from_Member_Id bigint," & vbCrLf
            sql = sql & " Certi_No bigint," & vbCrLf
            sql = sql & " Share_from bigint," & vbCrLf
            sql = sql & " Share_To bigint," & vbCrLf
            sql = sql & " Qty Float," & vbCrLf
            sql = sql & " Rate Float," & vbCrLf
            sql = sql & " Amount Float," & vbCrLf
            sql = sql & " To_Member_Id bigint," & vbCrLf
            'sql = sql & " Application_Date datetime ," & vbCrLf
            sql = sql & " To_Member_nominee nvarchar(200)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Doc_no,sr_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlIssue_Detail(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Issue_Detail") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Issue_Detail"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Sr_no int ," & vbCrLf
            sql = sql & " Doc_Date datetime," & vbCrLf
            sql = sql & " Tharav_no nvarchar(20)," & vbCrLf
            sql = sql & " Tharav_date datetime," & vbCrLf
            sql = sql & " Remark nvarchar(500)," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Certi_No bigint," & vbCrLf
            sql = sql & " Share_from bigint," & vbCrLf
            sql = sql & " Share_To bigint," & vbCrLf
            sql = sql & " Qty Float," & vbCrLf
            sql = sql & " Rate Float," & vbCrLf
            sql = sql & " Amount Float," & vbCrLf
            sql = sql & " Application_Date datetime ," & vbCrLf
            sql = sql & " nominee nvarchar(200)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Doc_no,sr_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlReceipt_Main(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Receipt_Main") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Receipt_Main"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Doc_Date datetime," & vbCrLf
            sql = sql & " Tharav_no nvarchar(20)," & vbCrLf
            sql = sql & " Tharav_date datetime," & vbCrLf
            sql = sql & " Remark nvarchar(500)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Doc_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlSaving_Receipt_Main(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Saving_Receipt_Main") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Saving_Receipt_Main"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Doc_Date datetime," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext nvarchar(1)," & vbCrLf
            sql = sql & " Remark nvarchar(500)," & vbCrLf
            sql = sql & " Doc_Amt Float," & vbCrLf
            sql = sql & " Trn_App Bit Default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " Trn_App_User_Name Nvarchar(20)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Doc_Type,Doc_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlSaving_Member_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Saving_Member_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Saving_Member_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Account_Ext nvarchar(1)," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Opening_balance Float default 0," & vbCrLf
            sql = sql & " Credit_Amount Float Default 0," & vbCrLf
            sql = sql & " Debit_Amount Float Default 0," & vbCrLf
            sql = sql & " Balance_Amount Float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Member_Id,Account_Ext,Column_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlSaving_Receipt_Detail(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Saving_Receipt_Detail") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Saving_Receipt_Detail"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_no bigint," & vbCrLf
            sql = sql & " Sr_no int," & vbCrLf
            sql = sql & " Column_Id int," & vbCrLf
            sql = sql & " Amount Float," & vbCrLf
            sql = sql & " Trn_App Bit Default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " Trn_App_User_Name Nvarchar(20)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Doc_Type,Doc_no,Sr_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlReceipt_Detail(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Receipt_Detail") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Receipt_Detail"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id Nvarchar(9)," & vbCrLf
            sql = sql & " Doc_no int," & vbCrLf
            sql = sql & " Sr_no int ," & vbCrLf
            sql = sql & " Doc_Date datetime," & vbCrLf
            sql = sql & " Tharav_no nvarchar(20)," & vbCrLf
            sql = sql & " Tharav_date datetime," & vbCrLf
            sql = sql & " Remark nvarchar(500)," & vbCrLf
            sql = sql & " Member_Id bigint," & vbCrLf
            sql = sql & " Certi_No bigint," & vbCrLf
            sql = sql & " Share_from bigint," & vbCrLf
            sql = sql & " Share_To bigint," & vbCrLf
            sql = sql & " Qty Float," & vbCrLf
            sql = sql & " Rate Float," & vbCrLf
            sql = sql & " Amount Float," & vbCrLf
            sql = sql & " Application_Date datetime ," & vbCrLf
            sql = sql & " nominee nvarchar(200)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id,Doc_no,sr_no)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlPT_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "PT_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "PT_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " PT_Id int," & vbCrLf
            sql = sql & " From_Amount Float," & vbCrLf
            sql = sql & " To_Amount Float," & vbCrLf
            sql = sql & " Rate Float," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Pt_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlLeave_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Leave_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Leave_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Leave_Id Nvarchar(2)," & vbCrLf
            sql = sql & " Leave_Name Nvarchar(50)," & vbCrLf
            sql = sql & " Leave_Type Bit," & vbCrLf
            sql = sql & " Paid_Leave Bit," & vbCrLf
            sql = sql & " Encash_Leave Bit," & vbCrLf
            sql = sql & " Leave_CF Bit," & vbCrLf
            sql = sql & " Total_Leave float," & vbCrLf
            sql = sql & " Leave_Accumulate float," & vbCrLf
            sql = sql & " R_W_O char(1)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " Ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name nvarchar(50)," & vbCrLf
            sql = sql & " Primary Key (Company_Id,Leave_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlLeave_Ledger(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Leave_Ledger") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Leave_Ledger"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Employee_id Bigint," & vbCrLf
            sql = sql & " Leave_Id Nvarchar(2)," & vbCrLf
            sql = sql & " Doc_Date datetime," & vbCrLf
            sql = sql & " Remarks Nvarchar(500) default ''," & vbCrLf
            sql = sql & " Add_Leave Float Default 0," & vbCrLf
            sql = sql & " Less_Leave Float default 0," & vbCrLf
            sql = sql & " Ip_Address nvarchar(100)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlBonus_Report(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Bonus_Report") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Bonus_Report"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Employee_id Bigint," & vbCrLf
            sql = sql & " Salary1 Float default 0," & vbCrLf
            sql = sql & " Salary2 Float default 0," & vbCrLf
            sql = sql & " Total_Salary Float default 0," & vbCrLf
            sql = sql & " Bonus_Amt float default 0," & vbCrLf
            sql = sql & " Leave_Wages Float Default 0," & vbCrLf
            sql = sql & " Total_Bonus Float default 0," & vbCrLf
            sql = sql & " Ip_Address nvarchar(100)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlLeave_Wages_Report(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Leave_Wages_Report") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Leave_Wages_Report"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Employee_Id Bigint," & vbCrLf
            sql = sql & " Last_Salary Float default 0 ," & vbCrLf
            sql = sql & " Day_Amount Float Default 0," & vbCrLf
            sql = sql & " Add_leave Float default 0," & vbCrLf
            sql = sql & " Less_Leave Float Default 0," & vbCrLf
            sql = sql & " Credit_amt Float default 0," & vbCrLf
            sql = sql & " Debit_amt float default 0," & vbCrLf
            sql = sql & " Ip_Address varchar(100) " & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function

    Public Function sqlLeave_Opening_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Leave_Opening_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Leave_Opening_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Employee_Id Bigint," & vbCrLf
            sql = sql & " Leave_Id Nvarchar(2)," & vbCrLf
            sql = sql & " Opening_Leave Float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Addess nvarchar(100)," & vbCrLf
            sql = sql & " Mach_name nVarchar(100)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Employee_Id,Leave_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlDA_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "DA_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "DA_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Month_Year Datetime," & vbCrLf
            sql = sql & " Rate Float," & vbCrLf
            sql = sql & " Rate2 Float," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " Ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,month_Year)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlEmployee_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Employee_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Employee_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Employee_Id int," & vbCrLf
            sql = sql & " Employee_Name nvarchar(100)," & vbCrLf
            sql = sql & " Eng_Employee_Name nvarchar(100)," & vbCrLf
            sql = sql & " Address nvarchar(250)," & vbCrLf
            sql = sql & " Village_id int," & vbCrLf
            sql = sql & " Department_id int," & vbCrLf
            sql = sql & " PF_No nvarchar(50)," & vbCrLf
            sql = sql & " INDEX_NO float," & vbCrLf
            sql = sql & " Designation nvarchar(50)," & vbCrLf
            sql = sql & " Class Bigint," & vbCrLf
            sql = sql & " Basic_1 float," & vbCrLf
            sql = sql & " Basic_2 float," & vbCrLf
            sql = sql & " Basic_3 float," & vbCrLf
            sql = sql & " Basic_4 float," & vbCrLf
            sql = sql & " Basic_5 float," & vbCrLf
            sql = sql & " Basic_6 float," & vbCrLf
            sql = sql & " Basic_7 float," & vbCrLf
            sql = sql & " Basic_8 float," & vbCrLf
            sql = sql & " Basic_9 float," & vbCrLf
            sql = sql & " Basic_10 float," & vbCrLf
            sql = sql & " Basic_11 float," & vbCrLf
            sql = sql & " Basic_12 float," & vbCrLf
            sql = sql & " Last_Salary float," & vbCrLf
            sql = sql & " Last_Salary1 float," & vbCrLf
            'sql = sql & " Card_No nvarchar(50)," & vbCrLf
            'sql = sql & " PIN nvarchar(10)," & vbCrLf
            'sql = sql & " Reference nvarchar(50)," & vbCrLf
            sql = sql & " Phone_No nvarchar(50)," & vbCrLf
            sql = sql & " Mobile_No nvarchar(50)," & vbCrLf
            'sql = sql & " Join_Date Datetime," & vbCrLf
            'sql = sql & " Confirm_Date datetime," & vbCrLf
            'sql = sql & " Left_Date Datetime," & vbCrLf
            sql = sql & " Birth_Date Datetime," & vbCrLf
            'sql = sql & " Blood_Group nvarchar(50)," & vbCrLf
            sql = sql & " SEX nvarchar(50)," & vbCrLf
            'sql = sql & " Qualification nvarchar(50)," & vbCrLf
            'sql = sql & " Overtime Bit," & vbCrLf
            'sql = sql & " Bonus bit," & vbCrLf
            'sql = sql & " DA Bit," & vbCrLf
            'sql = sql & " HRA Bit," & vbCrLf
            'sql = sql & " WASHAL bit," & vbCrLf
            'sql = sql & " FPF bit," & vbCrLf
            'sql = sql & " ONLY_BASIC Bit," & vbCrLf
            'sql = sql & " VARASDAR nvarchar(50)," & vbCrLf
            'sql = sql & " Relation nvarchar(50)," & vbCrLf
            'sql = sql & " LIC_NO nvarchar(50)," & vbCrLf
            'sql = sql & " Pf_Date datetime," & vbCrLf
            'sql = sql & " ESI_No nvarchar(50)," & vbCrLf
            'sql = sql & " FILE_NO int," & vbCrLf
            'sql = sql & " Bank_Name nvarchar(50)," & vbCrLf
            'sql = sql & " Bank_Code nvarchar(50)," & vbCrLf
            sql = sql & " Bank_Account_No nvarchar(50)," & vbCrLf
            sql = sql & " Saving_Account_Id Bigint," & vbCrLf
            'sql = sql & " Member_id bigint," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Employee_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlEmp_Last_Salary(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Emp_Last_Salary") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Emp_Last_Salary"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Employee_Id int," & vbCrLf
            sql = sql & " Employee_Name nvarchar(100)," & vbCrLf
            sql = sql & " Address nvarchar(250)," & vbCrLf
            sql = sql & " Village_id int," & vbCrLf
            sql = sql & " Department_id int," & vbCrLf
            sql = sql & " PF_No nvarchar(50)," & vbCrLf
            sql = sql & " INDEX_NO float," & vbCrLf
            sql = sql & " Designation nvarchar(50)," & vbCrLf
            sql = sql & " Class Bigint," & vbCrLf
            sql = sql & " Basic_1 float default 0," & vbCrLf
            sql = sql & " Basic_2 float default 0," & vbCrLf
            sql = sql & " Basic_3 float default 0," & vbCrLf
            sql = sql & " Basic_4 float default 0," & vbCrLf
            sql = sql & " Basic_5 float default 0," & vbCrLf
            sql = sql & " Basic_6 float default 0," & vbCrLf
            sql = sql & " Basic_7 float default 0," & vbCrLf
            sql = sql & " Basic_8 float default 0," & vbCrLf
            sql = sql & " Basic_9 float default 0," & vbCrLf
            sql = sql & " Basic_10 float default 0," & vbCrLf
            sql = sql & " Basic_11 float default 0," & vbCrLf
            sql = sql & " Basic_12 float default 0," & vbCrLf
            sql = sql & " Last_Salary float default 0," & vbCrLf
            sql = sql & " Last_Salary1 float default 0," & vbCrLf
            sql = sql & " BASIC_OLD Float default 0," & vbCrLf
            sql = sql & " BASIC_INCrement Float default 0," & vbCrLf
            sql = sql & " PF_N bigint," & vbCrLf
            sql = sql & " Ip_Address nvarchar(100)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlAdd_Ded_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Add_Ded_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Add_Ded_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Add_Ded_id nvarchar(10)," & vbCrLf
            sql = sql & " Add_Ded_Name nvarchar(100)," & vbCrLf
            sql = sql & " A_D bit," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Add_Ded_id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlAccount_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Account_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Account_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Account_Id int," & vbCrLf
            sql = sql & " Account_name nvarchar(100)," & vbCrLf
            sql = sql & " Eng_Account_Name nvarchar(100)," & vbCrLf
            sql = sql & " Address nvarchar(250)," & vbCrLf
            sql = sql & " group_id int," & vbCrLf
            sql = sql & "  Expense_Group_Id int," & vbCrLf
            sql = sql & " Tin_GST_No nvarchar(50)," & vbCrLf
            sql = sql & " Tin_CST_No nvarchar(50)," & vbCrLf
            sql = sql & " Pan_No nvarchar(50)," & vbCrLf
            sql = sql & " Book_Account nvarchar(20)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Account_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlDescription_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Description_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Description_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Description_Id int," & vbCrLf
            sql = sql & " Description_Name nvarchar(50)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status Bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Description_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlVoucher_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Voucher_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Voucher_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_Name nvarchar(50), " & vbCrLf
            sql = sql & " Doc_Group_Name nvarchar(50), " & vbCrLf
            sql = sql & " Short_Name nvarchar(10), " & vbCrLf
            sql = sql & " Account_Id nvarchar(20), " & vbCrLf
            sql = sql & " Default_action nvarchar(10)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status Bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_type)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlParameter_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Parameter_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Parameter_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Parameter_id int," & vbCrLf
            sql = sql & " Month_Year Datetime, " & vbCrLf
            sql = sql & " Month_Days Float, " & vbCrLf
            sql = sql & " Working_Days Float, " & vbCrLf
            sql = sql & " Total_Pf Float, " & vbCrLf
            sql = sql & " Pf_Percentage Float," & vbCrLf
            sql = sql & " Fpf_Percentage Float," & vbCrLf
            sql = sql & " E_S_I_C Float," & vbCrLf
            sql = sql & " ESIC_Limit Float," & vbCrLf
            sql = sql & " Da_rate Float," & vbCrLf
            sql = sql & " Da_Rate1 Float," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status Bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " Ip_Address nvarchar(50) default ''," & vbCrLf
            sql = sql & " Mach_name nvarchar(50) default ''" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Parameter_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlVoucher_Group_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Voucher_Group_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Voucher_Group_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Doc_Group_Id int," & vbCrLf
            sql = sql & " Doc_Group_Name nvarchar(50), " & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Doc_Group_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlBook_Group_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Book_Group_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Book_Group_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Book_Group_Id int," & vbCrLf
            sql = sql & " Book_Group_Name nvarchar(50), " & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Book_Group_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlBook_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Book_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Book_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Book_Id int," & vbCrLf
            sql = sql & " Book_Name nvarchar(50), " & vbCrLf
            sql = sql & " Book_Group_Name nvarchar(50), " & vbCrLf
            sql = sql & " Remark nvarchar(100), " & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Book_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlParty_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Party_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Party_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Account_Id Bigint," & vbCrLf
            sql = sql & " Party_Id Bigint," & vbCrLf
            sql = sql & " Party_Name nvarchar(100), " & vbCrLf
            sql = sql & " Village_Id int, " & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Account_Id,Party_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlNotice_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Notice_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Notice_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Notice_Id int," & vbCrLf
            sql = sql & " Notice_Name nvarchar(50)," & vbCrLf
            sql = sql & " Letter_Details nvarchar(4000)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Notice_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlProduct_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Product_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Product_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Product_Id int," & vbCrLf
            sql = sql & " Product_Name nvarchar(100)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " Ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Product_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlVibhag_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Vibhag_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Vibhag_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Vibhag_Id int," & vbCrLf
            sql = sql & " Vibhag_Name nvarchar(100)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " Ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Vibhag_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlQuality_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Quality_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Quality_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Quality_Id int," & vbCrLf
            sql = sql & " Quality_Name nvarchar(100)," & vbCrLf
            sql = sql & " Product_Id int," & vbCrLf
            sql = sql & " Pur_Account_id int ," & vbCrLf
            sql = sql & " Sal_Account_id int," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " Ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Quality_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlStorage_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Storage_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Storage_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Storage_Id int," & vbCrLf
            sql = sql & " Storage_Name nvarchar(100)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " Ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Storage_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlDepartment_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Department_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Department_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Department_Id int," & vbCrLf
            sql = sql & " Vadtar_Account_ID int," & vbCrLf
            sql = sql & " Department_Name nvarchar(50)," & vbCrLf
            sql = sql & " Balance_Path nvarchar(250)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Department_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlBranch_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Branch_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Branch_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Branch_Id int," & vbCrLf
            sql = sql & " Branch_Name nvarchar(100)," & vbCrLf
            sql = sql & " Remarks nvarchar(500)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Branch_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlTank_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Tank_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Tank_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Tank_id int," & vbCrLf
            sql = sql & " Tank_Name nvarchar(100)," & vbCrLf
            sql = sql & " Capacity float default 0," & vbCrLf
            sql = sql & " Daimeter float default 0," & vbCrLf
            sql = sql & " Leaghth float default 0," & vbCrLf
            sql = sql & " Item_Type nvarchar(50) default ''," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Tank_id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlPump_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Pump_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Pump_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Pump_id int," & vbCrLf
            sql = sql & " Pump_Name nvarchar(100)," & vbCrLf
            sql = sql & " Tank_id int," & vbCrLf
            sql = sql & " Pump_Limit float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Pump_id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlPump_Reading_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Pump_Reading_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Pump_Reading_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Date datetime ," & vbCrLf
            sql = sql & " Sr_no int ," & vbCrLf
            sql = sql & " Pump_id int," & vbCrLf
            sql = sql & " Last_Balance float default 0," & vbCrLf
            sql = sql & " Meter float default 0," & vbCrLf
            sql = sql & " Testing float default 0," & vbCrLf
            sql = sql & " Diff float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Doc_Date,Sr_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlTank_Reading_Data(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Tank_Reading_Data") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Tank_Reading_Data"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Date datetime ," & vbCrLf
            sql = sql & " Sr_no int ," & vbCrLf
            sql = sql & " Tank_id int," & vbCrLf
            sql = sql & " Centimeter float default 0," & vbCrLf
            sql = sql & " Liter float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Doc_Date,Sr_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlDip_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Dip_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Dip_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Tank_id int," & vbCrLf
            sql = sql & " Dip_id int," & vbCrLf
            sql = sql & " Liters float default 0," & vbCrLf
            sql = sql & " Point float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Tank_id,Dip_id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlKVN_Main(ByVal cn As SqlConnection, Optional ByVal tblname As String = "KVN_Main") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "KVN_Main"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No int ," & vbCrLf
            sql = sql & " Doc_date datetime ," & vbCrLf
            sql = sql & " Bill_No nvarchar(20) default ''," & vbCrLf
            sql = sql & " Bill_date datetime ," & vbCrLf
            sql = sql & " Bill_Type nvarchar(20) default ''," & vbCrLf
            sql = sql & " Account_Id Int," & vbCrLf
            sql = sql & " Party_Id Int," & vbCrLf
            sql = sql & " Member_Id Int," & vbCrLf
            sql = sql & " Remarks nvarchar(500)," & vbCrLf
            sql = sql & " Doc_Amt float default 0," & vbCrLf
            sql = sql & " Vat_amt float default 0," & vbCrLf
            sql = sql & " Add_Vat_amt float default 0," & vbCrLf
            sql = sql & " Add_Amt float default 0," & vbCrLf
            sql = sql & " Less_Amt float default 0," & vbCrLf
            sql = sql & " Frieght_Main float default 0," & vbCrLf
            sql = sql & " Vadtar_Main float default 0," & vbCrLf
            sql = sql & " Net_Amt float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Doc_Type,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlSales_Main(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Sales_Main") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Sales_Main"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No int ," & vbCrLf
            sql = sql & " Doc_date datetime ," & vbCrLf
            sql = sql & " Account_Id Int," & vbCrLf
            sql = sql & " Member_Id Int," & vbCrLf
            sql = sql & " Remarks nvarchar(500)," & vbCrLf
            sql = sql & " Batch_No nvarchar(100) default ''," & vbCrLf
            sql = sql & " Desp_No nvarchar(100) default ''," & vbCrLf
            sql = sql & " Desp_date datetime ," & vbCrLf
            sql = sql & " Truck_no nvarchar(50)default '' ," & vbCrLf
            sql = sql & " Doc_Amt float default 0," & vbCrLf
            sql = sql & " Freight float default 0," & vbCrLf
            sql = sql & " Amt float default 0," & vbCrLf
            sql = sql & " Disc_Amt float default 0," & vbCrLf
            sql = sql & " Help_Amt float default 0," & vbCrLf
            sql = sql & " Comm_Amt float default 0," & vbCrLf
            sql = sql & " Vat_amt float default 0," & vbCrLf
            sql = sql & " Add_Vat_amt float default 0," & vbCrLf
            sql = sql & " Item_net_Amt float default 0," & vbCrLf
            sql = sql & " Add_Amt float default 0," & vbCrLf
            sql = sql & " Less_Amt float default 0," & vbCrLf
            sql = sql & " Vadtar_Main float default 0," & vbCrLf
            sql = sql & " Frieght_Main float default 0," & vbCrLf
            sql = sql & " Net_Amt float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Doc_Type,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlSales_Detail(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Sales_Detail") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Sales_Detail"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No int ," & vbCrLf
            sql = sql & " Sr_No int ," & vbCrLf
            sql = sql & " Item_id int," & vbCrLf
            sql = sql & " Qnty Float default 0 ," & vbCrLf
            sql = sql & " Rate float default 0," & vbCrLf
            sql = sql & " Amount float default 0," & vbCrLf
            sql = sql & " Freight float default 0," & vbCrLf
            sql = sql & " Amt float default 0," & vbCrLf
            sql = sql & " disc_per float default 0," & vbCrLf
            sql = sql & " Disc_amt float default 0," & vbCrLf
            sql = sql & " Help_per float default 0," & vbCrLf
            sql = sql & " Help_amt float default 0," & vbCrLf
            sql = sql & " Comm_per float default 0," & vbCrLf
            sql = sql & " Comm_amt float default 0," & vbCrLf
            sql = sql & " Vat_per float default 0," & vbCrLf
            sql = sql & " Vat_amt float default 0," & vbCrLf
            sql = sql & " Add_VAT_Per float default 0," & vbCrLf
            sql = sql & " Add_VAT_Amt float default 0," & vbCrLf
            sql = sql & " NET_amt float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Doc_Type,Doc_No,Sr_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlItem_Opening_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Item_Opening_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Item_Opening_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Item_id int," & vbCrLf
            sql = sql & " Qnty Float default 0 ," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Item_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlStorage_Item_Opening_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Storage_Item_Opening_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Storage_Item_Opening_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Storage_Id int," & vbCrLf
            sql = sql & " Item_id int," & vbCrLf
            sql = sql & " Qnty Float default 0 ," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Item_Id,Storage_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlPump_Opening_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Pump_Opening_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Pump_Opening_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Pump_id int," & vbCrLf
            sql = sql & " Qnty Float default 0 ," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,pump_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlTank_Opening_Balance(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Tank_Opening_Balance") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Tank_Opening_Balance"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Tank_id int," & vbCrLf
            sql = sql & " Qnty Float default 0 ," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Tank_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlKVN_Detail(ByVal cn As SqlConnection, Optional ByVal tblname As String = "KVN_Detail") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "KVN_Detail"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No int ," & vbCrLf
            sql = sql & " Sr_No int ," & vbCrLf
            sql = sql & " Mal_Avak_Type int," & vbCrLf
            sql = sql & " Mal_Avak_No int," & vbCrLf
            sql = sql & " Mal_Avak_Year varchar(9)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Doc_Type,Doc_No,Sr_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlKVN_Item_Detail(ByVal cn As SqlConnection, Optional ByVal tblname As String = "KVN_Item_Detail") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "KVN_Item_Detail"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No int ," & vbCrLf
            sql = sql & " Sr_No int ," & vbCrLf
            sql = sql & " Mal_Avak_Year varchar(9)," & vbCrLf
            sql = sql & " Mal_Avak_Type int," & vbCrLf
            sql = sql & " Mal_Avak_No int," & vbCrLf
            sql = sql & " Item_id int," & vbCrLf
            sql = sql & " Qnty Float default 0 ," & vbCrLf
            sql = sql & " Rate float default 0," & vbCrLf
            sql = sql & " Amount float default 0," & vbCrLf
            sql = sql & " Vat_per float default 0," & vbCrLf
            sql = sql & " Vat_amt float default 0," & vbCrLf
            sql = sql & " Add_VAT_Per float default 0," & vbCrLf
            sql = sql & " Add_VAT_Amt float default 0," & vbCrLf
            sql = sql & " NET_amt float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Doc_Type,Doc_No,Sr_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlStorage_In_Main(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Storage_In_Main") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Storage_In_Main"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No int ," & vbCrLf
            sql = sql & " Doc_date datetime ," & vbCrLf
            sql = sql & " Chal_No nvarchar(20) default ''," & vbCrLf
            sql = sql & " Chal_date datetime ," & vbCrLf
            sql = sql & " Truck_No nvarchar(20) default ''," & vbCrLf
            sql = sql & " Storage_Id Int," & vbCrLf
            sql = sql & " Member_Id Int," & vbCrLf
            sql = sql & " Remarks nvarchar(500)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Doc_Type,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlStorage_Out_Main(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Storage_Out_Main") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Storage_Out_Main"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No int ," & vbCrLf
            sql = sql & " Doc_date datetime ," & vbCrLf
            sql = sql & " Storage_Id Int," & vbCrLf
            sql = sql & " Member_Id Int," & vbCrLf
            sql = sql & " Remarks nvarchar(500)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Doc_Type,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlStorage_OUt_Detail(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Storage_Out_Detail") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Storage_out_Detail"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No int ," & vbCrLf
            sql = sql & " Sr_No int ," & vbCrLf
            sql = sql & " Item_id int," & vbCrLf
            sql = sql & " Qnty Float default 0 ," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Doc_Type,Doc_No,Sr_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlStorage_In_Detail(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Storage_In_Detail") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Storage_In_Detail"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No int ," & vbCrLf
            sql = sql & " Sr_No int ," & vbCrLf
            sql = sql & " Item_id int," & vbCrLf
            sql = sql & " Qnty Float default 0 ," & vbCrLf
            sql = sql & " [Add] float default 0," & vbCrLf
            sql = sql & " Less float default 0," & vbCrLf
            sql = sql & " Net_Qnty float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Doc_Type,Doc_No,Sr_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlMal_Avak_Main(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Mal_Avak_Main") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Mal_Avak_Main"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No int ," & vbCrLf
            sql = sql & " Doc_date datetime ," & vbCrLf
            sql = sql & " Chal_No nvarchar(20) default ''," & vbCrLf
            sql = sql & " Chal_date datetime ," & vbCrLf
            sql = sql & " Truck_No nvarchar(20) default ''," & vbCrLf
            sql = sql & " Account_Id Int," & vbCrLf
            sql = sql & " Remarks nvarchar(500)," & vbCrLf
            sql = sql & " KVN_Type int," & vbCrLf
            sql = sql & " KVN_Date datetime," & vbCrLf
            sql = sql & " KVN_No int," & vbCrLf
            sql = sql & " KVN_Year nvarchar(9)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Doc_Type,Doc_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlMal_Avak_Detail(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Mal_Avak_Detail") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Mal_Avak_Detail"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_id nvarchar(9)," & vbCrLf
            sql = sql & " Doc_Type int," & vbCrLf
            sql = sql & " Doc_No int ," & vbCrLf
            sql = sql & " Sr_No int ," & vbCrLf
            sql = sql & " Item_id int," & vbCrLf
            sql = sql & " Qnty Float default 0 ," & vbCrLf
            sql = sql & " [Add] float default 0," & vbCrLf
            sql = sql & " Less float default 0," & vbCrLf
            sql = sql & " Net_Qnty float default 0," & vbCrLf
            sql = sql & " Purc_Rate float default 0," & vbCrLf
            sql = sql & " Padt_Rate float default 0," & vbCrLf
            sql = sql & " Sell_Rate float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_id,Doc_Type,Doc_No,Sr_No)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlMember_Type_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Member_Type_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Member_Type_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Type_Id int," & vbCrLf
            sql = sql & " Type_Name nvarchar(100)," & vbCrLf
            sql = sql & " Remarks nvarchar(500)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0," & vbCrLf
            sql = sql & " ip_Address nvarchar(50)," & vbCrLf
            sql = sql & " Mach_Name Nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Type_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlUser_Department_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "User_Department_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "User_Department_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Department_Id int," & vbCrLf
            sql = sql & " Department_Name nvarchar(50)," & vbCrLf
            sql = sql & " Remarks nvarchar(500)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Department_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlEmployee_Department_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Employee_Department_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Employee_Department_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Department_Id int," & vbCrLf
            sql = sql & " Department_Name nvarchar(50)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Department_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlExpence_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Expense_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Expense_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Expense_Id Int," & vbCrLf
            sql = sql & " Expense_Name nvarchar(50)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status Bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Expense_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlItem_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Item_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Item_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Item_Id int," & vbCrLf
            sql = sql & " Item_Name nvarchar(50)," & vbCrLf
            sql = sql & " Unit nvarchar(50)default ''," & vbCrLf
            sql = sql & " Packing float default 0," & vbCrLf
            sql = sql & " Packing_Unit nvarchar(50) default ''," & vbCrLf
            sql = sql & " Quality_id int," & vbCrLf
            sql = sql & " Section char(1)default ''," & vbCrLf
            sql = sql & " Padt_rate float default 0," & vbCrLf
            sql = sql & " Sell_Rate float default 0," & vbCrLf
            sql = sql & " Disc_Per Float default 0," & vbCrLf
            sql = sql & " Help_Amt float default 0," & vbCrLf
            sql = sql & " Comm_Amt float default 0," & vbCrLf
            sql = sql & " Old_Item_Id int ," & vbCrLf
            sql = sql & " Bharti int default 0," & vbCrLf
            sql = sql & " HSN_Code nvarchar(10) default ''," & vbCrLf
            sql = sql & " Vat_Per float default 0," & vbCrLf
            sql = sql & " Add_Vat_Per float default 0," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0,"
            sql = sql & " Ip_Address nvarchar(50)default '', " & vbCrLf
            sql = sql & " Mach_name nvarchar(50)" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Item_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlLocker_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Locker_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Locker_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Locker_Id int," & vbCrLf
            sql = sql & " Locker_Name nvarchar(50)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Locker_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqllogin(ByVal cn As SqlConnection, Optional ByVal tblname As String = "LOGINMST") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "LOGINMST"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " UsrId varchar(20)," & vbCrLf
            sql = sql & " UsrName varchar(50)," & vbCrLf
            sql = sql & " PassWd  varchar(20)," & vbCrLf
            sql = sql & " Type varchar(20)," & vbCrLf
            sql = sql & " Dta_Dat datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Dta_User varchar(20)," & vbCrLf
            sql = sql & " Status varchar(10) default 'T'," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (UsrId)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlcompany(ByVal cn As SqlConnection, Optional ByVal tblname As String = "company") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "company"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " company_name nvarchar(100)," & vbCrLf
            sql = sql & " Proprietor  nvarchar(100)," & vbCrLf
            sql = sql & " Method_of_Ac nvarchar(50)," & vbCrLf
            sql = sql & " address nvarchar(100)," & vbCrLf
            sql = sql & " city nvarchar(100)," & vbCrLf
            sql = sql & " state nvarchar(50)," & vbCrLf
            sql = sql & " phone nvarchar(50)," & vbCrLf
            sql = sql & " fax nvarchar(50)," & vbCrLf
            sql = sql & " email nvarchar(100)," & vbCrLf
            sql = sql & " Pan_No nvarchar(50)," & vbCrLf
            sql = sql & " cst_no nvarchar(50)," & vbCrLf
            sql = sql & " Lst_no nvarchar(50)," & vbCrLf
            sql = sql & " Prof_Tax_No nvarchar(50)," & vbCrLf
            sql = sql & " fin_year_begin datetime," & vbCrLf
            sql = sql & " Fin_year_End datetime," & vbCrLf
            sql = sql & " Financial_Year nvarchar(9)," & vbCrLf
            sql = sql & " Dta_Dat datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Dta_User varchar(20)," & vbCrLf
            sql = sql & " Status char(10) default 'T'," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlYearmst(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Year_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Year_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id int," & vbCrLf
            sql = sql & " Year_Id nvarchar(9)," & vbCrLf
            sql = sql & " Year_Name nvarchar(50)," & vbCrLf
            sql = sql & " Co_Start_Date datetime," & vbCrLf
            sql = sql & " Co_End_Date datetime," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Status char(10)default 'T'," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Year_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlWorking_Year_Master(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Working_Year_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Working_Year_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Working_Year nvarchar(9)," & vbCrLf
            sql = sql & " Year_Begin datetime," & vbCrLf
            sql = sql & " Year_End  datetime," & vbCrLf
            sql = sql & " Cane_First_Installment_Rate numeric(18,2)default 0," & vbCrLf
            sql = sql & " Cane_Second_Installment_Rate numeric(18,2)default 0," & vbCrLf
            sql = sql & " Cane_Third_Installment_Rate numeric(18,2)default 0," & vbCrLf
            sql = sql & " Dta_Dat datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Dta_User varchar(20)," & vbCrLf
            sql = sql & " Status char(10) default 'T'," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            'sql = sql & " Primary Key (Company_Id)" & vbCrLf
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlVillageMst(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Village_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Village_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id integer," & vbCrLf
            sql = sql & " Village_Id Integer," & vbCrLf
            sql = sql & " Village_Name  varchar(50)," & vbCrLf
            sql = sql & " Taluka_Name  varchar(50)," & vbCrLf
            sql = sql & " District_Name  varchar(50)," & vbCrLf
            sql = sql & " Status bit default 1," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Dta_time  varchar(20)," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Edit_Dta_time  varchar(20)," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Village_Id)"
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function sqlMemberMaster(ByVal cn As SqlConnection, Optional ByVal tblname As String = "Member_Master") As Boolean
        Dim Isad As Boolean
        Try
            Dim tbl As String
            Dim sql As String
            If Len(tblname) = 0 Then
                tbl = "Member_Master"
            Else
                tbl = tblname
            End If
            sql = "Create table " & UCase(tbl) & vbCrLf
            sql = sql & "(" & vbCrLf
            sql = sql & " Company_Id integer," & vbCrLf
            sql = sql & " Member_Id BigInt," & vbCrLf
            sql = sql & " Member_Name  Nvarchar(100)," & vbCrLf
            sql = sql & " English_member_Name  nvarchar(100)," & vbCrLf
            sql = sql & " Address  Nvarchar(250)," & vbCrLf
            sql = sql & " Village_id Int," & vbCrLf
            sql = sql & " Family_id bIGINT," & vbCrLf
            sql = sql & " Birth_Date datetime," & vbCrLf
            sql = sql & " Male_Female nvarchar(10)," & vbCrLf
            sql = sql & " Currant bit," & vbCrLf
            sql = sql & " Loan_Over_Due bit default 0 ," & vbCrLf
            sql = sql & " Join_Date datetime," & vbCrLf
            sql = sql & " Savings_Account_Id nvarchar(50)," & vbCrLf
            'sql = sql & " group_id int," & vbCrLf
            'sql = sql & " Expense_Group_Id int," & vbCrLf
            'sql = sql & " Tin_GST_No nvarchar(50)," & vbCrLf
            'sql = sql & " Tin_CST_No nvarchar(50)," & vbCrLf
            'sql = sql & " Pan_No nvarchar(50)," & vbCrLf
            'sql = sql & " Book_Account nvarchar(20)," & vbCrLf
            sql = sql & " Phone_No nvarchar(50)," & vbCrLf
            sql = sql & " Mobile_No nvarchar(50)," & vbCrLf
            sql = sql & " Member_Nominal nvarchar(50), " & vbCrLf
            sql = sql & " Member_Nominal_Address nvarchar(250), " & vbCrLf
            sql = sql & " Nominee nvarchar(50)," & vbCrLf
            'sql = sql & " Ledger_Folio_No nchar(10)," & vbCrLf
            'sql = sql & " Category nvarchar(50)," & vbCrLf
            'sql = sql & " Admin_lock nvarchar(50)," & vbCrLf
            'sql = sql & " Member_lock nvarchar(50)," & vbCrLf
            'sql = sql & " Member_Active nvarchar(50)," & vbCrLf
            'sql = sql & " Department nvarchar(50)," & vbCrLf
            sql = sql & " Image_path nvarchar(4000)," & vbCrLf
            sql = sql & " Sign_path nvarchar(4000)," & vbCrLf
            sql = sql & " Status Bit default 1," & vbCrLf
            sql = sql & " User_Name varchar(20)," & vbCrLf
            sql = sql & " Add_Date datetime," & vbCrLf
            sql = sql & " Edit_User_Name varchar(20)," & vbCrLf
            sql = sql & " Edit_Date datetime," & vbCrLf
            sql = sql & " Revision int default 0" & vbCrLf
            sql = sql & " Primary Key (Company_Id,Member_Id)"
            sql = sql & ")"
            Isad = Execute(sql, cn)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return Isad
    End Function
    Public Function ExeTbl(ByVal TblName As String, ByVal cn As SqlConnection) As Boolean
        Try
            If Val(FindOneString("Select Count(*) from Sysobjects where name='" & TblName & "'", cn)) = 0 Then
                ExeTbl = False
            Else
                ExeTbl = True
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return ExeTbl
    End Function
    Public Function getconnection() As SqlConnection
        Dim cn As New SqlConnection
        Try
            cn.ConnectionString = Getconn()
            cn.Open()
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return cn
    End Function
    Public Function getconnection(ByVal str As String) As SqlConnection
        Dim cn As New SqlConnection
        Try
            cn.ConnectionString = str
            cn.Open()
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return cn
    End Function
    Public Function retconnection() As SqlConnection
        Dim cn As New SqlConnection
        Try
            cn = getconnection(Getconn)
            cn.Open()
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return cn
    End Function
    Public Function retconnection(ByVal str As String) As SqlConnection
        Dim cn As New SqlConnection
        Try
            cn = getconnection(str)
            cn.Open()
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return cn
    End Function
    Public Function LoadStock(ByVal vbid As Integer, ByVal viid As Integer, ByVal vsid As String, ByVal vino As String) As Double
        Dim SSQL As String
        LoadStock = 0
        Try
            SSQL = "Select Sum(Qnty) from Item_Opening_Balance "
            SSQL = SSQL & " where Company_id=" & clsVariables.CompnyId
            SSQL = SSQL & " and year_Id=" & aq(clsVariables.WorkingYear)
            'If vbid <> 0 Then
            '    ssql = ssql & " and Branch_id=" & vbid
            'End If
            If viid <> 0 Then
                ssql = ssql & " and Item_id=" & viid
            End If
            If Len(vsid) <> 0 Then
                ssql = ssql & " and Size_Id=" & aq(vsid)
            End If
            If Len(vino) <> 0 Then
                ssql = ssql & " and Inw_no=" & Val(vino)
            End If
            LoadStock = Val(ob.FindOneString(SSQL, ob.getconnection(ob.Getconn(dbname))))
            'If vbid = 1 Then

            SSQL = "Select sum(Qnty) from Mal_Avak_Detail"
            SSQL = SSQL & " where Company_id=" & clsVariables.CompnyId
            SSQL = SSQL & " and year_Id=" & aq(clsVariables.WorkingYear)
            'If vbid <> 0 Then
            '    SSQL = SSQL & " and Department_Id=" & vbid
            'End If
            If viid <> 0 Then
                SSQL = SSQL & " and Item_id=" & viid
            End If
            If Len(vsid) <> 0 Then
                SSQL = SSQL & " and Size_Id=" & aq(vsid)
            End If
            If Len(vino) <> 0 Then
                SSQL = SSQL & " and Inw_no=" & Val(vino)
            End If
            LoadStock = LoadStock + Val(ob.FindOneString(SSQL, ob.getconnection(ob.Getconn(dbname))))
            'SSQL = "Select sum(MQty) from " & VPacking_Main
            'SSQL = SSQL & " where Company_id=" & clsVariables.CompnyId
            'If vbid <> 0 Then
            '    SSQL = SSQL & " and Department_Id=" & vbid
            'End If
            'If viid <> 0 Then
            '    SSQL = SSQL & " and mItem_id=" & viid
            'End If
            'If Len(vsid) <> 0 Then
            '    SSQL = SSQL & " and mSize_Id=" & aq(vsid)
            'End If
            'If Len(vino) <> 0 Then
            '    SSQL = SSQL & " and mInw_no=" & Val(vino)
            'End If
            'LoadStock = LoadStock - Val(ob.FindOneString(SSQL, ob.Getconn(dbname)))
            'SSQL = "Select sum(Qty) from " & VPacking_Main_Detail
            'SSQL = SSQL & " where Company_id=" & clsVariables.CompnyId
            'If vbid <> 0 Then
            '    SSQL = SSQL & " and Department_Id=" & vbid
            'End If
            'If viid <> 0 Then
            '    SSQL = SSQL & " and Item_id=" & viid
            'End If
            'If Len(vsid) <> 0 Then
            '    SSQL = SSQL & " and Size_Id=" & aq(vsid)
            'End If
            'If Len(vino) <> 0 Then
            '    SSQL = SSQL & " and Inw_no=" & Val(vino)
            'End If
            'LoadStock = LoadStock + Val(ob.FindOneString(SSQL, ob.Getconn(dbname)))
            'End If

            SSQL = "Select sum(Qnty) from Sales_Detail"
            SSQL = SSQL & " where Company_id=" & clsVariables.CompnyId
            SSQL = SSQL & " and year_Id=" & aq(clsVariables.WorkingYear)
            'If vbid <> 0 Then
            '    SSQL = SSQL & " and Department_id=" & vbid
            'End If
            If viid <> 0 Then
                SSQL = SSQL & " and Item_id=" & viid
            End If
            If Len(vsid) <> 0 Then
                SSQL = SSQL & " and Size_Id=" & aq(vsid)
            End If
            If Len(vino) <> 0 Then
                SSQL = SSQL & " and Inw_no=" & Val(vino)
            End If
            LoadStock = LoadStock - Val(ob.FindOneString(SSQL, ob.getconnection(ob.Getconn(dbname))))
            'SSQL = "Select sum(Qty) from " & VTransfer_Main_Detail
            'SSQL = SSQL & " where Company_id=" & clsVariables.CompnyId
            'If vbid <> 0 Then
            '    SSQL = SSQL & " and From_Department_id=" & vbid
            'End If
            'If viid <> 0 Then
            '    SSQL = SSQL & " and Item_id=" & viid
            'End If
            'If Len(vsid) <> 0 Then
            '    SSQL = SSQL & " and Size_Id=" & aq(vsid)
            'End If
            'If Len(vino) <> 0 Then
            '    SSQL = SSQL & " and Inw_no=" & Val(vino)
            'End If
            'LoadStock = LoadStock - Val(ob.FindOneString(SSQL, ob.Getconn(dbname)))
            'SSQL = "Select sum(Qty) from " & VTransfer_Main_Detail
            'SSQL = SSQL & " where Company_id=" & clsVariables.CompnyId
            'If vbid <> 0 Then
            '    SSQL = SSQL & " and To_Department_id=" & vbid
            'End If
            'If viid <> 0 Then
            '    SSQL = SSQL & " and Item_id=" & viid
            'End If
            'If Len(vsid) <> 0 Then
            '    SSQL = SSQL & " and Size_Id=" & aq(vsid)
            'End If
            'If Len(vino) <> 0 Then
            '    SSQL = SSQL & " and Inw_no=" & Val(vino)
            'End If
            'LoadStock = LoadStock + Val(ob.FindOneString(SSQL, ob.Getconn(dbname)))
            SSQL = "Select sum(Qnty) from ADDJUSTMENT_DETAIL"
            SSQL = SSQL & " where Company_id=" & clsVariables.CompnyId
            SSQL = SSQL & " and year_Id=" & aq(clsVariables.WorkingYear)
            'If vbid <> 0 Then
            '    ssql = ssql & " and Department_id=" & vbid
            'End If
            If viid <> 0 Then
                ssql = ssql & " and Item_id=" & viid
            End If
            If Len(vsid) <> 0 Then
                ssql = ssql & " and Size_Id=" & aq(vsid)
            End If
            If Len(vino) <> 0 Then
                ssql = ssql & " and Inw_no=" & Val(vino)
            End If
            LoadStock = LoadStock + Val(ob.FindOneString(SSQL, ob.getconnection(ob.Getconn(dbname))))
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return LoadStock
    End Function
    Public Sub DirectPrint(ByVal rptname As String, ByVal sd As DataSet, Optional ByVal noofprint As Integer = 1)
        Try
            Dim repdoc As New ReportDocument() 'CrystalDecisions.CrystalReports.Engine.
            repdoc.Load(clsVariables.RptLocation & rptname)
            Dim crtableLogoninfos As New TableLogOnInfos()  'CrystalDecisions.Shared.
            Dim crtableLogoninfo As New TableLogOnInfo() 'CrystalDecisions.Shared.
            Dim crConnectionInfo As New ConnectionInfo() 'CrystalDecisions.Shared.
            Dim CrTables As Tables 'CrystalDecisions.CrystalReports.Engine.
            Dim CrTable As Table 'CrystalDecisions.CrystalReports.Engine.
            With crConnectionInfo
                .ServerName = "assdsn"
                .DatabaseName = DbName
                If DbAuth <> "WIN" Then
                    .UserID = "advsys"
                    .Password = "advsys"
                End If
            End With
            CrTables = repdoc.Database.Tables
            For Each CrTable In CrTables
                crtableLogoninfo = CrTable.LogOnInfo
                crtableLogoninfo.ConnectionInfo = crConnectionInfo
                CrTable.ApplyLogOnInfo(crtableLogoninfo)
            Next
            repdoc.VerifyDatabase()
            repdoc.SetDataSource(sd)
            repdoc.SetParameterValue("@CompanyName", clsVariables.CompnyName)
            repdoc.PrintToPrinter(noofprint, False, 0, 0)

        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try

    End Sub
    Public Sub checkprocess(ByVal prnm As String)
        Try
            For Each clsprocess As Process In Process.GetProcesses
                If LCase(clsprocess.ProcessName) = LCase(prnm) Then
                    clsprocess.Kill()
                    Exit Sub
                End If

            Next
        Catch ex As Exception

        End Try
    End Sub

    'Public Sub PrepareAccountBookInterest(ByVal fromSupplierId As Integer, ByVal ToSupplierId As Integer, ByVal frdt As Date, ByVal todt As Date, ByVal IntRate As Decimal)
    '    Try
    '        Dim ssql As String
    '        Dim smem As String
    '        smem = ""
    '        If Val(fromSupplierId) > 0 Then
    '            smem = smem & " and Member_id>=" & Val(fromSupplierId)
    '        End If
    '        If Val(ToSupplierId) > 0 Then
    '            smem = smem & " and Member_id<=" & Val(ToSupplierId)
    '        End If
    '        ssql = "Delete from " & gMember_Ledger_Report
    '        ssql = ssql & " where Company_Id=" & vCompanyId
    '        ssql = ssql & " and ip_Address=" & aq(vIPAddress)
    '        ob.Execute(ssql, ob.Getconn(dbname))
    '        Dim dRunningBalance As Double
    '        Dim sDocDate As String

    '        Dim mInt As Double
    '        Dim dRECAMT As Double
    '        Dim dRecBal As Double
    '        Dim dPayBal As Double
    '        Dim dRecProd As Double
    '        Dim dPayProd As Double
    '        Dim mPayInt As Double
    '        Dim mRecInt As Double
    '        Dim dDays As Integer
    '        Dim dRebate As Double
    '        dRunningBalance = 0
    '        ssql = "SELECT Member_id,doc_type,doc_no,doc_date,net_amt FROM " & gMember_Opening_Bill_Data & " WHERE Company_ID = " & vCompanyId
    '        ssql = ssql & smem

    '        Dim dtm As New DataTable
    '        dtm = ob.Returntable(ssql, ob.Getconn(dbname))
    '        Dim m As Integer
    '        m = 0
    '        Do While m < dtm.Rows.Count
    '            If vYearId >= "2013-2014" Then
    '                If CDate(dtm.Rows(m).Item("Doc_Date")) = DateAdd(DateInterval.Day, -1, gFinYearStart) Then
    '                    ssql = "INSERT INTO " & gMember_Ledger_Report & "(Company_id,Ip_Address,Member_id,Doc_Date,Doc_Type,Doc_no,Particulars,Debit_amt,rec_Date)"
    '                    ssql = ssql & " VALUES(" & vCompanyId & "," & aq(vIPAddress) & "," & Val(dtm.Rows(m).Item("member_Id"))
    '                    ssql = ssql & "," & aq(gFinYearStart) & "," & Val(ob.IfNullThen(dtm.Rows(m).Item("Doc_Type"), 0)) & ","
    '                    ssql = ssql & Val(ob.IfNullThen(dtm.Rows(m).Item("Doc_No"), 0)) & ",'ifyAps_u bpL$u',"
    '                    ssql = ssql & Val(ob.IfNullThen(dtm.Rows(m).Item("Net_Amt"), 0)) & ","
    '                    ssql = ssql & aq(todt)
    '                    ssql = ssql & ")"
    '                    ob.Execute(ssql, ob.Getconn(dbname))
    '                Else
    '                    sDocDate = DateAdd(DateInterval.Day, 90, CDate(dtm.Rows(m).Item("Doc_Date")))
    '                    If CDate(DateAdd(DateInterval.Day, 90, CDate(dtm.Rows(m).Item("Doc_Date")))) <= todt Then
    '                        ssql = "INSERT INTO " & gMember_Ledger_Report & "(Company_id,Ip_Address,Member_id,Doc_Date,Doc_Type,Doc_no,Particulars,Debit_amt,rec_Date,Bal_Amt)"
    '                        ssql = ssql & " VALUES(" & vCompanyId & "," & aq(vIPAddress) & "," & Val(dtm.Rows(m).Item("member_Id"))
    '                        ssql = ssql & "," & aq(sDocDate) & "," & Val(ob.IfNullThen(dtm.Rows(m).Item("Doc_Type"), 0)) & ","
    '                        ssql = ssql & Val(ob.IfNullThen(dtm.Rows(m).Item("Doc_No"), 0)) & ",'ifyAps_u bpL$u',"
    '                        ssql = ssql & Val(ob.IfNullThen(dtm.Rows(m).Item("Net_Amt"), 0)) & ","
    '                        ssql = ssql & aq(todt) & ","
    '                        ssql = ssql & Val(ob.IfNullThen(dtm.Rows(m).Item("Net_Amt"), 0))
    '                        ob.Execute(ssql, ob.Getconn(dbname))
    '                    End If
    '                End If
    '            Else
    '                sDocDate = DateAdd(DateInterval.Day, 90, CDate(dtm.Rows(m).Item("Doc_Date")))
    '                If CDate(DateAdd(DateInterval.Day, 90, CDate(dtm.Rows(m).Item("Doc_Date")))) <= todt Then
    '                    ssql = "INSERT INTO " & gMember_Ledger_Report & "(Company_id,Ip_Address,Member_id,Doc_Date,Doc_Type,Doc_no,Particulars,Debit_amt,rec_Date,Bal_Amt)"
    '                    ssql = ssql & " VALUES(" & vCompanyId & "," & aq(vIPAddress) & "," & Val(dtm.Rows(m).Item("member_Id"))
    '                    ssql = ssql & "," & aq(sDocDate) & "," & Val(ob.IfNullThen(dtm.Rows(m).Item("Doc_Type"), 0)) & ","
    '                    ssql = ssql & Val(ob.IfNullThen(dtm.Rows(m).Item("Doc_No"), 0)) & ",'ifyAps_u bpL$u',"
    '                    ssql = ssql & Val(ob.IfNullThen(dtm.Rows(m).Item("Net_Amt"), 0)) & ","
    '                    ssql = ssql & aq(todt) & ","
    '                    ssql = ssql & Val(ob.IfNullThen(dtm.Rows(m).Item("Net_Amt"), 0))
    '                    ssql = ssql & ")"
    '                    ob.Execute(ssql, ob.Getconn(dbname))
    '                End If
    '            End If
    '            m += 1
    '        Loop
    '        dtm.Clear()
    '        dtm.Dispose()
    '        'Sales
    '        ssql = "SELECT Member_ID,Doc_date,doc_type,doc_no,Particulars,Net_Bill_Amt FROM " & VSales_Main & " WHERE company_id = " & vCompanyId
    '        ssql = ssql & " And Default_action = 'Credit'"
    '        ssql = ssql & smem
    '        ssql = ssql & " and Doc_Date>=" & aq(frdt)
    '        ssql = ssql & " and Doc_Date<=" & aq(todt)
    '        ssql = ssql & " Order by Member_Id,Doc_Date,Doc_Type,Doc_No"
    '        m = 0
    '        dtm = ob.Returntable(ssql, ob.Getconn(dbname))
    '        Do While m < dtm.Rows.Count
    '            sDocDate = DateAdd(DateInterval.Day, 90, CDate(dtm.Rows(m).Item("Doc_Date")))
    '            If CDate(DateAdd(DateInterval.Day, 90, CDate(dtm.Rows(m).Item("Doc_Date")))) <= todt Then
    '                If Not IsDBNull(dtm.Rows(m).Item("Particulars")) Then
    '                    If Not IsDBNull(dtm.Rows(m).Item("Net_Bill_Amt")) Then
    '                        ssql = "INSERT INTO " & gMember_Ledger_Report & "(Company_id,Ip_Address,Column_Id,Member_id,Doc_Date,Doc_Type,Doc_no,Particulars,Debit_amt,rec_Date,Bal_Amt)"
    '                        ssql = ssql & " VALUES(" & vCompanyId & "," & aq(vIPAddress) & ",1," & Val(dtm.Rows(m).Item("member_Id"))
    '                        ssql = ssql & "," & aq(sDocDate) & "," & Val(ob.IfNullThen(dtm.Rows(m).Item("Doc_Type"), 0)) & ","
    '                        ssql = ssql & Val(ob.IfNullThen(dtm.Rows(m).Item("Doc_No"), 0)) & "," & aq(dtm.Rows(m).Item("Particulars")) & ","
    '                        ssql = ssql & Val(ob.IfNullThen(dtm.Rows(m).Item("Net_Bill_Amt"), 0)) & ","
    '                        ssql = ssql & aq(todt) & ","
    '                        ssql = ssql & Val(ob.IfNullThen(dtm.Rows(m).Item("Net_Bill_Amt"), 0))
    '                        ssql = ssql & ")"
    '                        ob.Execute(ssql, ob.Getconn(dbname))
    '                    End If
    '                End If
    '            End If
    '            m += 1
    '        Loop
    '        dtm.Clear()
    '        dtm.Dispose()
    '        '''''Checking Receipt Amount
    '        Dim dBalAmt As Double
    '        Dim dBillAmt As Double

    '        dRECAMT = 0
    '        dBalAmt = 0

    '        Dim iSrNo As Long
    '        ssql = "Select member_Id from " & gMember_Ledger_Report & " where Company_id=" & vCompanyId
    '        ssql = ssql & " and ip_Address=" & aq(vIPAddress)
    '        ssql = ssql & " Group by Member_Id"
    '        dtm = ob.Returntable(ssql, ob.Getconn(dbname))
    '        m = 0
    '        iSrNo = 1
    '        Dim r As Integer
    '        Dim r1 As Integer
    '        Dim crst As New DataTable
    '        Dim bRSt As New DataTable
    '        Do While m < dtm.Rows.Count
    '            'Receipt Data
    '            ssql = "SELECT member_Id,doc_date,doc_amt FROM " & gReceipt_Data
    '            ssql = ssql & " WHERE company_id = " & vCompanyId
    '            ssql = ssql & " and Member_id=" & Val(dtm.Rows(m).Item("Member_Id"))
    '            ssql = ssql & " and doc_date <= " & aq(todt) & " ORDER by doc_date"
    '            crst = ob.Returntable(ssql, ob.Getconn(dbname))
    '            r = 0
    '            Do While r < crst.Rows.Count
    '                dRECAMT = Val(ob.IfNullThen(crst.Rows(r).Item("doc_amt"), 0))
    '                ssql = "SELECT doc_type,doc_no,Doc_Date,Column_Id,member_id,Debit_Amt,rec_amt,Bal_Amt FROM " & gMember_Ledger_Report
    '                ssql = ssql & " WHERE company_id = " & vCompanyId
    '                ssql = ssql & " and ip_address=" & aq(vIPAddress)
    '                ssql = ssql & " and Member_id=" & Val(dtm.Rows(m).Item("Member_Id"))
    '                ssql = ssql & " and rec_amt = 0 ORDER by doc_date,doc_type,doc_no"
    '                bRSt = ob.Returntable(ssql, ob.Getconn(dbname))
    '                r1 = 0
    '                Do While r1 < bRSt.Rows.Count
    '                    dBillAmt = Val(ob.IfNullThen(bRSt.Rows(r1).Item("Debit_Amt"), 0))
    '                    dBalAmt = Val(ob.IfNullThen(bRSt.Rows(r1).Item("Bal_Amt"), 0))
    '                    If dRECAMT > 0 Then
    '                        If dBalAmt > dRECAMT Then
    '                            iSrNo = iSrNo + 1
    '                            ssql = "UPDATE " & gMember_Ledger_Report & " SET Bal_Amt = " & dRECAMT & ",rec_amt = " & dRECAMT
    '                            ssql = ssql & ",rec_date = " & aq(crst.Rows(r).Item("Doc_Date"))
    '                            ssql = ssql & " WHERE company_id=" & vCompanyId
    '                            ssql = ssql & " and ip_Address=" & aq(vIPAddress)
    '                            ssql = ssql & " and Member_id=" & Val(dtm.Rows(m).Item("Member_Id"))
    '                            ssql = ssql & " and Column_Id = " & Val(ob.IfNullThen(bRSt.Rows(r1).Item("Column_Id"), 0))
    '                            ssql = ssql & " and doc_type = " & Val(ob.IfNullThen(bRSt.Rows(r1).Item("doc_type"), 0))
    '                            ssql = ssql & " and doc_no = " & Val(ob.IfNullThen(bRSt.Rows(r1).Item("doc_no"), 0))
    '                            ssql = ssql & " and doc_date = " & aq(bRSt.Rows(r1).Item("Doc_Date"))
    '                            ob.Execute(ssql, ob.Getconn(dbname))

    '                            dBalAmt = dBalAmt - dRECAMT

    '                            ssql = "INSERT INTO " & gMember_Ledger_Report & "(company_id,ip_Address,Column_id,Member_id,doc_date,doc_type,doc_no,Particulars,debit_Amt,rec_Date,Bal_Amt)"
    '                            ssql = ssql & " VALUES(" & vCompanyId & "," & aq(vIPAddress) & "," & iSrNo & "," & Val(dtm.Rows(m).Item("Member_Id"))
    '                            ssql = ssql & "," & aq(bRSt.Rows(r1).Item("Doc_Date"))
    '                            ssql = ssql & "," & Val(ob.IfNullThen(bRSt.Rows(r1).Item("doc_type"), 0))
    '                            ssql = ssql & "," & Val(ob.IfNullThen(bRSt.Rows(r1).Item("doc_no"), 0))
    '                            ssql = ssql & ",'Partly Payment Received'," & dBillAmt & "," & aq(todt) & "," & dBalAmt & ")"
    '                            ob.Execute(ssql, ob.Getconn(dbname))
    '                            Exit Do
    '                        Else
    '                            ssql = "UPDATE " & gMember_Ledger_Report & " SET rec_amt = " & dBalAmt
    '                            ssql = ssql & ",rec_date = " & aq(crst.Rows(r).Item("Doc_Date"))
    '                            ssql = ssql & ",bal_amt = " & dBalAmt
    '                            ssql = ssql & " WHERE company_id=" & vCompanyId
    '                            ssql = ssql & " and ip_Address=" & aq(vIPAddress)
    '                            ssql = ssql & " and Member_id=" & Val(dtm.Rows(m).Item("Member_Id"))
    '                            ssql = ssql & " and Column_Id = " & Val(ob.IfNullThen(bRSt.Rows(r1).Item("Column_Id"), 0))
    '                            ssql = ssql & " and doc_type = " & Val(ob.IfNullThen(bRSt.Rows(r1).Item("doc_type"), 0))
    '                            ssql = ssql & " and doc_no = " & Val(ob.IfNullThen(bRSt.Rows(r1).Item("doc_no"), 0))
    '                            ssql = ssql & " and doc_date = " & aq(bRSt.Rows(r1).Item("Doc_Date"))
    '                            ob.Execute(ssql, ob.Getconn(dbname))
    '                            dRECAMT = dRECAMT - dBalAmt
    '                        End If
    '                    End If
    '                    r1 += 1
    '                Loop
    '                bRSt.Clear()
    '                bRSt.Dispose()
    '                r += 1
    '            Loop
    '            m += 1
    '        Loop
    '        dtm.Clear()
    '        dtm.Dispose()
    '        'Interest Calculation
    '        Dim dTDays As Double
    '        Dim dBillDate As Date
    '        mInt = Val(IntRate)
    '        dDays = 0
    '        Dim dDays1 As Double
    '        dDays1 = 0
    '        ssql = "Select * from " & gMember_Ledger_Report
    '        ssql = ssql & " where Company_Id=" & vCompanyId
    '        ssql = ssql & " and ip_Address=" & aq(vIPAddress)
    '        ssql = ssql & " Order by Member_id,Doc_Date,Doc_Type,Doc_no"
    '        dtm = ob.Returntable(ssql, ob.Getconn(dbname))
    '        m = 0
    '        Do While m < dtm.Rows.Count
    '            dDays = 0
    '            dDays1 = 0
    '            mInt = 0
    '            If vYearId >= "2013-2014" Then
    '                If CDate(dtm.Rows(m).Item("Doc_Date")) < gFinYearStart Then
    '                    dDays = DateDiff(DateInterval.Day, gFinYearStart, CDate(dtm.Rows(m).Item("Rec_date")))
    '                Else
    '                    dDays = DateDiff(DateInterval.Day, CDate(dtm.Rows(m).Item("Doc_DAte")), CDate(dtm.Rows(m).Item("Rec_date")))
    '                End If
    '            Else
    '                dDays = DateDiff(DateInterval.Day, CDate(dtm.Rows(m).Item("Doc_DAte")), CDate(dtm.Rows(m).Item("Rec_date")))
    '            End If

    '            dPayBal = IIf(Val(ob.IfNullThen(dtm.Rows(m).Item("Rec_Amt"), 0)) <> 0, Val(ob.IfNullThen(dtm.Rows(m).Item("Rec_Amt"), 0)), Val(ob.IfNullThen(dtm.Rows(m).Item("Bal_Amt"), 0)))
    '            dRecBal = 0
    '            dPayProd = (dPayBal * dDays)
    '            dRecProd = 0

    '            dTDays = 0
    '            mPayInt = 0
    '            mRecInt = 0

    '            If CDate(dtm.Rows(m).Item("Doc_Date")) < gFinYearStart Then
    '                dBillDate = gFinYearStart
    '            Else
    '                dBillDate = CDate(dtm.Rows(m).Item("Doc_Date"))
    '            End If
    '            'Interest Slab
    '            If (DateAdd(DateInterval.Day, -90, CDate(dtm.Rows(m).Item("Doc_Date")))) <= DateValue("06/30/2013") Then
    '                mInt = Val(IntRate)

    '                If CDate(dtm.Rows(m).Item("Doc_Date")) <= DateValue("06/30/2013") Then
    '                    dDays1 = DateDiff(DateInterval.Day, dBillDate, CDate(dtm.Rows(m).Item("Rec_date")))
    '                    If dDays1 > 365 Then  ''+ 90 Then
    '                        mInt = Val(IntRate) + 3
    '                    Else
    '                        mInt = Val(IntRate)
    '                    End If
    '                    If dDays > 0 Then
    '                        mPayInt = Math.Round((mInt * dPayProd) / 36500, 2)
    '                    Else
    '                        mPayInt = 0
    '                    End If
    '                    mRecInt = 0
    '                    dRebate = Math.Round((3 * dPayProd) / 36500, 2)
    '                Else
    '                    If CDate(dtm.Rows(m).Item("Doc_Date")) <= DateValue("06/30/2013") Then
    '                        dDays = DateDiff(DateInterval.Day, dBillDate, DateValue("06/30/2013"))
    '                        dPayProd = (dPayBal * dDays)

    '                        dDays1 = DateDiff(DateInterval.Day, CDate(dtm.Rows(m).Item("Doc_DAte")), CDate(dtm.Rows(m).Item("Rec_date")))

    '                        If dDays1 > 365 Then
    '                            mInt = Val(IntRate) + 3
    '                        Else
    '                            mInt = Val(IntRate)
    '                        End If
    '                        If dDays > 0 Then
    '                            dTDays = dDays
    '                        Else
    '                            dTDays = dTDays
    '                        End If

    '                        If dDays > 0 Then
    '                            mPayInt = Math.Round((mInt * dPayProd) / 36500, 2)
    '                        Else
    '                            mPayInt = 0
    '                        End If
    '                        mRecInt = 0
    '                        dRebate = Math.Round((3 * dPayProd) / 36500, 2)

    '                        dDays = DateDiff(DateInterval.Day, DateValue("06/30/2013"), dtm.Rows(m).Item("Rec_date"))
    '                        dPayProd = (dPayBal * dDays)
    '                        If dDays > 0 Then
    '                            dTDays = dTDays + dDays
    '                        Else
    '                            dTDays = dTDays
    '                        End If
    '                        dDays1 = DateDiff(DateInterval.Day, (DateAdd(DateInterval.Day, -90, CDate(dtm.Rows(m).Item("Doc_Date")))), CDate(dtm.Rows(m).Item("Rec_date")))

    '                        Select Case dDays1
    '                            Case Is <= 90
    '                                mInt = 0
    '                            Case Is <= 180
    '                                mInt = 5
    '                            Case Is <= 270
    '                                mInt = 7
    '                            Case Is <= 365
    '                                mInt = 9
    '                            Case Is <= 455
    '                                mInt = 11
    '                            Case Else
    '                                mInt = 15
    '                        End Select

    '                        If dDays > 0 Then
    '                            mPayInt = mPayInt + Math.Round((mInt * dPayProd) / 36500, 2)
    '                        Else
    '                            mPayInt = mPayInt
    '                        End If
    '                        mRecInt = 0
    '                        dRebate = Math.Round((3 * dPayProd) / 36500, 2)
    '                    Else
    '                        dDays = DateDiff(DateInterval.Day, dBillAmt, CDate(dtm.Rows(m).Item("Rec_date")))
    '                        dPayProd = (dPayBal * dDays)
    '                        If dDays > 0 Then
    '                            dTDays = dTDays + dDays
    '                        Else
    '                            dTDays = dTDays
    '                        End If

    '                        dDays1 = DateDiff(DateInterval.Day, (DateAdd(DateInterval.Day, -90, CDate(dtm.Rows(m).Item("Doc_Date")))), CDate(dtm.Rows(m).Item("Rec_date")))

    '                        Select Case dDays1
    '                            Case Is <= 90
    '                                mInt = 0
    '                            Case Is <= 180
    '                                mInt = 5
    '                            Case Is <= 270
    '                                mInt = 7
    '                            Case Is <= 365
    '                                mInt = 9
    '                            Case Is <= 455
    '                                mInt = 11
    '                            Case Else
    '                                mInt = 15
    '                        End Select

    '                        If dDays > 0 Then
    '                            mPayInt = mPayInt + Math.Round((mInt * dPayProd) / 36500, 2)
    '                        Else
    '                            mPayInt = mPayInt
    '                        End If
    '                        mRecInt = 0
    '                        dRebate = Math.Round((3 * dPayProd) / 36500, 2)
    '                    End If
    '                    If vYearId >= "2013-2014" Then
    '                        If CDate(dtm.Rows(m).Item("Doc_Date")) < gFinYearStart Then
    '                            dDays = DateDiff(DateInterval.Day, gFinYearStart, CDate(dtm.Rows(m).Item("Rec_date")))
    '                        Else
    '                            dDays = DateDiff(DateInterval.Day, CDate(dtm.Rows(m).Item("Doc_date")), CDate(dtm.Rows(m).Item("Rec_date")))
    '                        End If
    '                    Else
    '                        dDays = DateDiff(DateInterval.Day, CDate(dtm.Rows(m).Item("Doc_date")), CDate(dtm.Rows(m).Item("Rec_date")))
    '                    End If
    '                End If
    '            Else
    '                dDays1 = DateDiff(DateInterval.Day, (DateAdd(DateInterval.Day, -90, CDate(dtm.Rows(m).Item("Doc_Date")))), CDate(dtm.Rows(m).Item("Rec_date")))
    '                Select Case dDays1
    '                    Case Is <= 90
    '                        mInt = 0
    '                    Case Is <= 180
    '                        mInt = 5
    '                    Case Is <= 270
    '                        mInt = 7
    '                    Case Is <= 365
    '                        mInt = 9
    '                    Case Is <= 455
    '                        mInt = 11
    '                    Case Else
    '                        mInt = 15
    '                End Select
    '                If dDays > 0 Then
    '                    mPayInt = mPayInt + Math.Round((mInt * dPayProd) / 36500, 2)
    '                Else
    '                    mPayInt = mPayInt
    '                End If
    '                mRecInt = 0
    '                dRebate = Math.Round((3 * dPayProd) / 36500, 2)
    '            End If
    '            ssql = "Update " & gMember_Ledger_Report & " Set Rebate=" & mInt
    '            If dDays > 0 Then
    '                ssql = ssql & ",days =" & dDays
    '            End If
    '            ssql = ssql & ",pay_int = isnull(pay_int,0)+" & mPayInt
    '            ssql = ssql & ",rec_int = isnull(rec_int,0)+" & mRecInt
    '            ssql = ssql & " where Company_id=" & vCompanyId
    '            ssql = ssql & " and ip_Address=" & aq(vIPAddress)
    '            ssql = ssql & " and Member_Id=" & Val(dtm.Rows(m).Item("member_id"))
    '            ssql = ssql & " and Column_Id=" & Val(dtm.Rows(m).Item("Column_id"))
    '            ssql = ssql & " and Doc_DAte=" & aq(dtm.Rows(m).Item("Doc_Date"))
    '            ssql = ssql & " and Doc_Type=" & Val(dtm.Rows(m).Item("Doc_Type"))
    '            ssql = ssql & " and Doc_No=" & Val(dtm.Rows(m).Item("Doc_No"))
    '            ob.Execute(ssql, ob.Getconn(dbname))

    '            m += 1
    '        Loop
    '        dtm.Clear()
    '        dtm.Dispose()
    '        ''interest
    '        'ssql = "INSERT INTO " & gMember_Ledger_Report & "(company_id,ip_Address,Column_Id,member_Id,doc_date,doc_type,doc_no,Particulars,Pay_Int)"
    '        'ssql = ssql & " Select " & vCompanyId & "," & aq(vIPAddress) & ",1,member_Id,Doc_Date,doc_Type,Doc_no,Particulars,Doc_AMT"
    '        'ssql = ssql & " from " & gInterest_Data
    '        'ssql = ssql & " where Company_id=" & vCompanyId
    '        'ssql = ssql & smem
    '        'ssql = ssql & " and doc_Date>=" & aq(frdt)
    '        'ssql = ssql & " and Doc_Date<=" & aq(todt)
    '        'ob.Execute(ssql, ob.Getconn(DbName))
    '        'receipt
    '        ssql = "INSERT INTO " & gMember_Ledger_Report & "(company_id,ip_Address,Column_Id,member_Id,doc_date,doc_type,doc_no,Particulars,Credit_Amt,Rec_Int,Rebate)"
    '        ssql = ssql & " SELECT " & vCompanyId & "," & aq(vIPAddress) & ",1,Member_id,Doc_Date,Doc_Type,Doc_No,Particulars,0,Int_Amt,Panl_Amt FROM " & gReceipt_Data
    '        ssql = ssql & " WHERE company_id = " & vCompanyId & " "
    '        ssql = ssql & smem
    '        ssql = ssql & " and doc_Date>=" & aq(frdt)
    '        ssql = ssql & " and Doc_Date<=" & aq(todt)
    '        ssql = ssql & " ORDER BY Doc_date"
    '        ob.Execute(ssql, ob.Getconn(dbname))


    '        ssql = "DELETE FROM " & gMember_Ledger_Report_New & " where Company_id=" & vCompanyId
    '        ssql = ssql & "  and ip_Address=" & aq(vIPAddress)
    '        ob.Execute(ssql, ob.Getconn(dbname))
    '        ssql = "INSERT INTO " & gMember_Ledger_Report_New & "(company_id,ip_Address,Column_Id,member_Id,doc_date,doc_type,doc_no,Particulars,Credit_Amt,debit_Amt,Rec_Int,pay_int,Days,Rebate,Rec_DAte,Bal_Amt)"
    '        ssql = ssql & " SELECT " & vCompanyId & "," & aq(vIPAddress) & ",Column_Id,Member_id,Doc_Date,doc_type,doc_no,Particulars,credit_amt,debit_amt,rec_int,pay_int,days,rebate ,Rec_Date,Bal_Amt"
    '        ssql = ssql & " FROM " & gMember_Ledger_Report & " WHERE company_id = " & vCompanyId
    '        ssql = ssql & " and ip_Address=" & aq(vIPAddress)
    '        ssql = ssql & " order by Member_id,doc_date"
    '        ob.Execute(ssql, ob.Getconn(dbname))
    '        'Interst Data Transfer to Account LEdger Interest Table
    '        'ssql = "DELETE FROM " & gMember_Ledger_Report & " where Company_id=" & vCompanyId
    '        'ssql = ssql & "  and ip_Address=" & aq(vIPAddress)
    '        'ob.Execute(ssql, ob.Getconn(DbName))
    '        'ssql = "INSERT INTO " & gMember_Ledger_Report & "(company_id,ip_Address,member_Id,doc_date,Particulars,Rec_Int)"
    '        'ssql = ssql & " SELECT " & vCompanyId & "," & aq(vIPAddress) & ",Member_id, " & aq(gFinYearStart) & ",'›Vep ',isnull(Sum(rec_int),0)-isnull(Sum(pay_int),0) "
    '        'ssql = ssql & " FROM " & gMember_Ledger_Report_New
    '        'ssql = ssql & " WHERE company_id = " & vCompanyId
    '        'ssql = ssql & " and ip_Address=" & aq(vIPAddress)
    '        'ssql = ssql & " GROUP by member_id ORDER by Member_Id"
    '        'ob.Execute(ssql, ob.Getconn(DbName))
    '    Catch ex As Exception
    '        MsgBox(ex.Message.ToString)
    '    End Try
    'End Sub
    Public Function UpdateEditUserNew(ByVal tblname As String, ByVal whr As String, ByVal cn As SqlConnection, Optional ByVal delete As Boolean = False) As Boolean
        Try
            Dim sql As String
            Dim dty As New DataTable
            sql = "Select * from " & tblname & " where " & whr & " and Edit_User=" & aq(New_Entry)
            dty = ob.Returntable(sql, cn)
            If dty.Rows.Count > 0 Then
                sql = "Update " & tblname & " set "
                sql = sql & " Edit_DAte=" & aq(Format(Now, "MM/dd/yyyy HH:mm:ss tt"))
                sql = sql & " ,Edit_User=" & aq(clsVariables.UserName)
                If delete = True Then
                    sql = sql & " ,Edit_User_Name=" & aq(delete_Entry)
                End If
                sql = sql & " where  " & whr
                sql = sql & " and Edit_User=" & aq(New_Entry)
                ob.Execute(sql, cn)
                Exit Function
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function FillPrinter(ByVal cmb As ComboBox) As ComboBox
        Try
            Dim pkInstalledPrinters As String
            cmb.Items.Clear()
            For Each pkInstalledPrinters In PrinterSettings.InstalledPrinters
                cmb.Items.Add(pkInstalledPrinters)
            Next pkInstalledPrinters

            ' Set the combo to the first printer in the list
            Dim ps As New PrinterSettings()
            cmb.Text = ps.PrinterName
            cmb.Font = New Font("Cambria", 10, FontStyle.Regular)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
        Return cmb
    End Function
    Public Sub loanReportGrid(ByVal lst As ListView)
        Try
            lst.Columns.Add("Report Header", 310)
            lst.Columns.Add("Rpt Name", 210)
            lst.Columns.Add("Direct Print", 100)
            lst.Columns.Add("Sr No", 50)
            lst.Columns.Add("Group Name", 100)
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub
    Public Sub SendMsg(ByVal msg As String)
        Try
            Dim ss As String
            ss = Mid(clsVariables.RptLocation, 1, Len(clsVariables.RptLocation) - 8) & "SMS\system\DirectSMS.EXE " & msg
            If vSms_System = True Then
                Shell(Mid(clsVariables.RptLocation, 1, Len(clsVariables.RptLocation) - 8) & "SMS\system\DirectSMS.EXE " & msg)
            End If
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Sub

    'Public Function SendSMS_SMSRoot(ByVal strSenderId As String, ByVal strMsgTo As String, ByVal strMsg As String, ByVal strMSGType As String, ByVal SMSRout As Integer, ByVal strAPIKey As String)

    '    'End Function
    '    'Public Function SendSMS_SMSRoot(strAPIKey As String, SMSRout As Integer, strMSGType As String, strSenderId As String, strUserId As String, strPassword As String, strPhoneNo As String, strMessage As String) As String
    '    SendSMS_SMSRoot = False
    '    Dim strResponse, strURL As String
    '    Dim GetURL As New System.Net.WebClient
    '    'Dim WinHttpReq As Object
    '    Dim sResult As String

    '    sResult = ""
    '    Try
    '        'strURL = "http://www.mitesh.krishsms.com/SendingSms.aspx?userid=" & strUserId & "&pass=" & strPassword & "&phone=" & strPhoneNo & "&msg=" & strMessage & "&title=" & strSenderId & ""
    '        strURL = "http://sms.smsroot.com/app/smsapi/index.php?key=" & strAPIKey & "&campaign=0&routeid=" & SMSRout & "&type=" & strMSGType & "&contacts=" & strMsgTo & "&senderid=" & strSenderId & "&msg=" & strMsg & ";"
    '        Dim data As System.IO.Stream = GetURL.OpenRead(strURL)
    '        'WinHttpReq = CreateObject("Msxml2.XMLHTTP")
    '        Dim reader As New System.IO.StreamReader(data)
    '        strResponse = reader.ReadToEnd()
    '        data.Close()
    '        reader.Close()
    '        'With WinHttpReq
    '        '    .Open("GET", strURL, False)
    '        '    .sEnd()
    '        '    sResult = .responseText
    '        'End With
    '        SendSMS_SMSRoot = sResult
    '        'SendSMS = "#500"
    '        Return strURL
    '    Catch ex As Exception
    '        MsgBox(ex.Message.ToString)
    '    End Try
    'End Function
    Public Function SendSMS_SMSRoot(ByVal strSenderId As String, ByVal strMsgTo As String, ByVal strMsg As String, ByVal strMSGType As String, ByVal SMSRout As Integer, ByVal strAPIKey As String)

        'End Function
        'Public Function SendSMS_SMSRoot(strAPIKey As String, SMSRout As Integer, strMSGType As String, strSenderId As String, strUserId As String, strPassword As String, strPhoneNo As String, strMessage As String) As String
        SendSMS_SMSRoot = False
        Dim strResponse, strURL As String
        Dim GetURL As New System.Net.WebClient
        'Dim WinHttpReq As Object
        Dim sResult As String

        sResult = ""
        Try
            'strURL = "http://www.mitesh.krishsms.com/SendingSms.aspx?userid=" & strUserId & "&pass=" & strPassword & "&phone=" & strPhoneNo & "&msg=" & strMessage & "&title=" & strSenderId & ""
            strURL = "http://sms.smsroot.com/app/smsapi/index.php?key=" & strAPIKey & "&campaign=0&routeid=" & SMSRout & "&type=" & strMSGType & "&contacts=" & strMsgTo & "&senderid=" & strSenderId & "&msg=" & strMsg & ";"
            Dim data As System.IO.Stream = GetURL.OpenRead(strURL)
            'WinHttpReq = CreateObject("Msxml2.XMLHTTP")
            Dim reader As New System.IO.StreamReader(data)
            strResponse = reader.ReadToEnd()
            data.Close()
            reader.Close()
            'With WinHttpReq
            '    .Open("GET", strURL, False)
            '    .sEnd()
            '    sResult = .responseText
            'End With
            SendSMS_SMSRoot = sResult
            'SendSMS = "#500"
            Return strURL
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try
    End Function
    Public Function SendSMS(ByVal number As String, ByVal text As String)
        Dim Message As String = ""
        Dim iso_8859_1 As System.Text.Encoding = System.Text.Encoding.GetEncoding("iso-8859-1")
        Dim utf16Bytes = Encoding.Unicode.GetBytes(text)
        Dim utf8Bytes = Encoding.Convert(Encoding.Unicode, Encoding.UTF8, utf16Bytes)
        Dim utf8string = iso_8859_1.GetString(utf8Bytes)
        Message = System.Web.HttpUtility.UrlEncode(utf8string, Encoding.UTF8)

        Dim geturl As New System.Net.WebClient
        Dim strresopnce, strurl As String
        'strurl = "http://bulksms.smsroot.com/app/smsapi/index.php?key=360CB203880B50&campaign=0&routeid=13&type=text&contacts=" & number & "&senderid=NTBNVS&msg=" & Message & "&template_id=1207162391449385836"
        ' 
        strurl = "http://bulksms.smsroot.com/app/smsapi/index.php?key=25EE0B52F67DEB&campaign=0&routeid=13&type=unicode&contacts=" & number & "&senderid=KSMMOL&msg=" & Message & "&template_id=1207165086573621635"
        Dim data As System.IO.Stream = geturl.OpenRead(strurl)
        Dim reader As New System.IO.StreamReader(data)
        strresopnce = reader.ReadToEnd()
        data.Close()
        reader.Close()
        '  MessageBox.Show("Message Send")
    End Function

    Public Function SendSMSkm(ByVal number As String, ByVal text As String)
        Dim Message As String = ""
        Dim iso_8859_1 As System.Text.Encoding = System.Text.Encoding.GetEncoding("iso-8859-1")
        Dim utf16Bytes = Encoding.Unicode.GetBytes(text)
        Dim utf8Bytes = Encoding.Convert(Encoding.Unicode, Encoding.UTF8, utf16Bytes)
        Dim utf8string = iso_8859_1.GetString(utf8Bytes)
        Message = System.Web.HttpUtility.UrlEncode(utf8string, Encoding.UTF8)

        Dim geturl As New System.Net.WebClient
        Dim strresopnce, strurl As String
        'strurl = "http://bulksms.smsroot.com/app/smsapi/index.php?key=360CB203880B50&campaign=0&routeid=13&type=text&contacts=" & number & "&senderid=NTBNVS&msg=" & Message & "&template_id=1207162391449385836"
        ' 
        strurl = "http://bulksms.smsroot.com/app/smsapi/index.php?key=25EE0B52F67DEB&campaign=0&routeid=13&type=unicode&contacts=" & number & "&senderid=KSMMOL&msg=" & Message & "&template_id=1207165086554235870"
        Dim data As System.IO.Stream = geturl.OpenRead(strurl)
        Dim reader As New System.IO.StreamReader(data)
        strresopnce = reader.ReadToEnd()
        data.Close()
        reader.Close()
        '  MessageBox.Show("Message Send")
    End Function

    Public Function SendSMScash(ByVal number As String, ByVal text As String)
        Dim Message As String = ""
        Dim iso_8859_1 As System.Text.Encoding = System.Text.Encoding.GetEncoding("iso-8859-1")
        Dim utf16Bytes = Encoding.Unicode.GetBytes(text)
        Dim utf8Bytes = Encoding.Convert(Encoding.Unicode, Encoding.UTF8, utf16Bytes)
        Dim utf8string = iso_8859_1.GetString(utf8Bytes)
        Message = System.Web.HttpUtility.UrlEncode(utf8string, Encoding.UTF8)

        Dim geturl As New System.Net.WebClient
        Dim strresopnce, strurl As String
        'strurl = "http://bulksms.smsroot.com/app/smsapi/index.php?key=360CB203880B50&campaign=0&routeid=13&type=text&contacts=" & number & "&senderid=NTBNVS&msg=" & Message & "&template_id=1207162391449385836"
        ' 
        strurl = "http://bulksms.smsroot.com/app/smsapi/index.php?key=25EE0B52F67DEB&campaign=0&routeid=13&type=unicode&contacts=" & number & "&senderid=KSMMOL&msg=" & Message & "&template_id=1207165495584232102"
        Dim data As System.IO.Stream = geturl.OpenRead(strurl)
        Dim reader As New System.IO.StreamReader(data)
        strresopnce = reader.ReadToEnd()
        data.Close()
        reader.Close()
        '  MessageBox.Show("Message Send")
    End Function

    Public Function SendSMS_1(ByVal strFrom As String, ByVal strTo As String, ByVal strMessage As String, ByVal strUsername As String, ByVal strPassword As String) As String
        SendSMS_1 = False
        Dim strResponse, strURL As String
        Dim GetURL As New System.Net.WebClient
        Try
            '         http://mysms1.krishbulksms.com/api/send_transactional_sms.php?username=r40&password=ADBDVS&sender_id=ADBDVS&message=test+message&mobile=9825126615
            'strURL = "http://178.63.227.91/api/send_transactional_sms.php?username=" & strUsername & "&password=" & strPassword & "&sender_id=" & strFrom & "&message=" & strMessage & "&mobile=" & strTo '& "&priority=11"
            'strURL = "http://mysms1.krishbulksms.com/api/send_transactional_sms.php?username=" & strUsername & "&password=" & strPassword & "&sender_id=" & strFrom & "&message=" & strMessage & "&mobile=" & strTo '& "&priority=11"
            'chnage 08/08/2014
            strURL = "http://www.mitesh.krishsms.com/SendingSms.aspx?userid=" & strUsername & "&pass=" & strPassword & "&phone=" & strTo & "&msg=" & strMessage & "&title=" & strFrom
            Dim data As System.IO.Stream = GetURL.OpenRead(strURL)

            Dim reader As New System.IO.StreamReader(data)
            strResponse = reader.ReadToEnd()
            data.Close()
            reader.Close()

            'If InStr(strResponse, "Sent", CompareMethod.Text) > 0 Then
            '    'Sucess
            '    strResponse = "Successfull"
            'Else

            '    'Failure
            '    strResponse = "Failed"
            '    'txtMessage.Text = strResponse
            'End If

            Return strResponse
        Catch ex As Exception
            MsgBox(ex.Message.ToString)
        End Try

    End Function
End Class
